/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { clientTokensCreate } from "../../funcs/clientTokensCreate.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.CreateClientTokenRequest$inboundSchema,
};

export const tool$clientTokensCreate: ToolDefinition<typeof args> = {
  name: "client-tokens-create",
  description: `Create a client token

Creates a client token with certain actions for Dwolla Drop-in components. The client token API request requires an \`action\` as well as a \`link\` which points to the Customer that identifies the end user performing the action within the drop-in component. The \`action\` is a string that contains a granular permission for the Customer performing the action within a drop-in component.
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await clientTokensCreate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
