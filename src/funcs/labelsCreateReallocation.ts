/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { DwollaCore } from "../core.js";
import { encodeJSON } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import { APIError } from "../models/errors/apierror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Create a label reallocation
 *
 * @remarks
 * Create a label reallocation
 */
export function labelsCreateReallocation(
  client: DwollaCore,
  request: operations.CreateLabelReallocationRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    operations.CreateLabelReallocationResponse | undefined,
    | errors.BadRequestError
    | errors.CreateLabelReallocationForbiddenDwollaV1HalJSONError
    | errors.CreateLabelReallocationNotFoundDwollaV1HalJSONError
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: DwollaCore,
  request: operations.CreateLabelReallocationRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      operations.CreateLabelReallocationResponse | undefined,
      | errors.BadRequestError
      | errors.CreateLabelReallocationForbiddenDwollaV1HalJSONError
      | errors.CreateLabelReallocationNotFoundDwollaV1HalJSONError
      | APIError
      | SDKValidationError
      | UnexpectedClientError
      | InvalidRequestError
      | RequestAbortedError
      | RequestTimeoutError
      | ConnectionError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) =>
      operations.CreateLabelReallocationRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = encodeJSON("body", payload, { explode: true });

  const path = pathToFunc("/label-reallocations")();

  const headers = new Headers(compactMap({
    "Content-Type": "application/json",
    Accept: "application/vnd.dwolla.v1.hal+json",
  }));

  const securityInput = await extractSecurity(client._options.security);
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "createLabelReallocation",
    oAuth2Scopes: [],

    resolvedSecurity: requestSecurity,

    securitySource: client._options.security,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "POST",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "403", "404", "4XX", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    operations.CreateLabelReallocationResponse | undefined,
    | errors.BadRequestError
    | errors.CreateLabelReallocationForbiddenDwollaV1HalJSONError
    | errors.CreateLabelReallocationNotFoundDwollaV1HalJSONError
    | APIError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    M.nil(
      201,
      operations.CreateLabelReallocationResponse$inboundSchema.optional(),
      { hdrs: true },
    ),
    M.jsonErr(400, errors.BadRequestError$inboundSchema, {
      ctype: "application/vnd.dwolla.v1.hal+json",
    }),
    M.jsonErr(
      403,
      errors.CreateLabelReallocationForbiddenDwollaV1HalJSONError$inboundSchema,
      { ctype: "application/vnd.dwolla.v1.hal+json" },
    ),
    M.jsonErr(
      404,
      errors.CreateLabelReallocationNotFoundDwollaV1HalJSONError$inboundSchema,
      { ctype: "application/vnd.dwolla.v1.hal+json" },
    ),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
