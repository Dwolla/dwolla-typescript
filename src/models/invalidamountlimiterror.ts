/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidAmountLimitErrorLinks = {};

export type InvalidAmountLimitErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidAmountLimitErrorLinks | undefined;
};

export type InvalidAmountLimitErrorEmbedded = {
  errors?: Array<InvalidAmountLimitErrorError> | undefined;
};

export type InvalidAmountLimitError = {
  code: string;
  message: string;
  embedded?: InvalidAmountLimitErrorEmbedded | undefined;
};

/** @internal */
export const InvalidAmountLimitErrorLinks$inboundSchema: z.ZodType<
  InvalidAmountLimitErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidAmountLimitErrorLinks$Outbound = {};

/** @internal */
export const InvalidAmountLimitErrorLinks$outboundSchema: z.ZodType<
  InvalidAmountLimitErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidAmountLimitErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAmountLimitErrorLinks$ {
  /** @deprecated use `InvalidAmountLimitErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InvalidAmountLimitErrorLinks$inboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InvalidAmountLimitErrorLinks$outboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorLinks$Outbound` instead. */
  export type Outbound = InvalidAmountLimitErrorLinks$Outbound;
}

export function invalidAmountLimitErrorLinksToJSON(
  invalidAmountLimitErrorLinks: InvalidAmountLimitErrorLinks,
): string {
  return JSON.stringify(
    InvalidAmountLimitErrorLinks$outboundSchema.parse(
      invalidAmountLimitErrorLinks,
    ),
  );
}

export function invalidAmountLimitErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidAmountLimitErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidAmountLimitErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidAmountLimitErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidAmountLimitErrorError$inboundSchema: z.ZodType<
  InvalidAmountLimitErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidAmountLimitErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidAmountLimitErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidAmountLimitErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidAmountLimitErrorError$outboundSchema: z.ZodType<
  InvalidAmountLimitErrorError$Outbound,
  z.ZodTypeDef,
  InvalidAmountLimitErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidAmountLimitErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAmountLimitErrorError$ {
  /** @deprecated use `InvalidAmountLimitErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidAmountLimitErrorError$inboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidAmountLimitErrorError$outboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorError$Outbound` instead. */
  export type Outbound = InvalidAmountLimitErrorError$Outbound;
}

export function invalidAmountLimitErrorErrorToJSON(
  invalidAmountLimitErrorError: InvalidAmountLimitErrorError,
): string {
  return JSON.stringify(
    InvalidAmountLimitErrorError$outboundSchema.parse(
      invalidAmountLimitErrorError,
    ),
  );
}

export function invalidAmountLimitErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidAmountLimitErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidAmountLimitErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidAmountLimitErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidAmountLimitErrorEmbedded$inboundSchema: z.ZodType<
  InvalidAmountLimitErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidAmountLimitErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InvalidAmountLimitErrorEmbedded$Outbound = {
  errors?: Array<InvalidAmountLimitErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidAmountLimitErrorEmbedded$outboundSchema: z.ZodType<
  InvalidAmountLimitErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidAmountLimitErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InvalidAmountLimitErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAmountLimitErrorEmbedded$ {
  /** @deprecated use `InvalidAmountLimitErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InvalidAmountLimitErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InvalidAmountLimitErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidAmountLimitErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidAmountLimitErrorEmbedded$Outbound;
}

export function invalidAmountLimitErrorEmbeddedToJSON(
  invalidAmountLimitErrorEmbedded: InvalidAmountLimitErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidAmountLimitErrorEmbedded$outboundSchema.parse(
      invalidAmountLimitErrorEmbedded,
    ),
  );
}

export function invalidAmountLimitErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InvalidAmountLimitErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidAmountLimitErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidAmountLimitErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const InvalidAmountLimitError$inboundSchema: z.ZodType<
  InvalidAmountLimitError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => InvalidAmountLimitErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type InvalidAmountLimitError$Outbound = {
  code: string;
  message: string;
  _embedded?: InvalidAmountLimitErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const InvalidAmountLimitError$outboundSchema: z.ZodType<
  InvalidAmountLimitError$Outbound,
  z.ZodTypeDef,
  InvalidAmountLimitError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => InvalidAmountLimitErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAmountLimitError$ {
  /** @deprecated use `InvalidAmountLimitError$inboundSchema` instead. */
  export const inboundSchema = InvalidAmountLimitError$inboundSchema;
  /** @deprecated use `InvalidAmountLimitError$outboundSchema` instead. */
  export const outboundSchema = InvalidAmountLimitError$outboundSchema;
  /** @deprecated use `InvalidAmountLimitError$Outbound` instead. */
  export type Outbound = InvalidAmountLimitError$Outbound;
}

export function invalidAmountLimitErrorToJSON(
  invalidAmountLimitError: InvalidAmountLimitError,
): string {
  return JSON.stringify(
    InvalidAmountLimitError$outboundSchema.parse(invalidAmountLimitError),
  );
}

export function invalidAmountLimitErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidAmountLimitError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidAmountLimitError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidAmountLimitError' from JSON`,
  );
}
