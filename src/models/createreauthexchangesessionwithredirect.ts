/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateReAuthExchangeSessionWithRedirectRedirectUrl = {
  /**
   * Required for Plaid mobile sessions
   */
  href: string;
};

export type CreateReAuthExchangeSessionWithRedirectLinks = {
  redirectUrl: CreateReAuthExchangeSessionWithRedirectRedirectUrl;
};

/**
 * Create re-auth exchange session with redirect URL (required for mobile sessions with Plaid)
 */
export type CreateReAuthExchangeSessionWithRedirect = {
  links: CreateReAuthExchangeSessionWithRedirectLinks;
};

/** @internal */
export const CreateReAuthExchangeSessionWithRedirectRedirectUrl$inboundSchema:
  z.ZodType<
    CreateReAuthExchangeSessionWithRedirectRedirectUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateReAuthExchangeSessionWithRedirectRedirectUrl$Outbound = {
  href: string;
};

/** @internal */
export const CreateReAuthExchangeSessionWithRedirectRedirectUrl$outboundSchema:
  z.ZodType<
    CreateReAuthExchangeSessionWithRedirectRedirectUrl$Outbound,
    z.ZodTypeDef,
    CreateReAuthExchangeSessionWithRedirectRedirectUrl
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionWithRedirectRedirectUrl$ {
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectRedirectUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreateReAuthExchangeSessionWithRedirectRedirectUrl$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectRedirectUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateReAuthExchangeSessionWithRedirectRedirectUrl$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectRedirectUrl$Outbound` instead. */
  export type Outbound =
    CreateReAuthExchangeSessionWithRedirectRedirectUrl$Outbound;
}

export function createReAuthExchangeSessionWithRedirectRedirectUrlToJSON(
  createReAuthExchangeSessionWithRedirectRedirectUrl:
    CreateReAuthExchangeSessionWithRedirectRedirectUrl,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionWithRedirectRedirectUrl$outboundSchema.parse(
      createReAuthExchangeSessionWithRedirectRedirectUrl,
    ),
  );
}

export function createReAuthExchangeSessionWithRedirectRedirectUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateReAuthExchangeSessionWithRedirectRedirectUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateReAuthExchangeSessionWithRedirectRedirectUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateReAuthExchangeSessionWithRedirectRedirectUrl' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSessionWithRedirectLinks$inboundSchema:
  z.ZodType<
    CreateReAuthExchangeSessionWithRedirectLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "redirect-url": z.lazy(() =>
      CreateReAuthExchangeSessionWithRedirectRedirectUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "redirect-url": "redirectUrl",
    });
  });

/** @internal */
export type CreateReAuthExchangeSessionWithRedirectLinks$Outbound = {
  "redirect-url": CreateReAuthExchangeSessionWithRedirectRedirectUrl$Outbound;
};

/** @internal */
export const CreateReAuthExchangeSessionWithRedirectLinks$outboundSchema:
  z.ZodType<
    CreateReAuthExchangeSessionWithRedirectLinks$Outbound,
    z.ZodTypeDef,
    CreateReAuthExchangeSessionWithRedirectLinks
  > = z.object({
    redirectUrl: z.lazy(() =>
      CreateReAuthExchangeSessionWithRedirectRedirectUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      redirectUrl: "redirect-url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionWithRedirectLinks$ {
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateReAuthExchangeSessionWithRedirectLinks$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateReAuthExchangeSessionWithRedirectLinks$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirectLinks$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSessionWithRedirectLinks$Outbound;
}

export function createReAuthExchangeSessionWithRedirectLinksToJSON(
  createReAuthExchangeSessionWithRedirectLinks:
    CreateReAuthExchangeSessionWithRedirectLinks,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionWithRedirectLinks$outboundSchema.parse(
      createReAuthExchangeSessionWithRedirectLinks,
    ),
  );
}

export function createReAuthExchangeSessionWithRedirectLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateReAuthExchangeSessionWithRedirectLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateReAuthExchangeSessionWithRedirectLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateReAuthExchangeSessionWithRedirectLinks' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSessionWithRedirect$inboundSchema: z.ZodType<
  CreateReAuthExchangeSessionWithRedirect,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() =>
    CreateReAuthExchangeSessionWithRedirectLinks$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateReAuthExchangeSessionWithRedirect$Outbound = {
  _links: CreateReAuthExchangeSessionWithRedirectLinks$Outbound;
};

/** @internal */
export const CreateReAuthExchangeSessionWithRedirect$outboundSchema: z.ZodType<
  CreateReAuthExchangeSessionWithRedirect$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSessionWithRedirect
> = z.object({
  links: z.lazy(() =>
    CreateReAuthExchangeSessionWithRedirectLinks$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionWithRedirect$ {
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirect$inboundSchema` instead. */
  export const inboundSchema =
    CreateReAuthExchangeSessionWithRedirect$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirect$outboundSchema` instead. */
  export const outboundSchema =
    CreateReAuthExchangeSessionWithRedirect$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionWithRedirect$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSessionWithRedirect$Outbound;
}

export function createReAuthExchangeSessionWithRedirectToJSON(
  createReAuthExchangeSessionWithRedirect:
    CreateReAuthExchangeSessionWithRedirect,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionWithRedirect$outboundSchema.parse(
      createReAuthExchangeSessionWithRedirect,
    ),
  );
}

export function createReAuthExchangeSessionWithRedirectFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateReAuthExchangeSessionWithRedirect,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateReAuthExchangeSessionWithRedirect$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateReAuthExchangeSessionWithRedirect' from JSON`,
  );
}
