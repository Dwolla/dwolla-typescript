/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type NotAuthorizedSchema = {
  code: string;
  message: string;
};

/** @internal */
export const NotAuthorizedSchema$inboundSchema: z.ZodType<
  NotAuthorizedSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type NotAuthorizedSchema$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const NotAuthorizedSchema$outboundSchema: z.ZodType<
  NotAuthorizedSchema$Outbound,
  z.ZodTypeDef,
  NotAuthorizedSchema
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotAuthorizedSchema$ {
  /** @deprecated use `NotAuthorizedSchema$inboundSchema` instead. */
  export const inboundSchema = NotAuthorizedSchema$inboundSchema;
  /** @deprecated use `NotAuthorizedSchema$outboundSchema` instead. */
  export const outboundSchema = NotAuthorizedSchema$outboundSchema;
  /** @deprecated use `NotAuthorizedSchema$Outbound` instead. */
  export type Outbound = NotAuthorizedSchema$Outbound;
}

export function notAuthorizedSchemaToJSON(
  notAuthorizedSchema: NotAuthorizedSchema,
): string {
  return JSON.stringify(
    NotAuthorizedSchema$outboundSchema.parse(notAuthorizedSchema),
  );
}

export function notAuthorizedSchemaFromJSON(
  jsonString: string,
): SafeParseResult<NotAuthorizedSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NotAuthorizedSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NotAuthorizedSchema' from JSON`,
  );
}
