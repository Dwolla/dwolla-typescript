/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SourceAddendaMaxLengthErrorLinks = {};

export type SourceAddendaMaxLengthErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: SourceAddendaMaxLengthErrorLinks | undefined;
};

export type SourceAddendaMaxLengthErrorEmbedded = {
  errors?: Array<SourceAddendaMaxLengthErrorError> | undefined;
};

/** @internal */
export const SourceAddendaMaxLengthErrorLinks$inboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SourceAddendaMaxLengthErrorLinks$Outbound = {};

/** @internal */
export const SourceAddendaMaxLengthErrorLinks$outboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorLinks$Outbound,
  z.ZodTypeDef,
  SourceAddendaMaxLengthErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAddendaMaxLengthErrorLinks$ {
  /** @deprecated use `SourceAddendaMaxLengthErrorLinks$inboundSchema` instead. */
  export const inboundSchema = SourceAddendaMaxLengthErrorLinks$inboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorLinks$outboundSchema` instead. */
  export const outboundSchema = SourceAddendaMaxLengthErrorLinks$outboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorLinks$Outbound` instead. */
  export type Outbound = SourceAddendaMaxLengthErrorLinks$Outbound;
}

export function sourceAddendaMaxLengthErrorLinksToJSON(
  sourceAddendaMaxLengthErrorLinks: SourceAddendaMaxLengthErrorLinks,
): string {
  return JSON.stringify(
    SourceAddendaMaxLengthErrorLinks$outboundSchema.parse(
      sourceAddendaMaxLengthErrorLinks,
    ),
  );
}

export function sourceAddendaMaxLengthErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<SourceAddendaMaxLengthErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAddendaMaxLengthErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAddendaMaxLengthErrorLinks' from JSON`,
  );
}

/** @internal */
export const SourceAddendaMaxLengthErrorError$inboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => SourceAddendaMaxLengthErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SourceAddendaMaxLengthErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: SourceAddendaMaxLengthErrorLinks$Outbound | undefined;
};

/** @internal */
export const SourceAddendaMaxLengthErrorError$outboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorError$Outbound,
  z.ZodTypeDef,
  SourceAddendaMaxLengthErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => SourceAddendaMaxLengthErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAddendaMaxLengthErrorError$ {
  /** @deprecated use `SourceAddendaMaxLengthErrorError$inboundSchema` instead. */
  export const inboundSchema = SourceAddendaMaxLengthErrorError$inboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorError$outboundSchema` instead. */
  export const outboundSchema = SourceAddendaMaxLengthErrorError$outboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorError$Outbound` instead. */
  export type Outbound = SourceAddendaMaxLengthErrorError$Outbound;
}

export function sourceAddendaMaxLengthErrorErrorToJSON(
  sourceAddendaMaxLengthErrorError: SourceAddendaMaxLengthErrorError,
): string {
  return JSON.stringify(
    SourceAddendaMaxLengthErrorError$outboundSchema.parse(
      sourceAddendaMaxLengthErrorError,
    ),
  );
}

export function sourceAddendaMaxLengthErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<SourceAddendaMaxLengthErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAddendaMaxLengthErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAddendaMaxLengthErrorError' from JSON`,
  );
}

/** @internal */
export const SourceAddendaMaxLengthErrorEmbedded$inboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => SourceAddendaMaxLengthErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type SourceAddendaMaxLengthErrorEmbedded$Outbound = {
  errors?: Array<SourceAddendaMaxLengthErrorError$Outbound> | undefined;
};

/** @internal */
export const SourceAddendaMaxLengthErrorEmbedded$outboundSchema: z.ZodType<
  SourceAddendaMaxLengthErrorEmbedded$Outbound,
  z.ZodTypeDef,
  SourceAddendaMaxLengthErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => SourceAddendaMaxLengthErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAddendaMaxLengthErrorEmbedded$ {
  /** @deprecated use `SourceAddendaMaxLengthErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    SourceAddendaMaxLengthErrorEmbedded$inboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    SourceAddendaMaxLengthErrorEmbedded$outboundSchema;
  /** @deprecated use `SourceAddendaMaxLengthErrorEmbedded$Outbound` instead. */
  export type Outbound = SourceAddendaMaxLengthErrorEmbedded$Outbound;
}

export function sourceAddendaMaxLengthErrorEmbeddedToJSON(
  sourceAddendaMaxLengthErrorEmbedded: SourceAddendaMaxLengthErrorEmbedded,
): string {
  return JSON.stringify(
    SourceAddendaMaxLengthErrorEmbedded$outboundSchema.parse(
      sourceAddendaMaxLengthErrorEmbedded,
    ),
  );
}

export function sourceAddendaMaxLengthErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<SourceAddendaMaxLengthErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      SourceAddendaMaxLengthErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAddendaMaxLengthErrorEmbedded' from JSON`,
  );
}
