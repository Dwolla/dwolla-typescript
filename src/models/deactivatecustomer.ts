/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Deactivate a Customer
 */
export type DeactivateCustomer = {
  status: string;
};

/** @internal */
export const DeactivateCustomer$inboundSchema: z.ZodType<
  DeactivateCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
});

/** @internal */
export type DeactivateCustomer$Outbound = {
  status: string;
};

/** @internal */
export const DeactivateCustomer$outboundSchema: z.ZodType<
  DeactivateCustomer$Outbound,
  z.ZodTypeDef,
  DeactivateCustomer
> = z.object({
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateCustomer$ {
  /** @deprecated use `DeactivateCustomer$inboundSchema` instead. */
  export const inboundSchema = DeactivateCustomer$inboundSchema;
  /** @deprecated use `DeactivateCustomer$outboundSchema` instead. */
  export const outboundSchema = DeactivateCustomer$outboundSchema;
  /** @deprecated use `DeactivateCustomer$Outbound` instead. */
  export type Outbound = DeactivateCustomer$Outbound;
}

export function deactivateCustomerToJSON(
  deactivateCustomer: DeactivateCustomer,
): string {
  return JSON.stringify(
    DeactivateCustomer$outboundSchema.parse(deactivateCustomer),
  );
}

export function deactivateCustomerFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateCustomer' from JSON`,
  );
}
