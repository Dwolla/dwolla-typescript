/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RetryVerifiedBusinessWithInternationalControllerAddress = {
  address1: string;
  address2?: string | undefined;
  address3?: string | undefined;
  city: string;
  postalCode?: string | undefined;
  country: string;
  stateProvinceRegion: string;
};

export type RetryVerifiedBusinessWithInternationalControllerPassport = {
  number: string;
  country: string;
};

export type RetryVerifiedBusinessWithInternationalControllerController = {
  firstName: string;
  lastName: string;
  title: string;
  dateOfBirth: string;
  address: RetryVerifiedBusinessWithInternationalControllerAddress;
  passport: RetryVerifiedBusinessWithInternationalControllerPassport;
};

/**
 * Retry Verification for Verified Business Customer where Business Details as well as International Controller Details need to be retried
 */
export type RetryVerifiedBusinessWithInternationalController = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: RetryVerifiedBusinessWithInternationalControllerController;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerAddress$inboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerAddress,
    z.ZodTypeDef,
    unknown
  > = z.object({
    address1: z.string(),
    address2: z.string().optional(),
    address3: z.string().optional(),
    city: z.string(),
    postalCode: z.string().optional(),
    country: z.string(),
    stateProvinceRegion: z.string(),
  });

/** @internal */
export type RetryVerifiedBusinessWithInternationalControllerAddress$Outbound = {
  address1: string;
  address2?: string | undefined;
  address3?: string | undefined;
  city: string;
  postalCode?: string | undefined;
  country: string;
  stateProvinceRegion: string;
};

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerAddress$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerAddress$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithInternationalControllerAddress
  > = z.object({
    address1: z.string(),
    address2: z.string().optional(),
    address3: z.string().optional(),
    city: z.string(),
    postalCode: z.string().optional(),
    country: z.string(),
    stateProvinceRegion: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithInternationalControllerAddress$ {
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerAddress$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithInternationalControllerAddress$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerAddress$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithInternationalControllerAddress$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerAddress$Outbound` instead. */
  export type Outbound =
    RetryVerifiedBusinessWithInternationalControllerAddress$Outbound;
}

export function retryVerifiedBusinessWithInternationalControllerAddressToJSON(
  retryVerifiedBusinessWithInternationalControllerAddress:
    RetryVerifiedBusinessWithInternationalControllerAddress,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithInternationalControllerAddress$outboundSchema
      .parse(retryVerifiedBusinessWithInternationalControllerAddress),
  );
}

export function retryVerifiedBusinessWithInternationalControllerAddressFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithInternationalControllerAddress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithInternationalControllerAddress$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessWithInternationalControllerAddress' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerPassport$inboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerPassport,
    z.ZodTypeDef,
    unknown
  > = z.object({
    number: z.string(),
    country: z.string(),
  });

/** @internal */
export type RetryVerifiedBusinessWithInternationalControllerPassport$Outbound =
  {
    number: string;
    country: string;
  };

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerPassport$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerPassport$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithInternationalControllerPassport
  > = z.object({
    number: z.string(),
    country: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithInternationalControllerPassport$ {
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerPassport$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithInternationalControllerPassport$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerPassport$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithInternationalControllerPassport$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerPassport$Outbound` instead. */
  export type Outbound =
    RetryVerifiedBusinessWithInternationalControllerPassport$Outbound;
}

export function retryVerifiedBusinessWithInternationalControllerPassportToJSON(
  retryVerifiedBusinessWithInternationalControllerPassport:
    RetryVerifiedBusinessWithInternationalControllerPassport,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithInternationalControllerPassport$outboundSchema
      .parse(retryVerifiedBusinessWithInternationalControllerPassport),
  );
}

export function retryVerifiedBusinessWithInternationalControllerPassportFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithInternationalControllerPassport,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithInternationalControllerPassport$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessWithInternationalControllerPassport' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerController$inboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerAddress$inboundSchema
    ),
    passport: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerPassport$inboundSchema
    ),
  });

/** @internal */
export type RetryVerifiedBusinessWithInternationalControllerController$Outbound =
  {
    firstName: string;
    lastName: string;
    title: string;
    dateOfBirth: string;
    address: RetryVerifiedBusinessWithInternationalControllerAddress$Outbound;
    passport: RetryVerifiedBusinessWithInternationalControllerPassport$Outbound;
  };

/** @internal */
export const RetryVerifiedBusinessWithInternationalControllerController$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalControllerController$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithInternationalControllerController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerAddress$outboundSchema
    ),
    passport: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerPassport$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithInternationalControllerController$ {
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerController$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithInternationalControllerController$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerController$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithInternationalControllerController$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalControllerController$Outbound` instead. */
  export type Outbound =
    RetryVerifiedBusinessWithInternationalControllerController$Outbound;
}

export function retryVerifiedBusinessWithInternationalControllerControllerToJSON(
  retryVerifiedBusinessWithInternationalControllerController:
    RetryVerifiedBusinessWithInternationalControllerController,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithInternationalControllerController$outboundSchema
      .parse(retryVerifiedBusinessWithInternationalControllerController),
  );
}

export function retryVerifiedBusinessWithInternationalControllerControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithInternationalControllerController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithInternationalControllerController$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessWithInternationalControllerController' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessWithInternationalController$inboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    type: z.string(),
    address1: z.string(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    controller: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerController$inboundSchema
    ),
    businessClassification: z.string(),
    businessType: z.string(),
    businessName: z.string(),
    ein: z.string(),
  });

/** @internal */
export type RetryVerifiedBusinessWithInternationalController$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller:
    RetryVerifiedBusinessWithInternationalControllerController$Outbound;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusinessWithInternationalController$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithInternationalController$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithInternationalController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    type: z.string(),
    address1: z.string(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    controller: z.lazy(() =>
      RetryVerifiedBusinessWithInternationalControllerController$outboundSchema
    ),
    businessClassification: z.string(),
    businessType: z.string(),
    businessName: z.string(),
    ein: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithInternationalController$ {
  /** @deprecated use `RetryVerifiedBusinessWithInternationalController$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithInternationalController$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalController$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithInternationalController$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithInternationalController$Outbound` instead. */
  export type Outbound =
    RetryVerifiedBusinessWithInternationalController$Outbound;
}

export function retryVerifiedBusinessWithInternationalControllerToJSON(
  retryVerifiedBusinessWithInternationalController:
    RetryVerifiedBusinessWithInternationalController,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithInternationalController$outboundSchema.parse(
      retryVerifiedBusinessWithInternationalController,
    ),
  );
}

export function retryVerifiedBusinessWithInternationalControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithInternationalController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithInternationalController$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RetryVerifiedBusinessWithInternationalController' from JSON`,
  );
}
