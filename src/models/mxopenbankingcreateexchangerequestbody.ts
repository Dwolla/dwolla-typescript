/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MXOpenBankingCreateExchangeRequestBodyExchangePartner = {
  href: string;
};

export type MXOpenBankingCreateExchangeRequestBodyLinks = {
  exchangePartner: MXOpenBankingCreateExchangeRequestBodyExchangePartner;
};

export type Mx = {
  /**
   * The MX connection token for the available connection
   */
  availableConnectionToken: string;
};

export type MXOpenBankingCreateExchangeRequestBody = {
  links: MXOpenBankingCreateExchangeRequestBodyLinks;
  mx: Mx;
};

/** @internal */
export const MXOpenBankingCreateExchangeRequestBodyExchangePartner$inboundSchema:
  z.ZodType<
    MXOpenBankingCreateExchangeRequestBodyExchangePartner,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type MXOpenBankingCreateExchangeRequestBodyExchangePartner$Outbound = {
  href: string;
};

/** @internal */
export const MXOpenBankingCreateExchangeRequestBodyExchangePartner$outboundSchema:
  z.ZodType<
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$Outbound,
    z.ZodTypeDef,
    MXOpenBankingCreateExchangeRequestBodyExchangePartner
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXOpenBankingCreateExchangeRequestBodyExchangePartner$ {
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyExchangePartner$inboundSchema` instead. */
  export const inboundSchema =
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$inboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyExchangePartner$outboundSchema` instead. */
  export const outboundSchema =
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$outboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyExchangePartner$Outbound` instead. */
  export type Outbound =
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$Outbound;
}

export function mxOpenBankingCreateExchangeRequestBodyExchangePartnerToJSON(
  mxOpenBankingCreateExchangeRequestBodyExchangePartner:
    MXOpenBankingCreateExchangeRequestBodyExchangePartner,
): string {
  return JSON.stringify(
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$outboundSchema.parse(
      mxOpenBankingCreateExchangeRequestBodyExchangePartner,
    ),
  );
}

export function mxOpenBankingCreateExchangeRequestBodyExchangePartnerFromJSON(
  jsonString: string,
): SafeParseResult<
  MXOpenBankingCreateExchangeRequestBodyExchangePartner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MXOpenBankingCreateExchangeRequestBodyExchangePartner$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MXOpenBankingCreateExchangeRequestBodyExchangePartner' from JSON`,
  );
}

/** @internal */
export const MXOpenBankingCreateExchangeRequestBodyLinks$inboundSchema:
  z.ZodType<
    MXOpenBankingCreateExchangeRequestBodyLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "exchange-partner": z.lazy(() =>
      MXOpenBankingCreateExchangeRequestBodyExchangePartner$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "exchange-partner": "exchangePartner",
    });
  });

/** @internal */
export type MXOpenBankingCreateExchangeRequestBodyLinks$Outbound = {
  "exchange-partner":
    MXOpenBankingCreateExchangeRequestBodyExchangePartner$Outbound;
};

/** @internal */
export const MXOpenBankingCreateExchangeRequestBodyLinks$outboundSchema:
  z.ZodType<
    MXOpenBankingCreateExchangeRequestBodyLinks$Outbound,
    z.ZodTypeDef,
    MXOpenBankingCreateExchangeRequestBodyLinks
  > = z.object({
    exchangePartner: z.lazy(() =>
      MXOpenBankingCreateExchangeRequestBodyExchangePartner$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      exchangePartner: "exchange-partner",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXOpenBankingCreateExchangeRequestBodyLinks$ {
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyLinks$inboundSchema` instead. */
  export const inboundSchema =
    MXOpenBankingCreateExchangeRequestBodyLinks$inboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyLinks$outboundSchema` instead. */
  export const outboundSchema =
    MXOpenBankingCreateExchangeRequestBodyLinks$outboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBodyLinks$Outbound` instead. */
  export type Outbound = MXOpenBankingCreateExchangeRequestBodyLinks$Outbound;
}

export function mxOpenBankingCreateExchangeRequestBodyLinksToJSON(
  mxOpenBankingCreateExchangeRequestBodyLinks:
    MXOpenBankingCreateExchangeRequestBodyLinks,
): string {
  return JSON.stringify(
    MXOpenBankingCreateExchangeRequestBodyLinks$outboundSchema.parse(
      mxOpenBankingCreateExchangeRequestBodyLinks,
    ),
  );
}

export function mxOpenBankingCreateExchangeRequestBodyLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  MXOpenBankingCreateExchangeRequestBodyLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MXOpenBankingCreateExchangeRequestBodyLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MXOpenBankingCreateExchangeRequestBodyLinks' from JSON`,
  );
}

/** @internal */
export const Mx$inboundSchema: z.ZodType<Mx, z.ZodTypeDef, unknown> = z.object({
  availableConnectionToken: z.string(),
});

/** @internal */
export type Mx$Outbound = {
  availableConnectionToken: string;
};

/** @internal */
export const Mx$outboundSchema: z.ZodType<Mx$Outbound, z.ZodTypeDef, Mx> = z
  .object({
    availableConnectionToken: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Mx$ {
  /** @deprecated use `Mx$inboundSchema` instead. */
  export const inboundSchema = Mx$inboundSchema;
  /** @deprecated use `Mx$outboundSchema` instead. */
  export const outboundSchema = Mx$outboundSchema;
  /** @deprecated use `Mx$Outbound` instead. */
  export type Outbound = Mx$Outbound;
}

export function mxToJSON(mx: Mx): string {
  return JSON.stringify(Mx$outboundSchema.parse(mx));
}

export function mxFromJSON(
  jsonString: string,
): SafeParseResult<Mx, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Mx$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Mx' from JSON`,
  );
}

/** @internal */
export const MXOpenBankingCreateExchangeRequestBody$inboundSchema: z.ZodType<
  MXOpenBankingCreateExchangeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() =>
    MXOpenBankingCreateExchangeRequestBodyLinks$inboundSchema
  ),
  mx: z.lazy(() => Mx$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type MXOpenBankingCreateExchangeRequestBody$Outbound = {
  _links: MXOpenBankingCreateExchangeRequestBodyLinks$Outbound;
  mx: Mx$Outbound;
};

/** @internal */
export const MXOpenBankingCreateExchangeRequestBody$outboundSchema: z.ZodType<
  MXOpenBankingCreateExchangeRequestBody$Outbound,
  z.ZodTypeDef,
  MXOpenBankingCreateExchangeRequestBody
> = z.object({
  links: z.lazy(() =>
    MXOpenBankingCreateExchangeRequestBodyLinks$outboundSchema
  ),
  mx: z.lazy(() => Mx$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXOpenBankingCreateExchangeRequestBody$ {
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    MXOpenBankingCreateExchangeRequestBody$inboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    MXOpenBankingCreateExchangeRequestBody$outboundSchema;
  /** @deprecated use `MXOpenBankingCreateExchangeRequestBody$Outbound` instead. */
  export type Outbound = MXOpenBankingCreateExchangeRequestBody$Outbound;
}

export function mxOpenBankingCreateExchangeRequestBodyToJSON(
  mxOpenBankingCreateExchangeRequestBody:
    MXOpenBankingCreateExchangeRequestBody,
): string {
  return JSON.stringify(
    MXOpenBankingCreateExchangeRequestBody$outboundSchema.parse(
      mxOpenBankingCreateExchangeRequestBody,
    ),
  );
}

export function mxOpenBankingCreateExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<MXOpenBankingCreateExchangeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MXOpenBankingCreateExchangeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MXOpenBankingCreateExchangeRequestBody' from JSON`,
  );
}
