/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OperationBlockedErrorLinks = {};

export type OperationBlockedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: OperationBlockedErrorLinks | undefined;
};

export type OperationBlockedErrorEmbedded = {
  errors?: Array<OperationBlockedErrorError> | undefined;
};

/** @internal */
export const OperationBlockedErrorLinks$inboundSchema: z.ZodType<
  OperationBlockedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type OperationBlockedErrorLinks$Outbound = {};

/** @internal */
export const OperationBlockedErrorLinks$outboundSchema: z.ZodType<
  OperationBlockedErrorLinks$Outbound,
  z.ZodTypeDef,
  OperationBlockedErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationBlockedErrorLinks$ {
  /** @deprecated use `OperationBlockedErrorLinks$inboundSchema` instead. */
  export const inboundSchema = OperationBlockedErrorLinks$inboundSchema;
  /** @deprecated use `OperationBlockedErrorLinks$outboundSchema` instead. */
  export const outboundSchema = OperationBlockedErrorLinks$outboundSchema;
  /** @deprecated use `OperationBlockedErrorLinks$Outbound` instead. */
  export type Outbound = OperationBlockedErrorLinks$Outbound;
}

export function operationBlockedErrorLinksToJSON(
  operationBlockedErrorLinks: OperationBlockedErrorLinks,
): string {
  return JSON.stringify(
    OperationBlockedErrorLinks$outboundSchema.parse(operationBlockedErrorLinks),
  );
}

export function operationBlockedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<OperationBlockedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationBlockedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationBlockedErrorLinks' from JSON`,
  );
}

/** @internal */
export const OperationBlockedErrorError$inboundSchema: z.ZodType<
  OperationBlockedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => OperationBlockedErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type OperationBlockedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: OperationBlockedErrorLinks$Outbound | undefined;
};

/** @internal */
export const OperationBlockedErrorError$outboundSchema: z.ZodType<
  OperationBlockedErrorError$Outbound,
  z.ZodTypeDef,
  OperationBlockedErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => OperationBlockedErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationBlockedErrorError$ {
  /** @deprecated use `OperationBlockedErrorError$inboundSchema` instead. */
  export const inboundSchema = OperationBlockedErrorError$inboundSchema;
  /** @deprecated use `OperationBlockedErrorError$outboundSchema` instead. */
  export const outboundSchema = OperationBlockedErrorError$outboundSchema;
  /** @deprecated use `OperationBlockedErrorError$Outbound` instead. */
  export type Outbound = OperationBlockedErrorError$Outbound;
}

export function operationBlockedErrorErrorToJSON(
  operationBlockedErrorError: OperationBlockedErrorError,
): string {
  return JSON.stringify(
    OperationBlockedErrorError$outboundSchema.parse(operationBlockedErrorError),
  );
}

export function operationBlockedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<OperationBlockedErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationBlockedErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationBlockedErrorError' from JSON`,
  );
}

/** @internal */
export const OperationBlockedErrorEmbedded$inboundSchema: z.ZodType<
  OperationBlockedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => OperationBlockedErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type OperationBlockedErrorEmbedded$Outbound = {
  errors?: Array<OperationBlockedErrorError$Outbound> | undefined;
};

/** @internal */
export const OperationBlockedErrorEmbedded$outboundSchema: z.ZodType<
  OperationBlockedErrorEmbedded$Outbound,
  z.ZodTypeDef,
  OperationBlockedErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => OperationBlockedErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OperationBlockedErrorEmbedded$ {
  /** @deprecated use `OperationBlockedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = OperationBlockedErrorEmbedded$inboundSchema;
  /** @deprecated use `OperationBlockedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = OperationBlockedErrorEmbedded$outboundSchema;
  /** @deprecated use `OperationBlockedErrorEmbedded$Outbound` instead. */
  export type Outbound = OperationBlockedErrorEmbedded$Outbound;
}

export function operationBlockedErrorEmbeddedToJSON(
  operationBlockedErrorEmbedded: OperationBlockedErrorEmbedded,
): string {
  return JSON.stringify(
    OperationBlockedErrorEmbedded$outboundSchema.parse(
      operationBlockedErrorEmbedded,
    ),
  );
}

export function operationBlockedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<OperationBlockedErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OperationBlockedErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OperationBlockedErrorEmbedded' from JSON`,
  );
}
