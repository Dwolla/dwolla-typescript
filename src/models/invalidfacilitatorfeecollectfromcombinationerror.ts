/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidFacilitatorFeeCollectFromCombinationErrorLinks = {};

export type InvalidFacilitatorFeeCollectFromCombinationErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidFacilitatorFeeCollectFromCombinationErrorLinks | undefined;
};

export type InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded = {
  errors?:
    | Array<InvalidFacilitatorFeeCollectFromCombinationErrorError>
    | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorLinks$inboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type InvalidFacilitatorFeeCollectFromCombinationErrorLinks$Outbound = {};

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorLinks$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromCombinationErrorLinks$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorLinks$Outbound` instead. */
  export type Outbound =
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks$Outbound;
}

export function invalidFacilitatorFeeCollectFromCombinationErrorLinksToJSON(
  invalidFacilitatorFeeCollectFromCombinationErrorLinks:
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromCombinationErrorLinks$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromCombinationErrorLinks,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromCombinationErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromCombinationErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromCombinationErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromCombinationErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorError$inboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      InvalidFacilitatorFeeCollectFromCombinationErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type InvalidFacilitatorFeeCollectFromCombinationErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | InvalidFacilitatorFeeCollectFromCombinationErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorError$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorError$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromCombinationErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidFacilitatorFeeCollectFromCombinationErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromCombinationErrorError$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorError$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorError$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorError$Outbound` instead. */
  export type Outbound =
    InvalidFacilitatorFeeCollectFromCombinationErrorError$Outbound;
}

export function invalidFacilitatorFeeCollectFromCombinationErrorErrorToJSON(
  invalidFacilitatorFeeCollectFromCombinationErrorError:
    InvalidFacilitatorFeeCollectFromCombinationErrorError,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromCombinationErrorError$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromCombinationErrorError,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromCombinationErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromCombinationErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromCombinationErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromCombinationErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidFacilitatorFeeCollectFromCombinationErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$Outbound =
  {
    errors?:
      | Array<InvalidFacilitatorFeeCollectFromCombinationErrorError$Outbound>
      | undefined;
  };

/** @internal */
export const InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidFacilitatorFeeCollectFromCombinationErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$Outbound` instead. */
  export type Outbound =
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$Outbound;
}

export function invalidFacilitatorFeeCollectFromCombinationErrorEmbeddedToJSON(
  invalidFacilitatorFeeCollectFromCombinationErrorEmbedded:
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$outboundSchema
      .parse(invalidFacilitatorFeeCollectFromCombinationErrorEmbedded),
  );
}

export function invalidFacilitatorFeeCollectFromCombinationErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromCombinationErrorEmbedded' from JSON`,
  );
}
