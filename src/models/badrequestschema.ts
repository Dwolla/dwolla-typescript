/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type BadRequestSchemaEmbedded = {
  code?: string | undefined;
  message?: string | undefined;
};

export type BadRequestSchema = {
  code: string;
  message: string;
  embedded?: BadRequestSchemaEmbedded | undefined;
};

/** @internal */
export const BadRequestSchemaEmbedded$inboundSchema: z.ZodType<
  BadRequestSchemaEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
});

/** @internal */
export type BadRequestSchemaEmbedded$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const BadRequestSchemaEmbedded$outboundSchema: z.ZodType<
  BadRequestSchemaEmbedded$Outbound,
  z.ZodTypeDef,
  BadRequestSchemaEmbedded
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestSchemaEmbedded$ {
  /** @deprecated use `BadRequestSchemaEmbedded$inboundSchema` instead. */
  export const inboundSchema = BadRequestSchemaEmbedded$inboundSchema;
  /** @deprecated use `BadRequestSchemaEmbedded$outboundSchema` instead. */
  export const outboundSchema = BadRequestSchemaEmbedded$outboundSchema;
  /** @deprecated use `BadRequestSchemaEmbedded$Outbound` instead. */
  export type Outbound = BadRequestSchemaEmbedded$Outbound;
}

export function badRequestSchemaEmbeddedToJSON(
  badRequestSchemaEmbedded: BadRequestSchemaEmbedded,
): string {
  return JSON.stringify(
    BadRequestSchemaEmbedded$outboundSchema.parse(badRequestSchemaEmbedded),
  );
}

export function badRequestSchemaEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestSchemaEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestSchemaEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestSchemaEmbedded' from JSON`,
  );
}

/** @internal */
export const BadRequestSchema$inboundSchema: z.ZodType<
  BadRequestSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => BadRequestSchemaEmbedded$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type BadRequestSchema$Outbound = {
  code: string;
  message: string;
  _embedded?: BadRequestSchemaEmbedded$Outbound | undefined;
};

/** @internal */
export const BadRequestSchema$outboundSchema: z.ZodType<
  BadRequestSchema$Outbound,
  z.ZodTypeDef,
  BadRequestSchema
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => BadRequestSchemaEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestSchema$ {
  /** @deprecated use `BadRequestSchema$inboundSchema` instead. */
  export const inboundSchema = BadRequestSchema$inboundSchema;
  /** @deprecated use `BadRequestSchema$outboundSchema` instead. */
  export const outboundSchema = BadRequestSchema$outboundSchema;
  /** @deprecated use `BadRequestSchema$Outbound` instead. */
  export type Outbound = BadRequestSchema$Outbound;
}

export function badRequestSchemaToJSON(
  badRequestSchema: BadRequestSchema,
): string {
  return JSON.stringify(
    BadRequestSchema$outboundSchema.parse(badRequestSchema),
  );
}

export function badRequestSchemaFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestSchema' from JSON`,
  );
}
