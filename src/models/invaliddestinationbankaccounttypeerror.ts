/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidDestinationBankAccountTypeErrorLinks = {};

export type InvalidDestinationBankAccountTypeErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidDestinationBankAccountTypeErrorLinks | undefined;
};

export type InvalidDestinationBankAccountTypeErrorEmbedded = {
  errors?: Array<InvalidDestinationBankAccountTypeErrorError> | undefined;
};

/** @internal */
export const InvalidDestinationBankAccountTypeErrorLinks$inboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type InvalidDestinationBankAccountTypeErrorLinks$Outbound = {};

/** @internal */
export const InvalidDestinationBankAccountTypeErrorLinks$outboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidDestinationBankAccountTypeErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationBankAccountTypeErrorLinks$ {
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationBankAccountTypeErrorLinks$inboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationBankAccountTypeErrorLinks$outboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorLinks$Outbound` instead. */
  export type Outbound = InvalidDestinationBankAccountTypeErrorLinks$Outbound;
}

export function invalidDestinationBankAccountTypeErrorLinksToJSON(
  invalidDestinationBankAccountTypeErrorLinks:
    InvalidDestinationBankAccountTypeErrorLinks,
): string {
  return JSON.stringify(
    InvalidDestinationBankAccountTypeErrorLinks$outboundSchema.parse(
      invalidDestinationBankAccountTypeErrorLinks,
    ),
  );
}

export function invalidDestinationBankAccountTypeErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationBankAccountTypeErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationBankAccountTypeErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationBankAccountTypeErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidDestinationBankAccountTypeErrorError$inboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      InvalidDestinationBankAccountTypeErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type InvalidDestinationBankAccountTypeErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidDestinationBankAccountTypeErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidDestinationBankAccountTypeErrorError$outboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorError$Outbound,
    z.ZodTypeDef,
    InvalidDestinationBankAccountTypeErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidDestinationBankAccountTypeErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationBankAccountTypeErrorError$ {
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationBankAccountTypeErrorError$inboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationBankAccountTypeErrorError$outboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorError$Outbound` instead. */
  export type Outbound = InvalidDestinationBankAccountTypeErrorError$Outbound;
}

export function invalidDestinationBankAccountTypeErrorErrorToJSON(
  invalidDestinationBankAccountTypeErrorError:
    InvalidDestinationBankAccountTypeErrorError,
): string {
  return JSON.stringify(
    InvalidDestinationBankAccountTypeErrorError$outboundSchema.parse(
      invalidDestinationBankAccountTypeErrorError,
    ),
  );
}

export function invalidDestinationBankAccountTypeErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationBankAccountTypeErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationBankAccountTypeErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationBankAccountTypeErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidDestinationBankAccountTypeErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidDestinationBankAccountTypeErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type InvalidDestinationBankAccountTypeErrorEmbedded$Outbound = {
  errors?:
    | Array<InvalidDestinationBankAccountTypeErrorError$Outbound>
    | undefined;
};

/** @internal */
export const InvalidDestinationBankAccountTypeErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidDestinationBankAccountTypeErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidDestinationBankAccountTypeErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidDestinationBankAccountTypeErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationBankAccountTypeErrorEmbedded$ {
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationBankAccountTypeErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationBankAccountTypeErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidDestinationBankAccountTypeErrorEmbedded$Outbound` instead. */
  export type Outbound =
    InvalidDestinationBankAccountTypeErrorEmbedded$Outbound;
}

export function invalidDestinationBankAccountTypeErrorEmbeddedToJSON(
  invalidDestinationBankAccountTypeErrorEmbedded:
    InvalidDestinationBankAccountTypeErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidDestinationBankAccountTypeErrorEmbedded$outboundSchema.parse(
      invalidDestinationBankAccountTypeErrorEmbedded,
    ),
  );
}

export function invalidDestinationBankAccountTypeErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationBankAccountTypeErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationBankAccountTypeErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationBankAccountTypeErrorEmbedded' from JSON`,
  );
}
