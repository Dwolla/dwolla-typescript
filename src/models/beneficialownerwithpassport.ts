/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InternationalAddress,
  InternationalAddress$inboundSchema,
  InternationalAddress$Outbound,
  InternationalAddress$outboundSchema,
} from "./internationaladdress.js";
import {
  Passport,
  Passport$inboundSchema,
  Passport$Outbound,
  Passport$outboundSchema,
} from "./passport.js";

/**
 * Request body for creating and updating a Beneficial Owner with a Passport
 */
export type BeneficialOwnerWithPassport = {
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  address: InternationalAddress;
  passport: Passport;
};

/** @internal */
export const BeneficialOwnerWithPassport$inboundSchema: z.ZodType<
  BeneficialOwnerWithPassport,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  dateOfBirth: z.string(),
  address: InternationalAddress$inboundSchema,
  passport: Passport$inboundSchema,
});

/** @internal */
export type BeneficialOwnerWithPassport$Outbound = {
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  address: InternationalAddress$Outbound;
  passport: Passport$Outbound;
};

/** @internal */
export const BeneficialOwnerWithPassport$outboundSchema: z.ZodType<
  BeneficialOwnerWithPassport$Outbound,
  z.ZodTypeDef,
  BeneficialOwnerWithPassport
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  dateOfBirth: z.string(),
  address: InternationalAddress$outboundSchema,
  passport: Passport$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficialOwnerWithPassport$ {
  /** @deprecated use `BeneficialOwnerWithPassport$inboundSchema` instead. */
  export const inboundSchema = BeneficialOwnerWithPassport$inboundSchema;
  /** @deprecated use `BeneficialOwnerWithPassport$outboundSchema` instead. */
  export const outboundSchema = BeneficialOwnerWithPassport$outboundSchema;
  /** @deprecated use `BeneficialOwnerWithPassport$Outbound` instead. */
  export type Outbound = BeneficialOwnerWithPassport$Outbound;
}

export function beneficialOwnerWithPassportToJSON(
  beneficialOwnerWithPassport: BeneficialOwnerWithPassport,
): string {
  return JSON.stringify(
    BeneficialOwnerWithPassport$outboundSchema.parse(
      beneficialOwnerWithPassport,
    ),
  );
}

export function beneficialOwnerWithPassportFromJSON(
  jsonString: string,
): SafeParseResult<BeneficialOwnerWithPassport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BeneficialOwnerWithPassport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BeneficialOwnerWithPassport' from JSON`,
  );
}
