/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidPointOfSaleAddendaSerialNumberErrorLinks = {};

export type InvalidPointOfSaleAddendaSerialNumberErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidPointOfSaleAddendaSerialNumberErrorLinks | undefined;
};

export type InvalidPointOfSaleAddendaSerialNumberErrorEmbedded = {
  errors?: Array<InvalidPointOfSaleAddendaSerialNumberErrorError> | undefined;
};

export type InvalidPointOfSaleAddendaSerialNumberError = {
  code: string;
  message: string;
  embedded?: InvalidPointOfSaleAddendaSerialNumberErrorEmbedded | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorLinks$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type InvalidPointOfSaleAddendaSerialNumberErrorLinks$Outbound = {};

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorLinks$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaSerialNumberErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaSerialNumberErrorLinks$ {
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorLinks$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorLinks$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorLinks$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaSerialNumberErrorLinks$Outbound;
}

export function invalidPointOfSaleAddendaSerialNumberErrorLinksToJSON(
  invalidPointOfSaleAddendaSerialNumberErrorLinks:
    InvalidPointOfSaleAddendaSerialNumberErrorLinks,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaSerialNumberErrorLinks$outboundSchema.parse(
      invalidPointOfSaleAddendaSerialNumberErrorLinks,
    ),
  );
}

export function invalidPointOfSaleAddendaSerialNumberErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaSerialNumberErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaSerialNumberErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaSerialNumberErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorError$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      InvalidPointOfSaleAddendaSerialNumberErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type InvalidPointOfSaleAddendaSerialNumberErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidPointOfSaleAddendaSerialNumberErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorError$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorError$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaSerialNumberErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidPointOfSaleAddendaSerialNumberErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaSerialNumberErrorError$ {
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorError$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorError$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorError$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaSerialNumberErrorError$Outbound;
}

export function invalidPointOfSaleAddendaSerialNumberErrorErrorToJSON(
  invalidPointOfSaleAddendaSerialNumberErrorError:
    InvalidPointOfSaleAddendaSerialNumberErrorError,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaSerialNumberErrorError$outboundSchema.parse(
      invalidPointOfSaleAddendaSerialNumberErrorError,
    ),
  );
}

export function invalidPointOfSaleAddendaSerialNumberErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaSerialNumberErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaSerialNumberErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaSerialNumberErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidPointOfSaleAddendaSerialNumberErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$Outbound = {
  errors?:
    | Array<InvalidPointOfSaleAddendaSerialNumberErrorError$Outbound>
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidPointOfSaleAddendaSerialNumberErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$ {
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$Outbound;
}

export function invalidPointOfSaleAddendaSerialNumberErrorEmbeddedToJSON(
  invalidPointOfSaleAddendaSerialNumberErrorEmbedded:
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$outboundSchema.parse(
      invalidPointOfSaleAddendaSerialNumberErrorEmbedded,
    ),
  );
}

export function invalidPointOfSaleAddendaSerialNumberErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaSerialNumberErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaSerialNumberErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberError$inboundSchema:
  z.ZodType<InvalidPointOfSaleAddendaSerialNumberError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string(),
      message: z.string(),
      _embedded: z.lazy(() =>
        InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "_embedded": "embedded",
      });
    });

/** @internal */
export type InvalidPointOfSaleAddendaSerialNumberError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaSerialNumberError$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaSerialNumberError$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaSerialNumberError
  > = z.object({
    code: z.string(),
    message: z.string(),
    embedded: z.lazy(() =>
      InvalidPointOfSaleAddendaSerialNumberErrorEmbedded$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      embedded: "_embedded",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaSerialNumberError$ {
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaSerialNumberError$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaSerialNumberError$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaSerialNumberError$Outbound` instead. */
  export type Outbound = InvalidPointOfSaleAddendaSerialNumberError$Outbound;
}

export function invalidPointOfSaleAddendaSerialNumberErrorToJSON(
  invalidPointOfSaleAddendaSerialNumberError:
    InvalidPointOfSaleAddendaSerialNumberError,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaSerialNumberError$outboundSchema.parse(
      invalidPointOfSaleAddendaSerialNumberError,
    ),
  );
}

export function invalidPointOfSaleAddendaSerialNumberErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaSerialNumberError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaSerialNumberError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaSerialNumberError' from JSON`,
  );
}
