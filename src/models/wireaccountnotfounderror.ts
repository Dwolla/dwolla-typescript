/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WireAccountNotFoundErrorLinks = {};

export type WireAccountNotFoundErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WireAccountNotFoundErrorLinks | undefined;
};

export type WireAccountNotFoundErrorEmbedded = {
  errors?: Array<WireAccountNotFoundErrorError> | undefined;
};

/** @internal */
export const WireAccountNotFoundErrorLinks$inboundSchema: z.ZodType<
  WireAccountNotFoundErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WireAccountNotFoundErrorLinks$Outbound = {};

/** @internal */
export const WireAccountNotFoundErrorLinks$outboundSchema: z.ZodType<
  WireAccountNotFoundErrorLinks$Outbound,
  z.ZodTypeDef,
  WireAccountNotFoundErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireAccountNotFoundErrorLinks$ {
  /** @deprecated use `WireAccountNotFoundErrorLinks$inboundSchema` instead. */
  export const inboundSchema = WireAccountNotFoundErrorLinks$inboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorLinks$outboundSchema` instead. */
  export const outboundSchema = WireAccountNotFoundErrorLinks$outboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorLinks$Outbound` instead. */
  export type Outbound = WireAccountNotFoundErrorLinks$Outbound;
}

export function wireAccountNotFoundErrorLinksToJSON(
  wireAccountNotFoundErrorLinks: WireAccountNotFoundErrorLinks,
): string {
  return JSON.stringify(
    WireAccountNotFoundErrorLinks$outboundSchema.parse(
      wireAccountNotFoundErrorLinks,
    ),
  );
}

export function wireAccountNotFoundErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<WireAccountNotFoundErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WireAccountNotFoundErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WireAccountNotFoundErrorLinks' from JSON`,
  );
}

/** @internal */
export const WireAccountNotFoundErrorError$inboundSchema: z.ZodType<
  WireAccountNotFoundErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => WireAccountNotFoundErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type WireAccountNotFoundErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WireAccountNotFoundErrorLinks$Outbound | undefined;
};

/** @internal */
export const WireAccountNotFoundErrorError$outboundSchema: z.ZodType<
  WireAccountNotFoundErrorError$Outbound,
  z.ZodTypeDef,
  WireAccountNotFoundErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => WireAccountNotFoundErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireAccountNotFoundErrorError$ {
  /** @deprecated use `WireAccountNotFoundErrorError$inboundSchema` instead. */
  export const inboundSchema = WireAccountNotFoundErrorError$inboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorError$outboundSchema` instead. */
  export const outboundSchema = WireAccountNotFoundErrorError$outboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorError$Outbound` instead. */
  export type Outbound = WireAccountNotFoundErrorError$Outbound;
}

export function wireAccountNotFoundErrorErrorToJSON(
  wireAccountNotFoundErrorError: WireAccountNotFoundErrorError,
): string {
  return JSON.stringify(
    WireAccountNotFoundErrorError$outboundSchema.parse(
      wireAccountNotFoundErrorError,
    ),
  );
}

export function wireAccountNotFoundErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<WireAccountNotFoundErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WireAccountNotFoundErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WireAccountNotFoundErrorError' from JSON`,
  );
}

/** @internal */
export const WireAccountNotFoundErrorEmbedded$inboundSchema: z.ZodType<
  WireAccountNotFoundErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => WireAccountNotFoundErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type WireAccountNotFoundErrorEmbedded$Outbound = {
  errors?: Array<WireAccountNotFoundErrorError$Outbound> | undefined;
};

/** @internal */
export const WireAccountNotFoundErrorEmbedded$outboundSchema: z.ZodType<
  WireAccountNotFoundErrorEmbedded$Outbound,
  z.ZodTypeDef,
  WireAccountNotFoundErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => WireAccountNotFoundErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireAccountNotFoundErrorEmbedded$ {
  /** @deprecated use `WireAccountNotFoundErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = WireAccountNotFoundErrorEmbedded$inboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = WireAccountNotFoundErrorEmbedded$outboundSchema;
  /** @deprecated use `WireAccountNotFoundErrorEmbedded$Outbound` instead. */
  export type Outbound = WireAccountNotFoundErrorEmbedded$Outbound;
}

export function wireAccountNotFoundErrorEmbeddedToJSON(
  wireAccountNotFoundErrorEmbedded: WireAccountNotFoundErrorEmbedded,
): string {
  return JSON.stringify(
    WireAccountNotFoundErrorEmbedded$outboundSchema.parse(
      wireAccountNotFoundErrorEmbedded,
    ),
  );
}

export function wireAccountNotFoundErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<WireAccountNotFoundErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WireAccountNotFoundErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WireAccountNotFoundErrorEmbedded' from JSON`,
  );
}
