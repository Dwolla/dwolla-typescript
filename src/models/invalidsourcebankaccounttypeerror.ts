/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidSourceBankAccountTypeErrorLinks = {};

export type InvalidSourceBankAccountTypeErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidSourceBankAccountTypeErrorLinks | undefined;
};

export type InvalidSourceBankAccountTypeErrorEmbedded = {
  errors?: Array<InvalidSourceBankAccountTypeErrorError> | undefined;
};

/** @internal */
export const InvalidSourceBankAccountTypeErrorLinks$inboundSchema: z.ZodType<
  InvalidSourceBankAccountTypeErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidSourceBankAccountTypeErrorLinks$Outbound = {};

/** @internal */
export const InvalidSourceBankAccountTypeErrorLinks$outboundSchema: z.ZodType<
  InvalidSourceBankAccountTypeErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidSourceBankAccountTypeErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceBankAccountTypeErrorLinks$ {
  /** @deprecated use `InvalidSourceBankAccountTypeErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceBankAccountTypeErrorLinks$inboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceBankAccountTypeErrorLinks$outboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorLinks$Outbound` instead. */
  export type Outbound = InvalidSourceBankAccountTypeErrorLinks$Outbound;
}

export function invalidSourceBankAccountTypeErrorLinksToJSON(
  invalidSourceBankAccountTypeErrorLinks:
    InvalidSourceBankAccountTypeErrorLinks,
): string {
  return JSON.stringify(
    InvalidSourceBankAccountTypeErrorLinks$outboundSchema.parse(
      invalidSourceBankAccountTypeErrorLinks,
    ),
  );
}

export function invalidSourceBankAccountTypeErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidSourceBankAccountTypeErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceBankAccountTypeErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidSourceBankAccountTypeErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidSourceBankAccountTypeErrorError$inboundSchema: z.ZodType<
  InvalidSourceBankAccountTypeErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidSourceBankAccountTypeErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidSourceBankAccountTypeErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidSourceBankAccountTypeErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidSourceBankAccountTypeErrorError$outboundSchema: z.ZodType<
  InvalidSourceBankAccountTypeErrorError$Outbound,
  z.ZodTypeDef,
  InvalidSourceBankAccountTypeErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidSourceBankAccountTypeErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceBankAccountTypeErrorError$ {
  /** @deprecated use `InvalidSourceBankAccountTypeErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceBankAccountTypeErrorError$inboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceBankAccountTypeErrorError$outboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorError$Outbound` instead. */
  export type Outbound = InvalidSourceBankAccountTypeErrorError$Outbound;
}

export function invalidSourceBankAccountTypeErrorErrorToJSON(
  invalidSourceBankAccountTypeErrorError:
    InvalidSourceBankAccountTypeErrorError,
): string {
  return JSON.stringify(
    InvalidSourceBankAccountTypeErrorError$outboundSchema.parse(
      invalidSourceBankAccountTypeErrorError,
    ),
  );
}

export function invalidSourceBankAccountTypeErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidSourceBankAccountTypeErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceBankAccountTypeErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidSourceBankAccountTypeErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidSourceBankAccountTypeErrorEmbedded$inboundSchema: z.ZodType<
  InvalidSourceBankAccountTypeErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => InvalidSourceBankAccountTypeErrorError$inboundSchema),
  ).optional(),
});

/** @internal */
export type InvalidSourceBankAccountTypeErrorEmbedded$Outbound = {
  errors?: Array<InvalidSourceBankAccountTypeErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidSourceBankAccountTypeErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidSourceBankAccountTypeErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidSourceBankAccountTypeErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidSourceBankAccountTypeErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceBankAccountTypeErrorEmbedded$ {
  /** @deprecated use `InvalidSourceBankAccountTypeErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceBankAccountTypeErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceBankAccountTypeErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidSourceBankAccountTypeErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidSourceBankAccountTypeErrorEmbedded$Outbound;
}

export function invalidSourceBankAccountTypeErrorEmbeddedToJSON(
  invalidSourceBankAccountTypeErrorEmbedded:
    InvalidSourceBankAccountTypeErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidSourceBankAccountTypeErrorEmbedded$outboundSchema.parse(
      invalidSourceBankAccountTypeErrorEmbedded,
    ),
  );
}

export function invalidSourceBankAccountTypeErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidSourceBankAccountTypeErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceBankAccountTypeErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidSourceBankAccountTypeErrorEmbedded' from JSON`,
  );
}
