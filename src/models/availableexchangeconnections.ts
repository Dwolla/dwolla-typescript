/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AvailableExchangeConnectionsSelf = {
  href: string;
  type: string;
  resourceType: string;
};

export type AvailableExchangeConnectionsCustomers = {
  href: string;
  type: string;
  resourceType: string;
};

export type AvailableExchangeConnectionsLinks = {
  self: AvailableExchangeConnectionsSelf;
  customers: AvailableExchangeConnectionsCustomers;
};

export type AvailableExchangeConnection = {
  /**
   * Token representing the external bank account that can be used to create a funding source
   */
  availableConnectionToken: string;
  /**
   * Name of the external bank account
   */
  name: string;
};

export type AvailableExchangeConnectionsEmbedded = {
  availableExchangeConnections: Array<AvailableExchangeConnection>;
};

export type AvailableExchangeConnections = {
  links: AvailableExchangeConnectionsLinks;
  embedded: AvailableExchangeConnectionsEmbedded;
};

/** @internal */
export const AvailableExchangeConnectionsSelf$inboundSchema: z.ZodType<
  AvailableExchangeConnectionsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
  "resource-type": z.string(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type AvailableExchangeConnectionsSelf$Outbound = {
  href: string;
  type: string;
  "resource-type": string;
};

/** @internal */
export const AvailableExchangeConnectionsSelf$outboundSchema: z.ZodType<
  AvailableExchangeConnectionsSelf$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnectionsSelf
> = z.object({
  href: z.string(),
  type: z.string(),
  resourceType: z.string(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnectionsSelf$ {
  /** @deprecated use `AvailableExchangeConnectionsSelf$inboundSchema` instead. */
  export const inboundSchema = AvailableExchangeConnectionsSelf$inboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsSelf$outboundSchema` instead. */
  export const outboundSchema = AvailableExchangeConnectionsSelf$outboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsSelf$Outbound` instead. */
  export type Outbound = AvailableExchangeConnectionsSelf$Outbound;
}

export function availableExchangeConnectionsSelfToJSON(
  availableExchangeConnectionsSelf: AvailableExchangeConnectionsSelf,
): string {
  return JSON.stringify(
    AvailableExchangeConnectionsSelf$outboundSchema.parse(
      availableExchangeConnectionsSelf,
    ),
  );
}

export function availableExchangeConnectionsSelfFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnectionsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableExchangeConnectionsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnectionsSelf' from JSON`,
  );
}

/** @internal */
export const AvailableExchangeConnectionsCustomers$inboundSchema: z.ZodType<
  AvailableExchangeConnectionsCustomers,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  type: z.string(),
  "resource-type": z.string(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type AvailableExchangeConnectionsCustomers$Outbound = {
  href: string;
  type: string;
  "resource-type": string;
};

/** @internal */
export const AvailableExchangeConnectionsCustomers$outboundSchema: z.ZodType<
  AvailableExchangeConnectionsCustomers$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnectionsCustomers
> = z.object({
  href: z.string(),
  type: z.string(),
  resourceType: z.string(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnectionsCustomers$ {
  /** @deprecated use `AvailableExchangeConnectionsCustomers$inboundSchema` instead. */
  export const inboundSchema =
    AvailableExchangeConnectionsCustomers$inboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsCustomers$outboundSchema` instead. */
  export const outboundSchema =
    AvailableExchangeConnectionsCustomers$outboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsCustomers$Outbound` instead. */
  export type Outbound = AvailableExchangeConnectionsCustomers$Outbound;
}

export function availableExchangeConnectionsCustomersToJSON(
  availableExchangeConnectionsCustomers: AvailableExchangeConnectionsCustomers,
): string {
  return JSON.stringify(
    AvailableExchangeConnectionsCustomers$outboundSchema.parse(
      availableExchangeConnectionsCustomers,
    ),
  );
}

export function availableExchangeConnectionsCustomersFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnectionsCustomers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableExchangeConnectionsCustomers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnectionsCustomers' from JSON`,
  );
}

/** @internal */
export const AvailableExchangeConnectionsLinks$inboundSchema: z.ZodType<
  AvailableExchangeConnectionsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => AvailableExchangeConnectionsSelf$inboundSchema),
  customers: z.lazy(() => AvailableExchangeConnectionsCustomers$inboundSchema),
});

/** @internal */
export type AvailableExchangeConnectionsLinks$Outbound = {
  self: AvailableExchangeConnectionsSelf$Outbound;
  customers: AvailableExchangeConnectionsCustomers$Outbound;
};

/** @internal */
export const AvailableExchangeConnectionsLinks$outboundSchema: z.ZodType<
  AvailableExchangeConnectionsLinks$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnectionsLinks
> = z.object({
  self: z.lazy(() => AvailableExchangeConnectionsSelf$outboundSchema),
  customers: z.lazy(() => AvailableExchangeConnectionsCustomers$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnectionsLinks$ {
  /** @deprecated use `AvailableExchangeConnectionsLinks$inboundSchema` instead. */
  export const inboundSchema = AvailableExchangeConnectionsLinks$inboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsLinks$outboundSchema` instead. */
  export const outboundSchema =
    AvailableExchangeConnectionsLinks$outboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsLinks$Outbound` instead. */
  export type Outbound = AvailableExchangeConnectionsLinks$Outbound;
}

export function availableExchangeConnectionsLinksToJSON(
  availableExchangeConnectionsLinks: AvailableExchangeConnectionsLinks,
): string {
  return JSON.stringify(
    AvailableExchangeConnectionsLinks$outboundSchema.parse(
      availableExchangeConnectionsLinks,
    ),
  );
}

export function availableExchangeConnectionsLinksFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnectionsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableExchangeConnectionsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnectionsLinks' from JSON`,
  );
}

/** @internal */
export const AvailableExchangeConnection$inboundSchema: z.ZodType<
  AvailableExchangeConnection,
  z.ZodTypeDef,
  unknown
> = z.object({
  availableConnectionToken: z.string(),
  name: z.string(),
});

/** @internal */
export type AvailableExchangeConnection$Outbound = {
  availableConnectionToken: string;
  name: string;
};

/** @internal */
export const AvailableExchangeConnection$outboundSchema: z.ZodType<
  AvailableExchangeConnection$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnection
> = z.object({
  availableConnectionToken: z.string(),
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnection$ {
  /** @deprecated use `AvailableExchangeConnection$inboundSchema` instead. */
  export const inboundSchema = AvailableExchangeConnection$inboundSchema;
  /** @deprecated use `AvailableExchangeConnection$outboundSchema` instead. */
  export const outboundSchema = AvailableExchangeConnection$outboundSchema;
  /** @deprecated use `AvailableExchangeConnection$Outbound` instead. */
  export type Outbound = AvailableExchangeConnection$Outbound;
}

export function availableExchangeConnectionToJSON(
  availableExchangeConnection: AvailableExchangeConnection,
): string {
  return JSON.stringify(
    AvailableExchangeConnection$outboundSchema.parse(
      availableExchangeConnection,
    ),
  );
}

export function availableExchangeConnectionFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnection, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableExchangeConnection$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnection' from JSON`,
  );
}

/** @internal */
export const AvailableExchangeConnectionsEmbedded$inboundSchema: z.ZodType<
  AvailableExchangeConnectionsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  "available-exchange-connections": z.array(
    z.lazy(() => AvailableExchangeConnection$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "available-exchange-connections": "availableExchangeConnections",
  });
});

/** @internal */
export type AvailableExchangeConnectionsEmbedded$Outbound = {
  "available-exchange-connections": Array<AvailableExchangeConnection$Outbound>;
};

/** @internal */
export const AvailableExchangeConnectionsEmbedded$outboundSchema: z.ZodType<
  AvailableExchangeConnectionsEmbedded$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnectionsEmbedded
> = z.object({
  availableExchangeConnections: z.array(
    z.lazy(() => AvailableExchangeConnection$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    availableExchangeConnections: "available-exchange-connections",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnectionsEmbedded$ {
  /** @deprecated use `AvailableExchangeConnectionsEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    AvailableExchangeConnectionsEmbedded$inboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    AvailableExchangeConnectionsEmbedded$outboundSchema;
  /** @deprecated use `AvailableExchangeConnectionsEmbedded$Outbound` instead. */
  export type Outbound = AvailableExchangeConnectionsEmbedded$Outbound;
}

export function availableExchangeConnectionsEmbeddedToJSON(
  availableExchangeConnectionsEmbedded: AvailableExchangeConnectionsEmbedded,
): string {
  return JSON.stringify(
    AvailableExchangeConnectionsEmbedded$outboundSchema.parse(
      availableExchangeConnectionsEmbedded,
    ),
  );
}

export function availableExchangeConnectionsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnectionsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AvailableExchangeConnectionsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnectionsEmbedded' from JSON`,
  );
}

/** @internal */
export const AvailableExchangeConnections$inboundSchema: z.ZodType<
  AvailableExchangeConnections,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => AvailableExchangeConnectionsLinks$inboundSchema),
  _embedded: z.lazy(() => AvailableExchangeConnectionsEmbedded$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type AvailableExchangeConnections$Outbound = {
  _links: AvailableExchangeConnectionsLinks$Outbound;
  _embedded: AvailableExchangeConnectionsEmbedded$Outbound;
};

/** @internal */
export const AvailableExchangeConnections$outboundSchema: z.ZodType<
  AvailableExchangeConnections$Outbound,
  z.ZodTypeDef,
  AvailableExchangeConnections
> = z.object({
  links: z.lazy(() => AvailableExchangeConnectionsLinks$outboundSchema),
  embedded: z.lazy(() => AvailableExchangeConnectionsEmbedded$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AvailableExchangeConnections$ {
  /** @deprecated use `AvailableExchangeConnections$inboundSchema` instead. */
  export const inboundSchema = AvailableExchangeConnections$inboundSchema;
  /** @deprecated use `AvailableExchangeConnections$outboundSchema` instead. */
  export const outboundSchema = AvailableExchangeConnections$outboundSchema;
  /** @deprecated use `AvailableExchangeConnections$Outbound` instead. */
  export type Outbound = AvailableExchangeConnections$Outbound;
}

export function availableExchangeConnectionsToJSON(
  availableExchangeConnections: AvailableExchangeConnections,
): string {
  return JSON.stringify(
    AvailableExchangeConnections$outboundSchema.parse(
      availableExchangeConnections,
    ),
  );
}

export function availableExchangeConnectionsFromJSON(
  jsonString: string,
): SafeParseResult<AvailableExchangeConnections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AvailableExchangeConnections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AvailableExchangeConnections' from JSON`,
  );
}
