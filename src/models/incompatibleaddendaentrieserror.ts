/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IncompatibleAddendaEntriesErrorLinks = {};

export type IncompatibleAddendaEntriesErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: IncompatibleAddendaEntriesErrorLinks | undefined;
};

export type IncompatibleAddendaEntriesErrorEmbedded = {
  errors?: Array<IncompatibleAddendaEntriesErrorError> | undefined;
};

/** @internal */
export const IncompatibleAddendaEntriesErrorLinks$inboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type IncompatibleAddendaEntriesErrorLinks$Outbound = {};

/** @internal */
export const IncompatibleAddendaEntriesErrorLinks$outboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorLinks$Outbound,
  z.ZodTypeDef,
  IncompatibleAddendaEntriesErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleAddendaEntriesErrorLinks$ {
  /** @deprecated use `IncompatibleAddendaEntriesErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleAddendaEntriesErrorLinks$inboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleAddendaEntriesErrorLinks$outboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorLinks$Outbound` instead. */
  export type Outbound = IncompatibleAddendaEntriesErrorLinks$Outbound;
}

export function incompatibleAddendaEntriesErrorLinksToJSON(
  incompatibleAddendaEntriesErrorLinks: IncompatibleAddendaEntriesErrorLinks,
): string {
  return JSON.stringify(
    IncompatibleAddendaEntriesErrorLinks$outboundSchema.parse(
      incompatibleAddendaEntriesErrorLinks,
    ),
  );
}

export function incompatibleAddendaEntriesErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<IncompatibleAddendaEntriesErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleAddendaEntriesErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompatibleAddendaEntriesErrorLinks' from JSON`,
  );
}

/** @internal */
export const IncompatibleAddendaEntriesErrorError$inboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => IncompatibleAddendaEntriesErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type IncompatibleAddendaEntriesErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: IncompatibleAddendaEntriesErrorLinks$Outbound | undefined;
};

/** @internal */
export const IncompatibleAddendaEntriesErrorError$outboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorError$Outbound,
  z.ZodTypeDef,
  IncompatibleAddendaEntriesErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => IncompatibleAddendaEntriesErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleAddendaEntriesErrorError$ {
  /** @deprecated use `IncompatibleAddendaEntriesErrorError$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleAddendaEntriesErrorError$inboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorError$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleAddendaEntriesErrorError$outboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorError$Outbound` instead. */
  export type Outbound = IncompatibleAddendaEntriesErrorError$Outbound;
}

export function incompatibleAddendaEntriesErrorErrorToJSON(
  incompatibleAddendaEntriesErrorError: IncompatibleAddendaEntriesErrorError,
): string {
  return JSON.stringify(
    IncompatibleAddendaEntriesErrorError$outboundSchema.parse(
      incompatibleAddendaEntriesErrorError,
    ),
  );
}

export function incompatibleAddendaEntriesErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<IncompatibleAddendaEntriesErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleAddendaEntriesErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IncompatibleAddendaEntriesErrorError' from JSON`,
  );
}

/** @internal */
export const IncompatibleAddendaEntriesErrorEmbedded$inboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => IncompatibleAddendaEntriesErrorError$inboundSchema),
  ).optional(),
});

/** @internal */
export type IncompatibleAddendaEntriesErrorEmbedded$Outbound = {
  errors?: Array<IncompatibleAddendaEntriesErrorError$Outbound> | undefined;
};

/** @internal */
export const IncompatibleAddendaEntriesErrorEmbedded$outboundSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorEmbedded$Outbound,
  z.ZodTypeDef,
  IncompatibleAddendaEntriesErrorEmbedded
> = z.object({
  errors: z.array(
    z.lazy(() => IncompatibleAddendaEntriesErrorError$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleAddendaEntriesErrorEmbedded$ {
  /** @deprecated use `IncompatibleAddendaEntriesErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleAddendaEntriesErrorEmbedded$inboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleAddendaEntriesErrorEmbedded$outboundSchema;
  /** @deprecated use `IncompatibleAddendaEntriesErrorEmbedded$Outbound` instead. */
  export type Outbound = IncompatibleAddendaEntriesErrorEmbedded$Outbound;
}

export function incompatibleAddendaEntriesErrorEmbeddedToJSON(
  incompatibleAddendaEntriesErrorEmbedded:
    IncompatibleAddendaEntriesErrorEmbedded,
): string {
  return JSON.stringify(
    IncompatibleAddendaEntriesErrorEmbedded$outboundSchema.parse(
      incompatibleAddendaEntriesErrorEmbedded,
    ),
  );
}

export function incompatibleAddendaEntriesErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  IncompatibleAddendaEntriesErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleAddendaEntriesErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncompatibleAddendaEntriesErrorEmbedded' from JSON`,
  );
}
