/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawInvalidAmountErrorLinks = {};

export type WithdrawInvalidAmountErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawInvalidAmountErrorLinks | undefined;
};

export type WithdrawInvalidAmountErrorEmbedded = {
  errors?: Array<WithdrawInvalidAmountErrorError> | undefined;
};

/** @internal */
export const WithdrawInvalidAmountErrorLinks$inboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WithdrawInvalidAmountErrorLinks$Outbound = {};

/** @internal */
export const WithdrawInvalidAmountErrorLinks$outboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorLinks$Outbound,
  z.ZodTypeDef,
  WithdrawInvalidAmountErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidAmountErrorLinks$ {
  /** @deprecated use `WithdrawInvalidAmountErrorLinks$inboundSchema` instead. */
  export const inboundSchema = WithdrawInvalidAmountErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorLinks$outboundSchema` instead. */
  export const outboundSchema = WithdrawInvalidAmountErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorLinks$Outbound` instead. */
  export type Outbound = WithdrawInvalidAmountErrorLinks$Outbound;
}

export function withdrawInvalidAmountErrorLinksToJSON(
  withdrawInvalidAmountErrorLinks: WithdrawInvalidAmountErrorLinks,
): string {
  return JSON.stringify(
    WithdrawInvalidAmountErrorLinks$outboundSchema.parse(
      withdrawInvalidAmountErrorLinks,
    ),
  );
}

export function withdrawInvalidAmountErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<WithdrawInvalidAmountErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WithdrawInvalidAmountErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WithdrawInvalidAmountErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidAmountErrorError$inboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => WithdrawInvalidAmountErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type WithdrawInvalidAmountErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WithdrawInvalidAmountErrorLinks$Outbound | undefined;
};

/** @internal */
export const WithdrawInvalidAmountErrorError$outboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorError$Outbound,
  z.ZodTypeDef,
  WithdrawInvalidAmountErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => WithdrawInvalidAmountErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidAmountErrorError$ {
  /** @deprecated use `WithdrawInvalidAmountErrorError$inboundSchema` instead. */
  export const inboundSchema = WithdrawInvalidAmountErrorError$inboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorError$outboundSchema` instead. */
  export const outboundSchema = WithdrawInvalidAmountErrorError$outboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorError$Outbound` instead. */
  export type Outbound = WithdrawInvalidAmountErrorError$Outbound;
}

export function withdrawInvalidAmountErrorErrorToJSON(
  withdrawInvalidAmountErrorError: WithdrawInvalidAmountErrorError,
): string {
  return JSON.stringify(
    WithdrawInvalidAmountErrorError$outboundSchema.parse(
      withdrawInvalidAmountErrorError,
    ),
  );
}

export function withdrawInvalidAmountErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<WithdrawInvalidAmountErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WithdrawInvalidAmountErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WithdrawInvalidAmountErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidAmountErrorEmbedded$inboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => WithdrawInvalidAmountErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type WithdrawInvalidAmountErrorEmbedded$Outbound = {
  errors?: Array<WithdrawInvalidAmountErrorError$Outbound> | undefined;
};

/** @internal */
export const WithdrawInvalidAmountErrorEmbedded$outboundSchema: z.ZodType<
  WithdrawInvalidAmountErrorEmbedded$Outbound,
  z.ZodTypeDef,
  WithdrawInvalidAmountErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => WithdrawInvalidAmountErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidAmountErrorEmbedded$ {
  /** @deprecated use `WithdrawInvalidAmountErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = WithdrawInvalidAmountErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidAmountErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawInvalidAmountErrorEmbedded$Outbound` instead. */
  export type Outbound = WithdrawInvalidAmountErrorEmbedded$Outbound;
}

export function withdrawInvalidAmountErrorEmbeddedToJSON(
  withdrawInvalidAmountErrorEmbedded: WithdrawInvalidAmountErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawInvalidAmountErrorEmbedded$outboundSchema.parse(
      withdrawInvalidAmountErrorEmbedded,
    ),
  );
}

export function withdrawInvalidAmountErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<WithdrawInvalidAmountErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidAmountErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WithdrawInvalidAmountErrorEmbedded' from JSON`,
  );
}
