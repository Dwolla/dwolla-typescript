/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export const FundingSourceChannel = {
  Ach: "ach",
  RealTimePayments: "real-time-payments",
  Wire: "wire",
} as const;
export type FundingSourceChannel = ClosedEnum<typeof FundingSourceChannel>;

export type FundingSource = {
  links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
  bankAccountType?: string | undefined;
  name?: string | undefined;
  created?: Date | undefined;
  removed?: boolean | undefined;
  /**
   * Payment processing channels supported by this funding source
   */
  channels?: Array<FundingSourceChannel> | undefined;
  bankName?: string | undefined;
  fingerprint?: string | undefined;
};

/** @internal */
export const FundingSourceChannel$inboundSchema: z.ZodNativeEnum<
  typeof FundingSourceChannel
> = z.nativeEnum(FundingSourceChannel);

/** @internal */
export const FundingSourceChannel$outboundSchema: z.ZodNativeEnum<
  typeof FundingSourceChannel
> = FundingSourceChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FundingSourceChannel$ {
  /** @deprecated use `FundingSourceChannel$inboundSchema` instead. */
  export const inboundSchema = FundingSourceChannel$inboundSchema;
  /** @deprecated use `FundingSourceChannel$outboundSchema` instead. */
  export const outboundSchema = FundingSourceChannel$outboundSchema;
}

/** @internal */
export const FundingSource$inboundSchema: z.ZodType<
  FundingSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  type: z.string().optional(),
  bankAccountType: z.string().optional(),
  name: z.string().optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  removed: z.boolean().optional(),
  channels: z.array(FundingSourceChannel$inboundSchema).optional(),
  bankName: z.string().optional(),
  fingerprint: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type FundingSource$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  type?: string | undefined;
  bankAccountType?: string | undefined;
  name?: string | undefined;
  created?: string | undefined;
  removed?: boolean | undefined;
  channels?: Array<string> | undefined;
  bankName?: string | undefined;
  fingerprint?: string | undefined;
};

/** @internal */
export const FundingSource$outboundSchema: z.ZodType<
  FundingSource$Outbound,
  z.ZodTypeDef,
  FundingSource
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  type: z.string().optional(),
  bankAccountType: z.string().optional(),
  name: z.string().optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  removed: z.boolean().optional(),
  channels: z.array(FundingSourceChannel$outboundSchema).optional(),
  bankName: z.string().optional(),
  fingerprint: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FundingSource$ {
  /** @deprecated use `FundingSource$inboundSchema` instead. */
  export const inboundSchema = FundingSource$inboundSchema;
  /** @deprecated use `FundingSource$outboundSchema` instead. */
  export const outboundSchema = FundingSource$outboundSchema;
  /** @deprecated use `FundingSource$Outbound` instead. */
  export type Outbound = FundingSource$Outbound;
}

export function fundingSourceToJSON(fundingSource: FundingSource): string {
  return JSON.stringify(FundingSource$outboundSchema.parse(fundingSource));
}

export function fundingSourceFromJSON(
  jsonString: string,
): SafeParseResult<FundingSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FundingSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FundingSource' from JSON`,
  );
}
