/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidExchange = {
  code: string;
  message: string;
};

/** @internal */
export const InvalidExchange$inboundSchema: z.ZodType<
  InvalidExchange,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type InvalidExchange$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const InvalidExchange$outboundSchema: z.ZodType<
  InvalidExchange$Outbound,
  z.ZodTypeDef,
  InvalidExchange
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidExchange$ {
  /** @deprecated use `InvalidExchange$inboundSchema` instead. */
  export const inboundSchema = InvalidExchange$inboundSchema;
  /** @deprecated use `InvalidExchange$outboundSchema` instead. */
  export const outboundSchema = InvalidExchange$outboundSchema;
  /** @deprecated use `InvalidExchange$Outbound` instead. */
  export type Outbound = InvalidExchange$Outbound;
}

export function invalidExchangeToJSON(
  invalidExchange: InvalidExchange,
): string {
  return JSON.stringify(InvalidExchange$outboundSchema.parse(invalidExchange));
}

export function invalidExchangeFromJSON(
  jsonString: string,
): SafeParseResult<InvalidExchange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidExchange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidExchange' from JSON`,
  );
}
