/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidFacilitatorErrorLinks = {};

export type InvalidFacilitatorErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidFacilitatorErrorLinks | undefined;
};

export type InvalidFacilitatorErrorEmbedded = {
  errors?: Array<InvalidFacilitatorErrorError> | undefined;
};

/** @internal */
export const InvalidFacilitatorErrorLinks$inboundSchema: z.ZodType<
  InvalidFacilitatorErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidFacilitatorErrorLinks$Outbound = {};

/** @internal */
export const InvalidFacilitatorErrorLinks$outboundSchema: z.ZodType<
  InvalidFacilitatorErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidFacilitatorErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorErrorLinks$ {
  /** @deprecated use `InvalidFacilitatorErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InvalidFacilitatorErrorLinks$inboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InvalidFacilitatorErrorLinks$outboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorLinks$Outbound` instead. */
  export type Outbound = InvalidFacilitatorErrorLinks$Outbound;
}

export function invalidFacilitatorErrorLinksToJSON(
  invalidFacilitatorErrorLinks: InvalidFacilitatorErrorLinks,
): string {
  return JSON.stringify(
    InvalidFacilitatorErrorLinks$outboundSchema.parse(
      invalidFacilitatorErrorLinks,
    ),
  );
}

export function invalidFacilitatorErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFacilitatorErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFacilitatorErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFacilitatorErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorErrorError$inboundSchema: z.ZodType<
  InvalidFacilitatorErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidFacilitatorErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidFacilitatorErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidFacilitatorErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidFacilitatorErrorError$outboundSchema: z.ZodType<
  InvalidFacilitatorErrorError$Outbound,
  z.ZodTypeDef,
  InvalidFacilitatorErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidFacilitatorErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorErrorError$ {
  /** @deprecated use `InvalidFacilitatorErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidFacilitatorErrorError$inboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidFacilitatorErrorError$outboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorError$Outbound` instead. */
  export type Outbound = InvalidFacilitatorErrorError$Outbound;
}

export function invalidFacilitatorErrorErrorToJSON(
  invalidFacilitatorErrorError: InvalidFacilitatorErrorError,
): string {
  return JSON.stringify(
    InvalidFacilitatorErrorError$outboundSchema.parse(
      invalidFacilitatorErrorError,
    ),
  );
}

export function invalidFacilitatorErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFacilitatorErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFacilitatorErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFacilitatorErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorErrorEmbedded$inboundSchema: z.ZodType<
  InvalidFacilitatorErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidFacilitatorErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InvalidFacilitatorErrorEmbedded$Outbound = {
  errors?: Array<InvalidFacilitatorErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidFacilitatorErrorEmbedded$outboundSchema: z.ZodType<
  InvalidFacilitatorErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidFacilitatorErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InvalidFacilitatorErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorErrorEmbedded$ {
  /** @deprecated use `InvalidFacilitatorErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InvalidFacilitatorErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InvalidFacilitatorErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidFacilitatorErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidFacilitatorErrorEmbedded$Outbound;
}

export function invalidFacilitatorErrorEmbeddedToJSON(
  invalidFacilitatorErrorEmbedded: InvalidFacilitatorErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidFacilitatorErrorEmbedded$outboundSchema.parse(
      invalidFacilitatorErrorEmbedded,
    ),
  );
}

export function invalidFacilitatorErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFacilitatorErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFacilitatorErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFacilitatorErrorEmbedded' from JSON`,
  );
}
