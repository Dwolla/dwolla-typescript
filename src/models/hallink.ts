/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type HalLink = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

/** @internal */
export const HalLink$inboundSchema: z.ZodType<HalLink, z.ZodTypeDef, unknown> =
  z.object({
    href: z.string().optional(),
    type: z.string().optional(),
    "resource-type": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "resource-type": "resourceType",
    });
  });

/** @internal */
export type HalLink$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const HalLink$outboundSchema: z.ZodType<
  HalLink$Outbound,
  z.ZodTypeDef,
  HalLink
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HalLink$ {
  /** @deprecated use `HalLink$inboundSchema` instead. */
  export const inboundSchema = HalLink$inboundSchema;
  /** @deprecated use `HalLink$outboundSchema` instead. */
  export const outboundSchema = HalLink$outboundSchema;
  /** @deprecated use `HalLink$Outbound` instead. */
  export type Outbound = HalLink$Outbound;
}

export function halLinkToJSON(halLink: HalLink): string {
  return JSON.stringify(HalLink$outboundSchema.parse(halLink));
}

export function halLinkFromJSON(
  jsonString: string,
): SafeParseResult<HalLink, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HalLink$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HalLink' from JSON`,
  );
}
