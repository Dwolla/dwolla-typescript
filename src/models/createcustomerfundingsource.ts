/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  CreateCustomerBankFundingSourceWithAccountNumbers,
  CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema,
  CreateCustomerBankFundingSourceWithAccountNumbers$Outbound,
  CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema,
} from "./createcustomerbankfundingsourcewithaccountnumbers.js";
import {
  CreateCustomerBankFundingSourceWithPlaid,
  CreateCustomerBankFundingSourceWithPlaid$inboundSchema,
  CreateCustomerBankFundingSourceWithPlaid$Outbound,
  CreateCustomerBankFundingSourceWithPlaid$outboundSchema,
} from "./createcustomerbankfundingsourcewithplaid.js";
import {
  CreateCustomerExchangeFundingSource,
  CreateCustomerExchangeFundingSource$inboundSchema,
  CreateCustomerExchangeFundingSource$Outbound,
  CreateCustomerExchangeFundingSource$outboundSchema,
} from "./createcustomerexchangefundingsource.js";
import {
  CreateCustomerVirtualAccountFundingSource,
  CreateCustomerVirtualAccountFundingSource$inboundSchema,
  CreateCustomerVirtualAccountFundingSource$Outbound,
  CreateCustomerVirtualAccountFundingSource$outboundSchema,
} from "./createcustomervirtualaccountfundingsource.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Parameters for creating customer funding sources using different methods:
 *
 * @remarks
 * - Bank Account: Traditional method using routing/account numbers
 * - Exchange: Using IAV through exchange partners (Plaid, MX, etc.)
 * - Virtual Account: Creating Virtual Account Numbers (VANs)
 */
export type CreateCustomerFundingSource =
  | CreateCustomerBankFundingSourceWithAccountNumbers
  | CreateCustomerBankFundingSourceWithPlaid
  | CreateCustomerExchangeFundingSource
  | CreateCustomerVirtualAccountFundingSource;

/** @internal */
export const CreateCustomerFundingSource$inboundSchema: z.ZodType<
  CreateCustomerFundingSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema,
  CreateCustomerBankFundingSourceWithPlaid$inboundSchema,
  CreateCustomerExchangeFundingSource$inboundSchema,
  CreateCustomerVirtualAccountFundingSource$inboundSchema,
]);

/** @internal */
export type CreateCustomerFundingSource$Outbound =
  | CreateCustomerBankFundingSourceWithAccountNumbers$Outbound
  | CreateCustomerBankFundingSourceWithPlaid$Outbound
  | CreateCustomerExchangeFundingSource$Outbound
  | CreateCustomerVirtualAccountFundingSource$Outbound;

/** @internal */
export const CreateCustomerFundingSource$outboundSchema: z.ZodType<
  CreateCustomerFundingSource$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSource
> = z.union([
  CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema,
  CreateCustomerBankFundingSourceWithPlaid$outboundSchema,
  CreateCustomerExchangeFundingSource$outboundSchema,
  CreateCustomerVirtualAccountFundingSource$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSource$ {
  /** @deprecated use `CreateCustomerFundingSource$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSource$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSource$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerFundingSource$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSource$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSource$Outbound;
}

export function createCustomerFundingSourceToJSON(
  createCustomerFundingSource: CreateCustomerFundingSource,
): string {
  return JSON.stringify(
    CreateCustomerFundingSource$outboundSchema.parse(
      createCustomerFundingSource,
    ),
  );
}

export function createCustomerFundingSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSource' from JSON`,
  );
}
