/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Update Unverified Customer or Receive Only User Information
 */
export type UpdateUnverifiedAndReceiveOnly = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const UpdateUnverifiedAndReceiveOnly$inboundSchema: z.ZodType<
  UpdateUnverifiedAndReceiveOnly,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  businessName: z.string().optional(),
});

/** @internal */
export type UpdateUnverifiedAndReceiveOnly$Outbound = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  email?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const UpdateUnverifiedAndReceiveOnly$outboundSchema: z.ZodType<
  UpdateUnverifiedAndReceiveOnly$Outbound,
  z.ZodTypeDef,
  UpdateUnverifiedAndReceiveOnly
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  email: z.string().optional(),
  businessName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUnverifiedAndReceiveOnly$ {
  /** @deprecated use `UpdateUnverifiedAndReceiveOnly$inboundSchema` instead. */
  export const inboundSchema = UpdateUnverifiedAndReceiveOnly$inboundSchema;
  /** @deprecated use `UpdateUnverifiedAndReceiveOnly$outboundSchema` instead. */
  export const outboundSchema = UpdateUnverifiedAndReceiveOnly$outboundSchema;
  /** @deprecated use `UpdateUnverifiedAndReceiveOnly$Outbound` instead. */
  export type Outbound = UpdateUnverifiedAndReceiveOnly$Outbound;
}

export function updateUnverifiedAndReceiveOnlyToJSON(
  updateUnverifiedAndReceiveOnly: UpdateUnverifiedAndReceiveOnly,
): string {
  return JSON.stringify(
    UpdateUnverifiedAndReceiveOnly$outboundSchema.parse(
      updateUnverifiedAndReceiveOnly,
    ),
  );
}

export function updateUnverifiedAndReceiveOnlyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUnverifiedAndReceiveOnly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUnverifiedAndReceiveOnly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUnverifiedAndReceiveOnly' from JSON`,
  );
}
