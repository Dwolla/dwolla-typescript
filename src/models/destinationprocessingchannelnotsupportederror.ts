/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DestinationProcessingChannelNotSupportedErrorLinks = {};

export type DestinationProcessingChannelNotSupportedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: DestinationProcessingChannelNotSupportedErrorLinks | undefined;
};

export type DestinationProcessingChannelNotSupportedErrorEmbedded = {
  errors?:
    | Array<DestinationProcessingChannelNotSupportedErrorError>
    | undefined;
};

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorLinks$inboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type DestinationProcessingChannelNotSupportedErrorLinks$Outbound = {};

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorLinks$outboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorLinks$Outbound,
    z.ZodTypeDef,
    DestinationProcessingChannelNotSupportedErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationProcessingChannelNotSupportedErrorLinks$ {
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    DestinationProcessingChannelNotSupportedErrorLinks$inboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    DestinationProcessingChannelNotSupportedErrorLinks$outboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorLinks$Outbound` instead. */
  export type Outbound =
    DestinationProcessingChannelNotSupportedErrorLinks$Outbound;
}

export function destinationProcessingChannelNotSupportedErrorLinksToJSON(
  destinationProcessingChannelNotSupportedErrorLinks:
    DestinationProcessingChannelNotSupportedErrorLinks,
): string {
  return JSON.stringify(
    DestinationProcessingChannelNotSupportedErrorLinks$outboundSchema.parse(
      destinationProcessingChannelNotSupportedErrorLinks,
    ),
  );
}

export function destinationProcessingChannelNotSupportedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  DestinationProcessingChannelNotSupportedErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DestinationProcessingChannelNotSupportedErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DestinationProcessingChannelNotSupportedErrorLinks' from JSON`,
  );
}

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorError$inboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      DestinationProcessingChannelNotSupportedErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type DestinationProcessingChannelNotSupportedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | DestinationProcessingChannelNotSupportedErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorError$outboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorError$Outbound,
    z.ZodTypeDef,
    DestinationProcessingChannelNotSupportedErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      DestinationProcessingChannelNotSupportedErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationProcessingChannelNotSupportedErrorError$ {
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorError$inboundSchema` instead. */
  export const inboundSchema =
    DestinationProcessingChannelNotSupportedErrorError$inboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    DestinationProcessingChannelNotSupportedErrorError$outboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorError$Outbound` instead. */
  export type Outbound =
    DestinationProcessingChannelNotSupportedErrorError$Outbound;
}

export function destinationProcessingChannelNotSupportedErrorErrorToJSON(
  destinationProcessingChannelNotSupportedErrorError:
    DestinationProcessingChannelNotSupportedErrorError,
): string {
  return JSON.stringify(
    DestinationProcessingChannelNotSupportedErrorError$outboundSchema.parse(
      destinationProcessingChannelNotSupportedErrorError,
    ),
  );
}

export function destinationProcessingChannelNotSupportedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  DestinationProcessingChannelNotSupportedErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DestinationProcessingChannelNotSupportedErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DestinationProcessingChannelNotSupportedErrorError' from JSON`,
  );
}

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorEmbedded$inboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        DestinationProcessingChannelNotSupportedErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type DestinationProcessingChannelNotSupportedErrorEmbedded$Outbound = {
  errors?:
    | Array<DestinationProcessingChannelNotSupportedErrorError$Outbound>
    | undefined;
};

/** @internal */
export const DestinationProcessingChannelNotSupportedErrorEmbedded$outboundSchema:
  z.ZodType<
    DestinationProcessingChannelNotSupportedErrorEmbedded$Outbound,
    z.ZodTypeDef,
    DestinationProcessingChannelNotSupportedErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        DestinationProcessingChannelNotSupportedErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationProcessingChannelNotSupportedErrorEmbedded$ {
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    DestinationProcessingChannelNotSupportedErrorEmbedded$inboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    DestinationProcessingChannelNotSupportedErrorEmbedded$outboundSchema;
  /** @deprecated use `DestinationProcessingChannelNotSupportedErrorEmbedded$Outbound` instead. */
  export type Outbound =
    DestinationProcessingChannelNotSupportedErrorEmbedded$Outbound;
}

export function destinationProcessingChannelNotSupportedErrorEmbeddedToJSON(
  destinationProcessingChannelNotSupportedErrorEmbedded:
    DestinationProcessingChannelNotSupportedErrorEmbedded,
): string {
  return JSON.stringify(
    DestinationProcessingChannelNotSupportedErrorEmbedded$outboundSchema.parse(
      destinationProcessingChannelNotSupportedErrorEmbedded,
    ),
  );
}

export function destinationProcessingChannelNotSupportedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  DestinationProcessingChannelNotSupportedErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DestinationProcessingChannelNotSupportedErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DestinationProcessingChannelNotSupportedErrorEmbedded' from JSON`,
  );
}
