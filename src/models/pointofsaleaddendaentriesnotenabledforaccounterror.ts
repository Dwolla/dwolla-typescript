/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks = {};

export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks | undefined;
};

export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded = {
  errors?:
    | Array<PointOfSaleAddendaEntriesNotEnabledForAccountErrorError>
    | undefined;
};

export type PointOfSaleAddendaEntriesNotEnabledForAccountError = {
  code: string;
  message: string;
  embedded?:
    | PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded
    | undefined;
};

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$inboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$Outbound =
  {};

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$outboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$Outbound,
    z.ZodTypeDef,
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$ {
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$inboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$outboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$Outbound` instead. */
  export type Outbound =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$Outbound;
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorLinksToJSON(
  pointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks:
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks,
): string {
  return JSON.stringify(
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$outboundSchema
      .parse(pointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks),
  );
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks' from JSON`,
  );
}

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$inboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$outboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$Outbound,
    z.ZodTypeDef,
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$ {
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$inboundSchema` instead. */
  export const inboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$inboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$outboundSchema` instead. */
  export const outboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$outboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$Outbound` instead. */
  export type Outbound =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$Outbound;
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorErrorToJSON(
  pointOfSaleAddendaEntriesNotEnabledForAccountErrorError:
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError,
): string {
  return JSON.stringify(
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$outboundSchema
      .parse(pointOfSaleAddendaEntriesNotEnabledForAccountErrorError),
  );
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  PointOfSaleAddendaEntriesNotEnabledForAccountErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PointOfSaleAddendaEntriesNotEnabledForAccountErrorError' from JSON`,
  );
}

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$inboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$Outbound =
  {
    errors?:
      | Array<PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$Outbound>
      | undefined;
  };

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$outboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$Outbound,
    z.ZodTypeDef,
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        PointOfSaleAddendaEntriesNotEnabledForAccountErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$ {
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$inboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$outboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$Outbound` instead. */
  export type Outbound =
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$Outbound;
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbeddedToJSON(
  pointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded:
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded,
): string {
  return JSON.stringify(
    PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$outboundSchema
      .parse(pointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded),
  );
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountError$inboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
    _embedded: z.lazy(() =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_embedded": "embedded",
    });
  });

/** @internal */
export type PointOfSaleAddendaEntriesNotEnabledForAccountError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const PointOfSaleAddendaEntriesNotEnabledForAccountError$outboundSchema:
  z.ZodType<
    PointOfSaleAddendaEntriesNotEnabledForAccountError$Outbound,
    z.ZodTypeDef,
    PointOfSaleAddendaEntriesNotEnabledForAccountError
  > = z.object({
    code: z.string(),
    message: z.string(),
    embedded: z.lazy(() =>
      PointOfSaleAddendaEntriesNotEnabledForAccountErrorEmbedded$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      embedded: "_embedded",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PointOfSaleAddendaEntriesNotEnabledForAccountError$ {
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountError$inboundSchema` instead. */
  export const inboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountError$inboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountError$outboundSchema` instead. */
  export const outboundSchema =
    PointOfSaleAddendaEntriesNotEnabledForAccountError$outboundSchema;
  /** @deprecated use `PointOfSaleAddendaEntriesNotEnabledForAccountError$Outbound` instead. */
  export type Outbound =
    PointOfSaleAddendaEntriesNotEnabledForAccountError$Outbound;
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorToJSON(
  pointOfSaleAddendaEntriesNotEnabledForAccountError:
    PointOfSaleAddendaEntriesNotEnabledForAccountError,
): string {
  return JSON.stringify(
    PointOfSaleAddendaEntriesNotEnabledForAccountError$outboundSchema.parse(
      pointOfSaleAddendaEntriesNotEnabledForAccountError,
    ),
  );
}

export function pointOfSaleAddendaEntriesNotEnabledForAccountErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  PointOfSaleAddendaEntriesNotEnabledForAccountError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PointOfSaleAddendaEntriesNotEnabledForAccountError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PointOfSaleAddendaEntriesNotEnabledForAccountError' from JSON`,
  );
}
