/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RetryVerifiedBusinessAddress = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

export type RetryVerifiedBusinessController = {
  firstName: string;
  lastName: string;
  title: string;
  ssn?: string | undefined;
  dateOfBirth: RFCDate;
  address: RetryVerifiedBusinessAddress;
};

/**
 * Retry Verification for Verified Business Customer
 */
export type RetryVerifiedBusiness = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: RetryVerifiedBusinessController;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusinessAddress$inboundSchema: z.ZodType<
  RetryVerifiedBusinessAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  stateProvinceRegion: z.string(),
  postalCode: z.string(),
  country: z.string(),
});

/** @internal */
export type RetryVerifiedBusinessAddress$Outbound = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

/** @internal */
export const RetryVerifiedBusinessAddress$outboundSchema: z.ZodType<
  RetryVerifiedBusinessAddress$Outbound,
  z.ZodTypeDef,
  RetryVerifiedBusinessAddress
> = z.object({
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  stateProvinceRegion: z.string(),
  postalCode: z.string(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessAddress$ {
  /** @deprecated use `RetryVerifiedBusinessAddress$inboundSchema` instead. */
  export const inboundSchema = RetryVerifiedBusinessAddress$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessAddress$outboundSchema` instead. */
  export const outboundSchema = RetryVerifiedBusinessAddress$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessAddress$Outbound` instead. */
  export type Outbound = RetryVerifiedBusinessAddress$Outbound;
}

export function retryVerifiedBusinessAddressToJSON(
  retryVerifiedBusinessAddress: RetryVerifiedBusinessAddress,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessAddress$outboundSchema.parse(
      retryVerifiedBusinessAddress,
    ),
  );
}

export function retryVerifiedBusinessAddressFromJSON(
  jsonString: string,
): SafeParseResult<RetryVerifiedBusinessAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryVerifiedBusinessAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessAddress' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessController$inboundSchema: z.ZodType<
  RetryVerifiedBusinessController,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  ssn: z.string().optional(),
  dateOfBirth: z.string().transform(v => new RFCDate(v)),
  address: z.lazy(() => RetryVerifiedBusinessAddress$inboundSchema),
});

/** @internal */
export type RetryVerifiedBusinessController$Outbound = {
  firstName: string;
  lastName: string;
  title: string;
  ssn?: string | undefined;
  dateOfBirth: string;
  address: RetryVerifiedBusinessAddress$Outbound;
};

/** @internal */
export const RetryVerifiedBusinessController$outboundSchema: z.ZodType<
  RetryVerifiedBusinessController$Outbound,
  z.ZodTypeDef,
  RetryVerifiedBusinessController
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  ssn: z.string().optional(),
  dateOfBirth: z.instanceof(RFCDate).transform(v => v.toString()),
  address: z.lazy(() => RetryVerifiedBusinessAddress$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessController$ {
  /** @deprecated use `RetryVerifiedBusinessController$inboundSchema` instead. */
  export const inboundSchema = RetryVerifiedBusinessController$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessController$outboundSchema` instead. */
  export const outboundSchema = RetryVerifiedBusinessController$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessController$Outbound` instead. */
  export type Outbound = RetryVerifiedBusinessController$Outbound;
}

export function retryVerifiedBusinessControllerToJSON(
  retryVerifiedBusinessController: RetryVerifiedBusinessController,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessController$outboundSchema.parse(
      retryVerifiedBusinessController,
    ),
  );
}

export function retryVerifiedBusinessControllerFromJSON(
  jsonString: string,
): SafeParseResult<RetryVerifiedBusinessController, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryVerifiedBusinessController$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessController' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusiness$inboundSchema: z.ZodType<
  RetryVerifiedBusiness,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() => RetryVerifiedBusinessController$inboundSchema),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/** @internal */
export type RetryVerifiedBusiness$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: RetryVerifiedBusinessController$Outbound;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusiness$outboundSchema: z.ZodType<
  RetryVerifiedBusiness$Outbound,
  z.ZodTypeDef,
  RetryVerifiedBusiness
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() => RetryVerifiedBusinessController$outboundSchema),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusiness$ {
  /** @deprecated use `RetryVerifiedBusiness$inboundSchema` instead. */
  export const inboundSchema = RetryVerifiedBusiness$inboundSchema;
  /** @deprecated use `RetryVerifiedBusiness$outboundSchema` instead. */
  export const outboundSchema = RetryVerifiedBusiness$outboundSchema;
  /** @deprecated use `RetryVerifiedBusiness$Outbound` instead. */
  export type Outbound = RetryVerifiedBusiness$Outbound;
}

export function retryVerifiedBusinessToJSON(
  retryVerifiedBusiness: RetryVerifiedBusiness,
): string {
  return JSON.stringify(
    RetryVerifiedBusiness$outboundSchema.parse(retryVerifiedBusiness),
  );
}

export function retryVerifiedBusinessFromJSON(
  jsonString: string,
): SafeParseResult<RetryVerifiedBusiness, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryVerifiedBusiness$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusiness' from JSON`,
  );
}
