/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidFeeOdfiErrorLinks = {};

export type InvalidFeeOdfiErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidFeeOdfiErrorLinks | undefined;
};

export type InvalidFeeOdfiErrorEmbedded = {
  errors?: Array<InvalidFeeOdfiErrorError> | undefined;
};

/** @internal */
export const InvalidFeeOdfiErrorLinks$inboundSchema: z.ZodType<
  InvalidFeeOdfiErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidFeeOdfiErrorLinks$Outbound = {};

/** @internal */
export const InvalidFeeOdfiErrorLinks$outboundSchema: z.ZodType<
  InvalidFeeOdfiErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidFeeOdfiErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFeeOdfiErrorLinks$ {
  /** @deprecated use `InvalidFeeOdfiErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InvalidFeeOdfiErrorLinks$inboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InvalidFeeOdfiErrorLinks$outboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorLinks$Outbound` instead. */
  export type Outbound = InvalidFeeOdfiErrorLinks$Outbound;
}

export function invalidFeeOdfiErrorLinksToJSON(
  invalidFeeOdfiErrorLinks: InvalidFeeOdfiErrorLinks,
): string {
  return JSON.stringify(
    InvalidFeeOdfiErrorLinks$outboundSchema.parse(invalidFeeOdfiErrorLinks),
  );
}

export function invalidFeeOdfiErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFeeOdfiErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFeeOdfiErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFeeOdfiErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidFeeOdfiErrorError$inboundSchema: z.ZodType<
  InvalidFeeOdfiErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidFeeOdfiErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidFeeOdfiErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidFeeOdfiErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidFeeOdfiErrorError$outboundSchema: z.ZodType<
  InvalidFeeOdfiErrorError$Outbound,
  z.ZodTypeDef,
  InvalidFeeOdfiErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidFeeOdfiErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFeeOdfiErrorError$ {
  /** @deprecated use `InvalidFeeOdfiErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidFeeOdfiErrorError$inboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidFeeOdfiErrorError$outboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorError$Outbound` instead. */
  export type Outbound = InvalidFeeOdfiErrorError$Outbound;
}

export function invalidFeeOdfiErrorErrorToJSON(
  invalidFeeOdfiErrorError: InvalidFeeOdfiErrorError,
): string {
  return JSON.stringify(
    InvalidFeeOdfiErrorError$outboundSchema.parse(invalidFeeOdfiErrorError),
  );
}

export function invalidFeeOdfiErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFeeOdfiErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFeeOdfiErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFeeOdfiErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidFeeOdfiErrorEmbedded$inboundSchema: z.ZodType<
  InvalidFeeOdfiErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidFeeOdfiErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InvalidFeeOdfiErrorEmbedded$Outbound = {
  errors?: Array<InvalidFeeOdfiErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidFeeOdfiErrorEmbedded$outboundSchema: z.ZodType<
  InvalidFeeOdfiErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidFeeOdfiErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InvalidFeeOdfiErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFeeOdfiErrorEmbedded$ {
  /** @deprecated use `InvalidFeeOdfiErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InvalidFeeOdfiErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InvalidFeeOdfiErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidFeeOdfiErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidFeeOdfiErrorEmbedded$Outbound;
}

export function invalidFeeOdfiErrorEmbeddedToJSON(
  invalidFeeOdfiErrorEmbedded: InvalidFeeOdfiErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidFeeOdfiErrorEmbedded$outboundSchema.parse(
      invalidFeeOdfiErrorEmbedded,
    ),
  );
}

export function invalidFeeOdfiErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFeeOdfiErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidFeeOdfiErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFeeOdfiErrorEmbedded' from JSON`,
  );
}
