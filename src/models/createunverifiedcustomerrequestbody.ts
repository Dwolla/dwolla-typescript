/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Create an Unverified Customer
 */
export type CreateUnverifiedCustomerRequestBody = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateUnverifiedCustomerRequestBody$inboundSchema: z.ZodType<
  CreateUnverifiedCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/** @internal */
export type CreateUnverifiedCustomerRequestBody$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateUnverifiedCustomerRequestBody$outboundSchema: z.ZodType<
  CreateUnverifiedCustomerRequestBody$Outbound,
  z.ZodTypeDef,
  CreateUnverifiedCustomerRequestBody
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUnverifiedCustomerRequestBody$ {
  /** @deprecated use `CreateUnverifiedCustomerRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateUnverifiedCustomerRequestBody$inboundSchema;
  /** @deprecated use `CreateUnverifiedCustomerRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateUnverifiedCustomerRequestBody$outboundSchema;
  /** @deprecated use `CreateUnverifiedCustomerRequestBody$Outbound` instead. */
  export type Outbound = CreateUnverifiedCustomerRequestBody$Outbound;
}

export function createUnverifiedCustomerRequestBodyToJSON(
  createUnverifiedCustomerRequestBody: CreateUnverifiedCustomerRequestBody,
): string {
  return JSON.stringify(
    CreateUnverifiedCustomerRequestBody$outboundSchema.parse(
      createUnverifiedCustomerRequestBody,
    ),
  );
}

export function createUnverifiedCustomerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateUnverifiedCustomerRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateUnverifiedCustomerRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUnverifiedCustomerRequestBody' from JSON`,
  );
}
