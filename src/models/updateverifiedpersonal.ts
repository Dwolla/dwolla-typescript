/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Update Verified Personal Customer Information
 */
export type UpdateVerifiedPersonal = {
  email?: string | undefined;
  ipAddress?: string | undefined;
  address1?: string | undefined;
  address2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postalCode?: string | undefined;
  phone?: string | undefined;
};

/** @internal */
export const UpdateVerifiedPersonal$inboundSchema: z.ZodType<
  UpdateVerifiedPersonal,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  ipAddress: z.string().optional(),
  address1: z.string().optional(),
  address2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  phone: z.string().optional(),
});

/** @internal */
export type UpdateVerifiedPersonal$Outbound = {
  email?: string | undefined;
  ipAddress?: string | undefined;
  address1?: string | undefined;
  address2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postalCode?: string | undefined;
  phone?: string | undefined;
};

/** @internal */
export const UpdateVerifiedPersonal$outboundSchema: z.ZodType<
  UpdateVerifiedPersonal$Outbound,
  z.ZodTypeDef,
  UpdateVerifiedPersonal
> = z.object({
  email: z.string().optional(),
  ipAddress: z.string().optional(),
  address1: z.string().optional(),
  address2: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  phone: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateVerifiedPersonal$ {
  /** @deprecated use `UpdateVerifiedPersonal$inboundSchema` instead. */
  export const inboundSchema = UpdateVerifiedPersonal$inboundSchema;
  /** @deprecated use `UpdateVerifiedPersonal$outboundSchema` instead. */
  export const outboundSchema = UpdateVerifiedPersonal$outboundSchema;
  /** @deprecated use `UpdateVerifiedPersonal$Outbound` instead. */
  export type Outbound = UpdateVerifiedPersonal$Outbound;
}

export function updateVerifiedPersonalToJSON(
  updateVerifiedPersonal: UpdateVerifiedPersonal,
): string {
  return JSON.stringify(
    UpdateVerifiedPersonal$outboundSchema.parse(updateVerifiedPersonal),
  );
}

export function updateVerifiedPersonalFromJSON(
  jsonString: string,
): SafeParseResult<UpdateVerifiedPersonal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateVerifiedPersonal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateVerifiedPersonal' from JSON`,
  );
}
