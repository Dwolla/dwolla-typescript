/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type ExchangePartnersEmbedded = {
  exchangePartners?: Array<ExchangePartners> | undefined;
};

export type ExchangePartners = {
  links?: { [k: string]: HalLink } | undefined;
  embedded?: ExchangePartnersEmbedded | undefined;
  total?: number | undefined;
};

/** @internal */
export const ExchangePartnersEmbedded$inboundSchema: z.ZodType<
  ExchangePartnersEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  "exchange-partners": z.array(z.lazy(() => ExchangePartners$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "exchange-partners": "exchangePartners",
  });
});

/** @internal */
export type ExchangePartnersEmbedded$Outbound = {
  "exchange-partners"?: Array<ExchangePartners$Outbound> | undefined;
};

/** @internal */
export const ExchangePartnersEmbedded$outboundSchema: z.ZodType<
  ExchangePartnersEmbedded$Outbound,
  z.ZodTypeDef,
  ExchangePartnersEmbedded
> = z.object({
  exchangePartners: z.array(z.lazy(() => ExchangePartners$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    exchangePartners: "exchange-partners",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExchangePartnersEmbedded$ {
  /** @deprecated use `ExchangePartnersEmbedded$inboundSchema` instead. */
  export const inboundSchema = ExchangePartnersEmbedded$inboundSchema;
  /** @deprecated use `ExchangePartnersEmbedded$outboundSchema` instead. */
  export const outboundSchema = ExchangePartnersEmbedded$outboundSchema;
  /** @deprecated use `ExchangePartnersEmbedded$Outbound` instead. */
  export type Outbound = ExchangePartnersEmbedded$Outbound;
}

export function exchangePartnersEmbeddedToJSON(
  exchangePartnersEmbedded: ExchangePartnersEmbedded,
): string {
  return JSON.stringify(
    ExchangePartnersEmbedded$outboundSchema.parse(exchangePartnersEmbedded),
  );
}

export function exchangePartnersEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<ExchangePartnersEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExchangePartnersEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExchangePartnersEmbedded' from JSON`,
  );
}

/** @internal */
export const ExchangePartners$inboundSchema: z.ZodType<
  ExchangePartners,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  _embedded: z.lazy(() => ExchangePartnersEmbedded$inboundSchema).optional(),
  total: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type ExchangePartners$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  _embedded?: ExchangePartnersEmbedded$Outbound | undefined;
  total?: number | undefined;
};

/** @internal */
export const ExchangePartners$outboundSchema: z.ZodType<
  ExchangePartners$Outbound,
  z.ZodTypeDef,
  ExchangePartners
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  embedded: z.lazy(() => ExchangePartnersEmbedded$outboundSchema).optional(),
  total: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExchangePartners$ {
  /** @deprecated use `ExchangePartners$inboundSchema` instead. */
  export const inboundSchema = ExchangePartners$inboundSchema;
  /** @deprecated use `ExchangePartners$outboundSchema` instead. */
  export const outboundSchema = ExchangePartners$outboundSchema;
  /** @deprecated use `ExchangePartners$Outbound` instead. */
  export type Outbound = ExchangePartners$Outbound;
}

export function exchangePartnersToJSON(
  exchangePartners: ExchangePartners,
): string {
  return JSON.stringify(
    ExchangePartners$outboundSchema.parse(exchangePartners),
  );
}

export function exchangePartnersFromJSON(
  jsonString: string,
): SafeParseResult<ExchangePartners, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExchangePartners$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExchangePartners' from JSON`,
  );
}
