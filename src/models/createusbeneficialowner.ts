/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InternationalAddress,
  InternationalAddress$inboundSchema,
  InternationalAddress$Outbound,
  InternationalAddress$outboundSchema,
} from "./internationaladdress.js";

/**
 * Create a US Beneficial Owner (identified by SSN)
 */
export type CreateUSBeneficialOwner = {
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  address: InternationalAddress;
  ssn: string;
};

/** @internal */
export const CreateUSBeneficialOwner$inboundSchema: z.ZodType<
  CreateUSBeneficialOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  dateOfBirth: z.string(),
  address: InternationalAddress$inboundSchema,
  ssn: z.string(),
});

/** @internal */
export type CreateUSBeneficialOwner$Outbound = {
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  address: InternationalAddress$Outbound;
  ssn: string;
};

/** @internal */
export const CreateUSBeneficialOwner$outboundSchema: z.ZodType<
  CreateUSBeneficialOwner$Outbound,
  z.ZodTypeDef,
  CreateUSBeneficialOwner
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  dateOfBirth: z.string(),
  address: InternationalAddress$outboundSchema,
  ssn: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUSBeneficialOwner$ {
  /** @deprecated use `CreateUSBeneficialOwner$inboundSchema` instead. */
  export const inboundSchema = CreateUSBeneficialOwner$inboundSchema;
  /** @deprecated use `CreateUSBeneficialOwner$outboundSchema` instead. */
  export const outboundSchema = CreateUSBeneficialOwner$outboundSchema;
  /** @deprecated use `CreateUSBeneficialOwner$Outbound` instead. */
  export type Outbound = CreateUSBeneficialOwner$Outbound;
}

export function createUSBeneficialOwnerToJSON(
  createUSBeneficialOwner: CreateUSBeneficialOwner,
): string {
  return JSON.stringify(
    CreateUSBeneficialOwner$outboundSchema.parse(createUSBeneficialOwner),
  );
}

export function createUSBeneficialOwnerFromJSON(
  jsonString: string,
): SafeParseResult<CreateUSBeneficialOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUSBeneficialOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUSBeneficialOwner' from JSON`,
  );
}
