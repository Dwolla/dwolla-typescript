/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MXSecureExchangeCreateExchangeRequestBodyExchangePartner = {
  href?: string | undefined;
};

export type MXSecureExchangeCreateExchangeRequestBodyLinks = {
  exchangePartner?:
    | MXSecureExchangeCreateExchangeRequestBodyExchangePartner
    | undefined;
};

export type MXSecureExchangeCreateExchangeRequestBody = {
  links?: MXSecureExchangeCreateExchangeRequestBodyLinks | undefined;
  token?: string | undefined;
};

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema:
  z.ZodType<
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string().optional(),
  });

/** @internal */
export type MXSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound =
  {
    href?: string | undefined;
  };

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema:
  z.ZodType<
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound,
    z.ZodTypeDef,
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner
  > = z.object({
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXSecureExchangeCreateExchangeRequestBodyExchangePartner$ {
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema` instead. */
  export const inboundSchema =
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema` instead. */
  export const outboundSchema =
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound` instead. */
  export type Outbound =
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound;
}

export function mxSecureExchangeCreateExchangeRequestBodyExchangePartnerToJSON(
  mxSecureExchangeCreateExchangeRequestBodyExchangePartner:
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner,
): string {
  return JSON.stringify(
    MXSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
      .parse(mxSecureExchangeCreateExchangeRequestBodyExchangePartner),
  );
}

export function mxSecureExchangeCreateExchangeRequestBodyExchangePartnerFromJSON(
  jsonString: string,
): SafeParseResult<
  MXSecureExchangeCreateExchangeRequestBodyExchangePartner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MXSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'MXSecureExchangeCreateExchangeRequestBodyExchangePartner' from JSON`,
  );
}

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema:
  z.ZodType<
    MXSecureExchangeCreateExchangeRequestBodyLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "exchange-partner": z.lazy(() =>
      MXSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "exchange-partner": "exchangePartner",
    });
  });

/** @internal */
export type MXSecureExchangeCreateExchangeRequestBodyLinks$Outbound = {
  "exchange-partner"?:
    | MXSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound
    | undefined;
};

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema:
  z.ZodType<
    MXSecureExchangeCreateExchangeRequestBodyLinks$Outbound,
    z.ZodTypeDef,
    MXSecureExchangeCreateExchangeRequestBodyLinks
  > = z.object({
    exchangePartner: z.lazy(() =>
      MXSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      exchangePartner: "exchange-partner",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXSecureExchangeCreateExchangeRequestBodyLinks$ {
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema` instead. */
  export const inboundSchema =
    MXSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema` instead. */
  export const outboundSchema =
    MXSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBodyLinks$Outbound` instead. */
  export type Outbound =
    MXSecureExchangeCreateExchangeRequestBodyLinks$Outbound;
}

export function mxSecureExchangeCreateExchangeRequestBodyLinksToJSON(
  mxSecureExchangeCreateExchangeRequestBodyLinks:
    MXSecureExchangeCreateExchangeRequestBodyLinks,
): string {
  return JSON.stringify(
    MXSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema.parse(
      mxSecureExchangeCreateExchangeRequestBodyLinks,
    ),
  );
}

export function mxSecureExchangeCreateExchangeRequestBodyLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  MXSecureExchangeCreateExchangeRequestBodyLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MXSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MXSecureExchangeCreateExchangeRequestBodyLinks' from JSON`,
  );
}

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBody$inboundSchema: z.ZodType<
  MXSecureExchangeCreateExchangeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() =>
    MXSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema
  ).optional(),
  token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type MXSecureExchangeCreateExchangeRequestBody$Outbound = {
  _links?: MXSecureExchangeCreateExchangeRequestBodyLinks$Outbound | undefined;
  token?: string | undefined;
};

/** @internal */
export const MXSecureExchangeCreateExchangeRequestBody$outboundSchema:
  z.ZodType<
    MXSecureExchangeCreateExchangeRequestBody$Outbound,
    z.ZodTypeDef,
    MXSecureExchangeCreateExchangeRequestBody
  > = z.object({
    links: z.lazy(() =>
      MXSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema
    ).optional(),
    token: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MXSecureExchangeCreateExchangeRequestBody$ {
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    MXSecureExchangeCreateExchangeRequestBody$inboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    MXSecureExchangeCreateExchangeRequestBody$outboundSchema;
  /** @deprecated use `MXSecureExchangeCreateExchangeRequestBody$Outbound` instead. */
  export type Outbound = MXSecureExchangeCreateExchangeRequestBody$Outbound;
}

export function mxSecureExchangeCreateExchangeRequestBodyToJSON(
  mxSecureExchangeCreateExchangeRequestBody:
    MXSecureExchangeCreateExchangeRequestBody,
): string {
  return JSON.stringify(
    MXSecureExchangeCreateExchangeRequestBody$outboundSchema.parse(
      mxSecureExchangeCreateExchangeRequestBody,
    ),
  );
}

export function mxSecureExchangeCreateExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  MXSecureExchangeCreateExchangeRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      MXSecureExchangeCreateExchangeRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'MXSecureExchangeCreateExchangeRequestBody' from JSON`,
  );
}
