/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of bank account
 */
export const CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType =
  {
    Checking: "checking",
    Savings: "savings",
    GeneralLedger: "general-ledger",
    Loan: "loan",
  } as const;
/**
 * Type of bank account
 */
export type CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType =
  ClosedEnum<
    typeof CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType
  >;

export const CreateCustomerBankFundingSourceWithAccountNumbersChannel = {
  Wire: "wire",
} as const;
export type CreateCustomerBankFundingSourceWithAccountNumbersChannel =
  ClosedEnum<typeof CreateCustomerBankFundingSourceWithAccountNumbersChannel>;

export type CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization =
  {
    href: string;
  };

export type CreateCustomerBankFundingSourceWithAccountNumbersLinks = {
  onDemandAuthorization?:
    | CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization
    | undefined;
};

/**
 * Schema for creating a basic bank funding source using routing and account numbers. This is the traditional method of adding a bank account.
 */
export type CreateCustomerBankFundingSourceWithAccountNumbers = {
  /**
   * A bank routing number that identifies a bank or credit union in the U.S.
   */
  routingNumber: string;
  /**
   * The bank account number
   */
  accountNumber: string;
  /**
   * Type of bank account
   */
  bankAccountType:
    CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * Use when creating an unverified bank account.
   */
  verified?: false | undefined;
  /**
   * An array containing a list of processing channels. ACH is the default processing channel for bank transfers.
   */
  channels?:
    | Array<CreateCustomerBankFundingSourceWithAccountNumbersChannel>
    | undefined;
  links?: CreateCustomerBankFundingSourceWithAccountNumbersLinks | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType
  > = z.nativeEnum(
    CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType,
  );

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType
  > =
    CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersChannel$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithAccountNumbersChannel
  > = z.nativeEnum(CreateCustomerBankFundingSourceWithAccountNumbersChannel);

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersChannel$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithAccountNumbersChannel
  > = CreateCustomerBankFundingSourceWithAccountNumbersChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithAccountNumbersChannel$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersChannel$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersChannel$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersChannel$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersChannel$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$Outbound =
  {
    href: string;
  };

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$Outbound` instead. */
  export type Outbound =
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$Outbound;
}

export function createCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorizationToJSON(
  createCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization:
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$outboundSchema
      .parse(
        createCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization,
      ),
  );
}

export function createCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersLinks$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbersLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "on-demand-authorization": z.lazy(() =>
      CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "on-demand-authorization": "onDemandAuthorization",
    });
  });

/** @internal */
export type CreateCustomerBankFundingSourceWithAccountNumbersLinks$Outbound = {
  "on-demand-authorization"?:
    | CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbersLinks$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbersLinks$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceWithAccountNumbersLinks
  > = z.object({
    onDemandAuthorization: z.lazy(() =>
      CreateCustomerBankFundingSourceWithAccountNumbersOnDemandAuthorization$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      onDemandAuthorization: "on-demand-authorization",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithAccountNumbersLinks$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersLinks$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbersLinks$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbersLinks$Outbound` instead. */
  export type Outbound =
    CreateCustomerBankFundingSourceWithAccountNumbersLinks$Outbound;
}

export function createCustomerBankFundingSourceWithAccountNumbersLinksToJSON(
  createCustomerBankFundingSourceWithAccountNumbersLinks:
    CreateCustomerBankFundingSourceWithAccountNumbersLinks,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithAccountNumbersLinks$outboundSchema.parse(
      createCustomerBankFundingSourceWithAccountNumbersLinks,
    ),
  );
}

export function createCustomerBankFundingSourceWithAccountNumbersLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithAccountNumbersLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithAccountNumbersLinks$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerBankFundingSourceWithAccountNumbersLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbers,
    z.ZodTypeDef,
    unknown
  > = z.object({
    routingNumber: z.string(),
    accountNumber: z.string(),
    bankAccountType:
      CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$inboundSchema,
    name: z.string(),
    verified: z.literal(false).default(false).optional(),
    channels: z.array(
      CreateCustomerBankFundingSourceWithAccountNumbersChannel$inboundSchema,
    ).optional(),
    _links: z.lazy(() =>
      CreateCustomerBankFundingSourceWithAccountNumbersLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type CreateCustomerBankFundingSourceWithAccountNumbers$Outbound = {
  routingNumber: string;
  accountNumber: string;
  bankAccountType: string;
  name: string;
  verified: false;
  channels?: Array<string> | undefined;
  _links?:
    | CreateCustomerBankFundingSourceWithAccountNumbersLinks$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithAccountNumbers$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceWithAccountNumbers
  > = z.object({
    routingNumber: z.string(),
    accountNumber: z.string(),
    bankAccountType:
      CreateCustomerBankFundingSourceWithAccountNumbersBankAccountType$outboundSchema,
    name: z.string(),
    verified: z.literal(false),
    channels: z.array(
      CreateCustomerBankFundingSourceWithAccountNumbersChannel$outboundSchema,
    ).optional(),
    links: z.lazy(() =>
      CreateCustomerBankFundingSourceWithAccountNumbersLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithAccountNumbers$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithAccountNumbers$Outbound` instead. */
  export type Outbound =
    CreateCustomerBankFundingSourceWithAccountNumbers$Outbound;
}

export function createCustomerBankFundingSourceWithAccountNumbersToJSON(
  createCustomerBankFundingSourceWithAccountNumbers:
    CreateCustomerBankFundingSourceWithAccountNumbers,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithAccountNumbers$outboundSchema.parse(
      createCustomerBankFundingSourceWithAccountNumbers,
    ),
  );
}

export function createCustomerBankFundingSourceWithAccountNumbersFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithAccountNumbers,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithAccountNumbers$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerBankFundingSourceWithAccountNumbers' from JSON`,
  );
}
