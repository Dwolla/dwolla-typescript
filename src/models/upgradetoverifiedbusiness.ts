/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type UpgradeToVerifiedBusinessAddress = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

export type UpgradeToVerifiedBusinessController = {
  firstName: string;
  lastName: string;
  title: string;
  ssn?: string | undefined;
  dateOfBirth: RFCDate;
  address: UpgradeToVerifiedBusinessAddress;
};

/**
 * Upgrade Unverified Customer to Verified Business Customer
 */
export type UpgradeToVerifiedBusiness = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: UpgradeToVerifiedBusinessController;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const UpgradeToVerifiedBusinessAddress$inboundSchema: z.ZodType<
  UpgradeToVerifiedBusinessAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  stateProvinceRegion: z.string(),
  postalCode: z.string(),
  country: z.string(),
});

/** @internal */
export type UpgradeToVerifiedBusinessAddress$Outbound = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

/** @internal */
export const UpgradeToVerifiedBusinessAddress$outboundSchema: z.ZodType<
  UpgradeToVerifiedBusinessAddress$Outbound,
  z.ZodTypeDef,
  UpgradeToVerifiedBusinessAddress
> = z.object({
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  stateProvinceRegion: z.string(),
  postalCode: z.string(),
  country: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeToVerifiedBusinessAddress$ {
  /** @deprecated use `UpgradeToVerifiedBusinessAddress$inboundSchema` instead. */
  export const inboundSchema = UpgradeToVerifiedBusinessAddress$inboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusinessAddress$outboundSchema` instead. */
  export const outboundSchema = UpgradeToVerifiedBusinessAddress$outboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusinessAddress$Outbound` instead. */
  export type Outbound = UpgradeToVerifiedBusinessAddress$Outbound;
}

export function upgradeToVerifiedBusinessAddressToJSON(
  upgradeToVerifiedBusinessAddress: UpgradeToVerifiedBusinessAddress,
): string {
  return JSON.stringify(
    UpgradeToVerifiedBusinessAddress$outboundSchema.parse(
      upgradeToVerifiedBusinessAddress,
    ),
  );
}

export function upgradeToVerifiedBusinessAddressFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeToVerifiedBusinessAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeToVerifiedBusinessAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeToVerifiedBusinessAddress' from JSON`,
  );
}

/** @internal */
export const UpgradeToVerifiedBusinessController$inboundSchema: z.ZodType<
  UpgradeToVerifiedBusinessController,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  ssn: z.string().optional(),
  dateOfBirth: z.string().transform(v => new RFCDate(v)),
  address: z.lazy(() => UpgradeToVerifiedBusinessAddress$inboundSchema),
});

/** @internal */
export type UpgradeToVerifiedBusinessController$Outbound = {
  firstName: string;
  lastName: string;
  title: string;
  ssn?: string | undefined;
  dateOfBirth: string;
  address: UpgradeToVerifiedBusinessAddress$Outbound;
};

/** @internal */
export const UpgradeToVerifiedBusinessController$outboundSchema: z.ZodType<
  UpgradeToVerifiedBusinessController$Outbound,
  z.ZodTypeDef,
  UpgradeToVerifiedBusinessController
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  ssn: z.string().optional(),
  dateOfBirth: z.instanceof(RFCDate).transform(v => v.toString()),
  address: z.lazy(() => UpgradeToVerifiedBusinessAddress$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeToVerifiedBusinessController$ {
  /** @deprecated use `UpgradeToVerifiedBusinessController$inboundSchema` instead. */
  export const inboundSchema =
    UpgradeToVerifiedBusinessController$inboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusinessController$outboundSchema` instead. */
  export const outboundSchema =
    UpgradeToVerifiedBusinessController$outboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusinessController$Outbound` instead. */
  export type Outbound = UpgradeToVerifiedBusinessController$Outbound;
}

export function upgradeToVerifiedBusinessControllerToJSON(
  upgradeToVerifiedBusinessController: UpgradeToVerifiedBusinessController,
): string {
  return JSON.stringify(
    UpgradeToVerifiedBusinessController$outboundSchema.parse(
      upgradeToVerifiedBusinessController,
    ),
  );
}

export function upgradeToVerifiedBusinessControllerFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeToVerifiedBusinessController, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpgradeToVerifiedBusinessController$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeToVerifiedBusinessController' from JSON`,
  );
}

/** @internal */
export const UpgradeToVerifiedBusiness$inboundSchema: z.ZodType<
  UpgradeToVerifiedBusiness,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() => UpgradeToVerifiedBusinessController$inboundSchema),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/** @internal */
export type UpgradeToVerifiedBusiness$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: UpgradeToVerifiedBusinessController$Outbound;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const UpgradeToVerifiedBusiness$outboundSchema: z.ZodType<
  UpgradeToVerifiedBusiness$Outbound,
  z.ZodTypeDef,
  UpgradeToVerifiedBusiness
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() => UpgradeToVerifiedBusinessController$outboundSchema),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeToVerifiedBusiness$ {
  /** @deprecated use `UpgradeToVerifiedBusiness$inboundSchema` instead. */
  export const inboundSchema = UpgradeToVerifiedBusiness$inboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusiness$outboundSchema` instead. */
  export const outboundSchema = UpgradeToVerifiedBusiness$outboundSchema;
  /** @deprecated use `UpgradeToVerifiedBusiness$Outbound` instead. */
  export type Outbound = UpgradeToVerifiedBusiness$Outbound;
}

export function upgradeToVerifiedBusinessToJSON(
  upgradeToVerifiedBusiness: UpgradeToVerifiedBusiness,
): string {
  return JSON.stringify(
    UpgradeToVerifiedBusiness$outboundSchema.parse(upgradeToVerifiedBusiness),
  );
}

export function upgradeToVerifiedBusinessFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeToVerifiedBusiness, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeToVerifiedBusiness$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeToVerifiedBusiness' from JSON`,
  );
}
