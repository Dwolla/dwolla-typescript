/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidUrlFormatErrorLinks = {};

export type InvalidUrlFormatErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidUrlFormatErrorLinks | undefined;
};

export type InvalidUrlFormatErrorEmbedded = {
  errors?: Array<InvalidUrlFormatErrorError> | undefined;
};

/** @internal */
export const InvalidUrlFormatErrorLinks$inboundSchema: z.ZodType<
  InvalidUrlFormatErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidUrlFormatErrorLinks$Outbound = {};

/** @internal */
export const InvalidUrlFormatErrorLinks$outboundSchema: z.ZodType<
  InvalidUrlFormatErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidUrlFormatErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidUrlFormatErrorLinks$ {
  /** @deprecated use `InvalidUrlFormatErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InvalidUrlFormatErrorLinks$inboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InvalidUrlFormatErrorLinks$outboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorLinks$Outbound` instead. */
  export type Outbound = InvalidUrlFormatErrorLinks$Outbound;
}

export function invalidUrlFormatErrorLinksToJSON(
  invalidUrlFormatErrorLinks: InvalidUrlFormatErrorLinks,
): string {
  return JSON.stringify(
    InvalidUrlFormatErrorLinks$outboundSchema.parse(invalidUrlFormatErrorLinks),
  );
}

export function invalidUrlFormatErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidUrlFormatErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidUrlFormatErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidUrlFormatErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidUrlFormatErrorError$inboundSchema: z.ZodType<
  InvalidUrlFormatErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidUrlFormatErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidUrlFormatErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidUrlFormatErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidUrlFormatErrorError$outboundSchema: z.ZodType<
  InvalidUrlFormatErrorError$Outbound,
  z.ZodTypeDef,
  InvalidUrlFormatErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidUrlFormatErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidUrlFormatErrorError$ {
  /** @deprecated use `InvalidUrlFormatErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidUrlFormatErrorError$inboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidUrlFormatErrorError$outboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorError$Outbound` instead. */
  export type Outbound = InvalidUrlFormatErrorError$Outbound;
}

export function invalidUrlFormatErrorErrorToJSON(
  invalidUrlFormatErrorError: InvalidUrlFormatErrorError,
): string {
  return JSON.stringify(
    InvalidUrlFormatErrorError$outboundSchema.parse(invalidUrlFormatErrorError),
  );
}

export function invalidUrlFormatErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidUrlFormatErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidUrlFormatErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidUrlFormatErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidUrlFormatErrorEmbedded$inboundSchema: z.ZodType<
  InvalidUrlFormatErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidUrlFormatErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InvalidUrlFormatErrorEmbedded$Outbound = {
  errors?: Array<InvalidUrlFormatErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidUrlFormatErrorEmbedded$outboundSchema: z.ZodType<
  InvalidUrlFormatErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidUrlFormatErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InvalidUrlFormatErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidUrlFormatErrorEmbedded$ {
  /** @deprecated use `InvalidUrlFormatErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InvalidUrlFormatErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InvalidUrlFormatErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidUrlFormatErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidUrlFormatErrorEmbedded$Outbound;
}

export function invalidUrlFormatErrorEmbeddedToJSON(
  invalidUrlFormatErrorEmbedded: InvalidUrlFormatErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidUrlFormatErrorEmbedded$outboundSchema.parse(
      invalidUrlFormatErrorEmbedded,
    ),
  );
}

export function invalidUrlFormatErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InvalidUrlFormatErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidUrlFormatErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidUrlFormatErrorEmbedded' from JSON`,
  );
}
