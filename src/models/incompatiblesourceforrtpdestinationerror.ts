/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type IncompatibleSourceForRtpDestinationErrorLinks = {};

export type IncompatibleSourceForRtpDestinationErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: IncompatibleSourceForRtpDestinationErrorLinks | undefined;
};

export type IncompatibleSourceForRtpDestinationErrorEmbedded = {
  errors?: Array<IncompatibleSourceForRtpDestinationErrorError> | undefined;
};

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorLinks$inboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type IncompatibleSourceForRtpDestinationErrorLinks$Outbound = {};

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorLinks$outboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorLinks$Outbound,
    z.ZodTypeDef,
    IncompatibleSourceForRtpDestinationErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleSourceForRtpDestinationErrorLinks$ {
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleSourceForRtpDestinationErrorLinks$inboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleSourceForRtpDestinationErrorLinks$outboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorLinks$Outbound` instead. */
  export type Outbound = IncompatibleSourceForRtpDestinationErrorLinks$Outbound;
}

export function incompatibleSourceForRtpDestinationErrorLinksToJSON(
  incompatibleSourceForRtpDestinationErrorLinks:
    IncompatibleSourceForRtpDestinationErrorLinks,
): string {
  return JSON.stringify(
    IncompatibleSourceForRtpDestinationErrorLinks$outboundSchema.parse(
      incompatibleSourceForRtpDestinationErrorLinks,
    ),
  );
}

export function incompatibleSourceForRtpDestinationErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  IncompatibleSourceForRtpDestinationErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleSourceForRtpDestinationErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncompatibleSourceForRtpDestinationErrorLinks' from JSON`,
  );
}

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorError$inboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      IncompatibleSourceForRtpDestinationErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type IncompatibleSourceForRtpDestinationErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: IncompatibleSourceForRtpDestinationErrorLinks$Outbound | undefined;
};

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorError$outboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorError$Outbound,
    z.ZodTypeDef,
    IncompatibleSourceForRtpDestinationErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      IncompatibleSourceForRtpDestinationErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleSourceForRtpDestinationErrorError$ {
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorError$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleSourceForRtpDestinationErrorError$inboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorError$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleSourceForRtpDestinationErrorError$outboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorError$Outbound` instead. */
  export type Outbound = IncompatibleSourceForRtpDestinationErrorError$Outbound;
}

export function incompatibleSourceForRtpDestinationErrorErrorToJSON(
  incompatibleSourceForRtpDestinationErrorError:
    IncompatibleSourceForRtpDestinationErrorError,
): string {
  return JSON.stringify(
    IncompatibleSourceForRtpDestinationErrorError$outboundSchema.parse(
      incompatibleSourceForRtpDestinationErrorError,
    ),
  );
}

export function incompatibleSourceForRtpDestinationErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  IncompatibleSourceForRtpDestinationErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleSourceForRtpDestinationErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncompatibleSourceForRtpDestinationErrorError' from JSON`,
  );
}

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorEmbedded$inboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => IncompatibleSourceForRtpDestinationErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type IncompatibleSourceForRtpDestinationErrorEmbedded$Outbound = {
  errors?:
    | Array<IncompatibleSourceForRtpDestinationErrorError$Outbound>
    | undefined;
};

/** @internal */
export const IncompatibleSourceForRtpDestinationErrorEmbedded$outboundSchema:
  z.ZodType<
    IncompatibleSourceForRtpDestinationErrorEmbedded$Outbound,
    z.ZodTypeDef,
    IncompatibleSourceForRtpDestinationErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        IncompatibleSourceForRtpDestinationErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IncompatibleSourceForRtpDestinationErrorEmbedded$ {
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    IncompatibleSourceForRtpDestinationErrorEmbedded$inboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    IncompatibleSourceForRtpDestinationErrorEmbedded$outboundSchema;
  /** @deprecated use `IncompatibleSourceForRtpDestinationErrorEmbedded$Outbound` instead. */
  export type Outbound =
    IncompatibleSourceForRtpDestinationErrorEmbedded$Outbound;
}

export function incompatibleSourceForRtpDestinationErrorEmbeddedToJSON(
  incompatibleSourceForRtpDestinationErrorEmbedded:
    IncompatibleSourceForRtpDestinationErrorEmbedded,
): string {
  return JSON.stringify(
    IncompatibleSourceForRtpDestinationErrorEmbedded$outboundSchema.parse(
      incompatibleSourceForRtpDestinationErrorEmbedded,
    ),
  );
}

export function incompatibleSourceForRtpDestinationErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  IncompatibleSourceForRtpDestinationErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      IncompatibleSourceForRtpDestinationErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'IncompatibleSourceForRtpDestinationErrorEmbedded' from JSON`,
  );
}
