/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidPointOfSaleAddendaAddressErrorLinks = {};

export type InvalidPointOfSaleAddendaAddressErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidPointOfSaleAddendaAddressErrorLinks | undefined;
};

export type InvalidPointOfSaleAddendaAddressErrorEmbedded = {
  errors?: Array<InvalidPointOfSaleAddendaAddressErrorError> | undefined;
};

export type InvalidPointOfSaleAddendaAddressError = {
  code: string;
  message: string;
  embedded?: InvalidPointOfSaleAddendaAddressErrorEmbedded | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorLinks$inboundSchema:
  z.ZodType<InvalidPointOfSaleAddendaAddressErrorLinks, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type InvalidPointOfSaleAddendaAddressErrorLinks$Outbound = {};

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorLinks$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaAddressErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaAddressErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaAddressErrorLinks$ {
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaAddressErrorLinks$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaAddressErrorLinks$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorLinks$Outbound` instead. */
  export type Outbound = InvalidPointOfSaleAddendaAddressErrorLinks$Outbound;
}

export function invalidPointOfSaleAddendaAddressErrorLinksToJSON(
  invalidPointOfSaleAddendaAddressErrorLinks:
    InvalidPointOfSaleAddendaAddressErrorLinks,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaAddressErrorLinks$outboundSchema.parse(
      invalidPointOfSaleAddendaAddressErrorLinks,
    ),
  );
}

export function invalidPointOfSaleAddendaAddressErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaAddressErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaAddressErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaAddressErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorError$inboundSchema:
  z.ZodType<InvalidPointOfSaleAddendaAddressErrorError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string().optional(),
      message: z.string().optional(),
      path: z.string().optional(),
      _links: z.lazy(() =>
        InvalidPointOfSaleAddendaAddressErrorLinks$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "_links": "links",
      });
    });

/** @internal */
export type InvalidPointOfSaleAddendaAddressErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidPointOfSaleAddendaAddressErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorError$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaAddressErrorError$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaAddressErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidPointOfSaleAddendaAddressErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaAddressErrorError$ {
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaAddressErrorError$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaAddressErrorError$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorError$Outbound` instead. */
  export type Outbound = InvalidPointOfSaleAddendaAddressErrorError$Outbound;
}

export function invalidPointOfSaleAddendaAddressErrorErrorToJSON(
  invalidPointOfSaleAddendaAddressErrorError:
    InvalidPointOfSaleAddendaAddressErrorError,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaAddressErrorError$outboundSchema.parse(
      invalidPointOfSaleAddendaAddressErrorError,
    ),
  );
}

export function invalidPointOfSaleAddendaAddressErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaAddressErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaAddressErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaAddressErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaAddressErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidPointOfSaleAddendaAddressErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type InvalidPointOfSaleAddendaAddressErrorEmbedded$Outbound = {
  errors?:
    | Array<InvalidPointOfSaleAddendaAddressErrorError$Outbound>
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaAddressErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaAddressErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaAddressErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidPointOfSaleAddendaAddressErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaAddressErrorEmbedded$ {
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaAddressErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaAddressErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidPointOfSaleAddendaAddressErrorEmbedded$Outbound;
}

export function invalidPointOfSaleAddendaAddressErrorEmbeddedToJSON(
  invalidPointOfSaleAddendaAddressErrorEmbedded:
    InvalidPointOfSaleAddendaAddressErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaAddressErrorEmbedded$outboundSchema.parse(
      invalidPointOfSaleAddendaAddressErrorEmbedded,
    ),
  );
}

export function invalidPointOfSaleAddendaAddressErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaAddressErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaAddressErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaAddressErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaAddressError$inboundSchema: z.ZodType<
  InvalidPointOfSaleAddendaAddressError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() =>
    InvalidPointOfSaleAddendaAddressErrorEmbedded$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type InvalidPointOfSaleAddendaAddressError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | InvalidPointOfSaleAddendaAddressErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaAddressError$outboundSchema: z.ZodType<
  InvalidPointOfSaleAddendaAddressError$Outbound,
  z.ZodTypeDef,
  InvalidPointOfSaleAddendaAddressError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() =>
    InvalidPointOfSaleAddendaAddressErrorEmbedded$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaAddressError$ {
  /** @deprecated use `InvalidPointOfSaleAddendaAddressError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaAddressError$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaAddressError$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaAddressError$Outbound` instead. */
  export type Outbound = InvalidPointOfSaleAddendaAddressError$Outbound;
}

export function invalidPointOfSaleAddendaAddressErrorToJSON(
  invalidPointOfSaleAddendaAddressError: InvalidPointOfSaleAddendaAddressError,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaAddressError$outboundSchema.parse(
      invalidPointOfSaleAddendaAddressError,
    ),
  );
}

export function invalidPointOfSaleAddendaAddressErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidPointOfSaleAddendaAddressError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaAddressError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidPointOfSaleAddendaAddressError' from JSON`,
  );
}
