/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InternationalAddress,
  InternationalAddress$inboundSchema,
  InternationalAddress$Outbound,
  InternationalAddress$outboundSchema,
} from "./internationaladdress.js";

/**
 * Controller object with SSN
 */
export type ControllerWithSsn = {
  firstName: string;
  lastName: string;
  title: string;
  dateOfBirth: RFCDate;
  address: InternationalAddress;
  ssn: string;
};

/** @internal */
export const ControllerWithSsn$inboundSchema: z.ZodType<
  ControllerWithSsn,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  dateOfBirth: z.string().transform(v => new RFCDate(v)),
  address: InternationalAddress$inboundSchema,
  ssn: z.string(),
});

/** @internal */
export type ControllerWithSsn$Outbound = {
  firstName: string;
  lastName: string;
  title: string;
  dateOfBirth: string;
  address: InternationalAddress$Outbound;
  ssn: string;
};

/** @internal */
export const ControllerWithSsn$outboundSchema: z.ZodType<
  ControllerWithSsn$Outbound,
  z.ZodTypeDef,
  ControllerWithSsn
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  title: z.string(),
  dateOfBirth: z.instanceof(RFCDate).transform(v => v.toString()),
  address: InternationalAddress$outboundSchema,
  ssn: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControllerWithSsn$ {
  /** @deprecated use `ControllerWithSsn$inboundSchema` instead. */
  export const inboundSchema = ControllerWithSsn$inboundSchema;
  /** @deprecated use `ControllerWithSsn$outboundSchema` instead. */
  export const outboundSchema = ControllerWithSsn$outboundSchema;
  /** @deprecated use `ControllerWithSsn$Outbound` instead. */
  export type Outbound = ControllerWithSsn$Outbound;
}

export function controllerWithSsnToJSON(
  controllerWithSsn: ControllerWithSsn,
): string {
  return JSON.stringify(
    ControllerWithSsn$outboundSchema.parse(controllerWithSsn),
  );
}

export function controllerWithSsnFromJSON(
  jsonString: string,
): SafeParseResult<ControllerWithSsn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControllerWithSsn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControllerWithSsn' from JSON`,
  );
}
