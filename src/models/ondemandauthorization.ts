/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OnDemandAuthorizationSelf = {
  href?: string | undefined;
};

export type OnDemandAuthorizationLinks = {
  self?: OnDemandAuthorizationSelf | undefined;
};

export type OnDemandAuthorization = {
  links?: OnDemandAuthorizationLinks | undefined;
  bodyText?: string | undefined;
  buttonText?: string | undefined;
};

/** @internal */
export const OnDemandAuthorizationSelf$inboundSchema: z.ZodType<
  OnDemandAuthorizationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type OnDemandAuthorizationSelf$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const OnDemandAuthorizationSelf$outboundSchema: z.ZodType<
  OnDemandAuthorizationSelf$Outbound,
  z.ZodTypeDef,
  OnDemandAuthorizationSelf
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnDemandAuthorizationSelf$ {
  /** @deprecated use `OnDemandAuthorizationSelf$inboundSchema` instead. */
  export const inboundSchema = OnDemandAuthorizationSelf$inboundSchema;
  /** @deprecated use `OnDemandAuthorizationSelf$outboundSchema` instead. */
  export const outboundSchema = OnDemandAuthorizationSelf$outboundSchema;
  /** @deprecated use `OnDemandAuthorizationSelf$Outbound` instead. */
  export type Outbound = OnDemandAuthorizationSelf$Outbound;
}

export function onDemandAuthorizationSelfToJSON(
  onDemandAuthorizationSelf: OnDemandAuthorizationSelf,
): string {
  return JSON.stringify(
    OnDemandAuthorizationSelf$outboundSchema.parse(onDemandAuthorizationSelf),
  );
}

export function onDemandAuthorizationSelfFromJSON(
  jsonString: string,
): SafeParseResult<OnDemandAuthorizationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnDemandAuthorizationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnDemandAuthorizationSelf' from JSON`,
  );
}

/** @internal */
export const OnDemandAuthorizationLinks$inboundSchema: z.ZodType<
  OnDemandAuthorizationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => OnDemandAuthorizationSelf$inboundSchema).optional(),
});

/** @internal */
export type OnDemandAuthorizationLinks$Outbound = {
  self?: OnDemandAuthorizationSelf$Outbound | undefined;
};

/** @internal */
export const OnDemandAuthorizationLinks$outboundSchema: z.ZodType<
  OnDemandAuthorizationLinks$Outbound,
  z.ZodTypeDef,
  OnDemandAuthorizationLinks
> = z.object({
  self: z.lazy(() => OnDemandAuthorizationSelf$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnDemandAuthorizationLinks$ {
  /** @deprecated use `OnDemandAuthorizationLinks$inboundSchema` instead. */
  export const inboundSchema = OnDemandAuthorizationLinks$inboundSchema;
  /** @deprecated use `OnDemandAuthorizationLinks$outboundSchema` instead. */
  export const outboundSchema = OnDemandAuthorizationLinks$outboundSchema;
  /** @deprecated use `OnDemandAuthorizationLinks$Outbound` instead. */
  export type Outbound = OnDemandAuthorizationLinks$Outbound;
}

export function onDemandAuthorizationLinksToJSON(
  onDemandAuthorizationLinks: OnDemandAuthorizationLinks,
): string {
  return JSON.stringify(
    OnDemandAuthorizationLinks$outboundSchema.parse(onDemandAuthorizationLinks),
  );
}

export function onDemandAuthorizationLinksFromJSON(
  jsonString: string,
): SafeParseResult<OnDemandAuthorizationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnDemandAuthorizationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnDemandAuthorizationLinks' from JSON`,
  );
}

/** @internal */
export const OnDemandAuthorization$inboundSchema: z.ZodType<
  OnDemandAuthorization,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => OnDemandAuthorizationLinks$inboundSchema).optional(),
  bodyText: z.string().optional(),
  buttonText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type OnDemandAuthorization$Outbound = {
  _links?: OnDemandAuthorizationLinks$Outbound | undefined;
  bodyText?: string | undefined;
  buttonText?: string | undefined;
};

/** @internal */
export const OnDemandAuthorization$outboundSchema: z.ZodType<
  OnDemandAuthorization$Outbound,
  z.ZodTypeDef,
  OnDemandAuthorization
> = z.object({
  links: z.lazy(() => OnDemandAuthorizationLinks$outboundSchema).optional(),
  bodyText: z.string().optional(),
  buttonText: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnDemandAuthorization$ {
  /** @deprecated use `OnDemandAuthorization$inboundSchema` instead. */
  export const inboundSchema = OnDemandAuthorization$inboundSchema;
  /** @deprecated use `OnDemandAuthorization$outboundSchema` instead. */
  export const outboundSchema = OnDemandAuthorization$outboundSchema;
  /** @deprecated use `OnDemandAuthorization$Outbound` instead. */
  export type Outbound = OnDemandAuthorization$Outbound;
}

export function onDemandAuthorizationToJSON(
  onDemandAuthorization: OnDemandAuthorization,
): string {
  return JSON.stringify(
    OnDemandAuthorization$outboundSchema.parse(onDemandAuthorization),
  );
}

export function onDemandAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<OnDemandAuthorization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnDemandAuthorization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnDemandAuthorization' from JSON`,
  );
}
