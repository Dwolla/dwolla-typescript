/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TransferAmount = {
  value: string;
  currency: string;
};

/** @internal */
export const TransferAmount$inboundSchema: z.ZodType<
  TransferAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/** @internal */
export type TransferAmount$Outbound = {
  value: string;
  currency: string;
};

/** @internal */
export const TransferAmount$outboundSchema: z.ZodType<
  TransferAmount$Outbound,
  z.ZodTypeDef,
  TransferAmount
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAmount$ {
  /** @deprecated use `TransferAmount$inboundSchema` instead. */
  export const inboundSchema = TransferAmount$inboundSchema;
  /** @deprecated use `TransferAmount$outboundSchema` instead. */
  export const outboundSchema = TransferAmount$outboundSchema;
  /** @deprecated use `TransferAmount$Outbound` instead. */
  export type Outbound = TransferAmount$Outbound;
}

export function transferAmountToJSON(transferAmount: TransferAmount): string {
  return JSON.stringify(TransferAmount$outboundSchema.parse(transferAmount));
}

export function transferAmountFromJSON(
  jsonString: string,
): SafeParseResult<TransferAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAmount' from JSON`,
  );
}
