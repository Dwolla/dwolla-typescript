/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type TransferAmount1 = {
  value?: string | undefined;
  currency?: string | undefined;
};

export type Clearing = {
  source?: string | undefined;
  destination?: string | undefined;
};

export type TransferMetadata = {
  paymentId?: string | undefined;
  note?: string | undefined;
};

export type SourceAddenda = {
  values?: Array<string> | undefined;
};

export type Source = {
  addenda?: SourceAddenda | undefined;
};

export type DestinationAddenda = {
  values?: Array<string> | undefined;
};

export type AchDetailsDestination = {
  addenda?: DestinationAddenda | undefined;
};

export type AchDetails = {
  source?: Source | undefined;
  destination?: AchDetailsDestination | undefined;
};

/**
 * RTP destination details with network identifiers
 */
export type RtpDetailsDestination = {
  /**
   * Remittance information included in the transfer request
   */
  remittanceData?: string | undefined;
  /**
   * Unique identifier for the transfer within the RTP network
   */
  networkId?: string | undefined;
  /**
   * End-to-end reference identifier for the RTP transfer
   */
  endToEndReferenceId?: string | undefined;
};

/**
 * Real-Time Payments (RTP) network specific details. Present when transfer was processed via RTP network.
 */
export type RtpDetails = {
  /**
   * RTP destination details with network identifiers
   */
  destination?: RtpDetailsDestination | undefined;
};

/**
 * FedNow destination details with network identifiers
 */
export type FedNowDetailsDestination = {
  /**
   * Remittance information included in the transfer request
   */
  remittanceData?: string | undefined;
  /**
   * Unique identifier for the transfer within the FedNow network
   */
  networkId?: string | undefined;
  /**
   * End-to-end reference identifier for the FedNow transfer
   */
  endToEndReferenceId?: string | undefined;
};

/**
 * FedNow Service network specific details. Present when transfer was processed via FedNow network.
 */
export type FedNowDetails = {
  /**
   * FedNow destination details with network identifiers
   */
  destination?: FedNowDetailsDestination | undefined;
};

/**
 * The payment network used to process the transfer
 */
export const DestinationEnum = {
  RealTimePayments: "real-time-payments",
  FedNow: "fed-now",
} as const;
/**
 * The payment network used to process the transfer
 */
export type DestinationEnum = ClosedEnum<typeof DestinationEnum>;

export type TransferProcessingChannel = {
  /**
   * The payment network used to process the transfer
   */
  destination?: DestinationEnum | undefined;
};

export type Transfer = {
  links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: TransferAmount1 | undefined;
  created?: Date | undefined;
  clearing?: Clearing | undefined;
  metadata?: TransferMetadata | undefined;
  achDetails?: AchDetails | undefined;
  /**
   * Real-Time Payments (RTP) network specific details. Present when transfer was processed via RTP network.
   */
  rtpDetails?: RtpDetails | undefined;
  /**
   * FedNow Service network specific details. Present when transfer was processed via FedNow network.
   */
  fedNowDetails?: FedNowDetails | undefined;
  correlationId?: string | undefined;
  processingChannel?: TransferProcessingChannel | undefined;
};

/** @internal */
export const TransferAmount1$inboundSchema: z.ZodType<
  TransferAmount1,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type TransferAmount1$Outbound = {
  value?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const TransferAmount1$outboundSchema: z.ZodType<
  TransferAmount1$Outbound,
  z.ZodTypeDef,
  TransferAmount1
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAmount1$ {
  /** @deprecated use `TransferAmount1$inboundSchema` instead. */
  export const inboundSchema = TransferAmount1$inboundSchema;
  /** @deprecated use `TransferAmount1$outboundSchema` instead. */
  export const outboundSchema = TransferAmount1$outboundSchema;
  /** @deprecated use `TransferAmount1$Outbound` instead. */
  export type Outbound = TransferAmount1$Outbound;
}

export function transferAmount1ToJSON(
  transferAmount1: TransferAmount1,
): string {
  return JSON.stringify(TransferAmount1$outboundSchema.parse(transferAmount1));
}

export function transferAmount1FromJSON(
  jsonString: string,
): SafeParseResult<TransferAmount1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAmount1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAmount1' from JSON`,
  );
}

/** @internal */
export const Clearing$inboundSchema: z.ZodType<
  Clearing,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  destination: z.string().optional(),
});

/** @internal */
export type Clearing$Outbound = {
  source?: string | undefined;
  destination?: string | undefined;
};

/** @internal */
export const Clearing$outboundSchema: z.ZodType<
  Clearing$Outbound,
  z.ZodTypeDef,
  Clearing
> = z.object({
  source: z.string().optional(),
  destination: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Clearing$ {
  /** @deprecated use `Clearing$inboundSchema` instead. */
  export const inboundSchema = Clearing$inboundSchema;
  /** @deprecated use `Clearing$outboundSchema` instead. */
  export const outboundSchema = Clearing$outboundSchema;
  /** @deprecated use `Clearing$Outbound` instead. */
  export type Outbound = Clearing$Outbound;
}

export function clearingToJSON(clearing: Clearing): string {
  return JSON.stringify(Clearing$outboundSchema.parse(clearing));
}

export function clearingFromJSON(
  jsonString: string,
): SafeParseResult<Clearing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Clearing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Clearing' from JSON`,
  );
}

/** @internal */
export const TransferMetadata$inboundSchema: z.ZodType<
  TransferMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  paymentId: z.string().optional(),
  note: z.string().optional(),
});

/** @internal */
export type TransferMetadata$Outbound = {
  paymentId?: string | undefined;
  note?: string | undefined;
};

/** @internal */
export const TransferMetadata$outboundSchema: z.ZodType<
  TransferMetadata$Outbound,
  z.ZodTypeDef,
  TransferMetadata
> = z.object({
  paymentId: z.string().optional(),
  note: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferMetadata$ {
  /** @deprecated use `TransferMetadata$inboundSchema` instead. */
  export const inboundSchema = TransferMetadata$inboundSchema;
  /** @deprecated use `TransferMetadata$outboundSchema` instead. */
  export const outboundSchema = TransferMetadata$outboundSchema;
  /** @deprecated use `TransferMetadata$Outbound` instead. */
  export type Outbound = TransferMetadata$Outbound;
}

export function transferMetadataToJSON(
  transferMetadata: TransferMetadata,
): string {
  return JSON.stringify(
    TransferMetadata$outboundSchema.parse(transferMetadata),
  );
}

export function transferMetadataFromJSON(
  jsonString: string,
): SafeParseResult<TransferMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferMetadata' from JSON`,
  );
}

/** @internal */
export const SourceAddenda$inboundSchema: z.ZodType<
  SourceAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

/** @internal */
export type SourceAddenda$Outbound = {
  values?: Array<string> | undefined;
};

/** @internal */
export const SourceAddenda$outboundSchema: z.ZodType<
  SourceAddenda$Outbound,
  z.ZodTypeDef,
  SourceAddenda
> = z.object({
  values: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceAddenda$ {
  /** @deprecated use `SourceAddenda$inboundSchema` instead. */
  export const inboundSchema = SourceAddenda$inboundSchema;
  /** @deprecated use `SourceAddenda$outboundSchema` instead. */
  export const outboundSchema = SourceAddenda$outboundSchema;
  /** @deprecated use `SourceAddenda$Outbound` instead. */
  export type Outbound = SourceAddenda$Outbound;
}

export function sourceAddendaToJSON(sourceAddenda: SourceAddenda): string {
  return JSON.stringify(SourceAddenda$outboundSchema.parse(sourceAddenda));
}

export function sourceAddendaFromJSON(
  jsonString: string,
): SafeParseResult<SourceAddenda, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SourceAddenda$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SourceAddenda' from JSON`,
  );
}

/** @internal */
export const Source$inboundSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z
  .object({
    addenda: z.lazy(() => SourceAddenda$inboundSchema).optional(),
  });

/** @internal */
export type Source$Outbound = {
  addenda?: SourceAddenda$Outbound | undefined;
};

/** @internal */
export const Source$outboundSchema: z.ZodType<
  Source$Outbound,
  z.ZodTypeDef,
  Source
> = z.object({
  addenda: z.lazy(() => SourceAddenda$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source$ {
  /** @deprecated use `Source$inboundSchema` instead. */
  export const inboundSchema = Source$inboundSchema;
  /** @deprecated use `Source$outboundSchema` instead. */
  export const outboundSchema = Source$outboundSchema;
  /** @deprecated use `Source$Outbound` instead. */
  export type Outbound = Source$Outbound;
}

export function sourceToJSON(source: Source): string {
  return JSON.stringify(Source$outboundSchema.parse(source));
}

export function sourceFromJSON(
  jsonString: string,
): SafeParseResult<Source, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source' from JSON`,
  );
}

/** @internal */
export const DestinationAddenda$inboundSchema: z.ZodType<
  DestinationAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

/** @internal */
export type DestinationAddenda$Outbound = {
  values?: Array<string> | undefined;
};

/** @internal */
export const DestinationAddenda$outboundSchema: z.ZodType<
  DestinationAddenda$Outbound,
  z.ZodTypeDef,
  DestinationAddenda
> = z.object({
  values: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationAddenda$ {
  /** @deprecated use `DestinationAddenda$inboundSchema` instead. */
  export const inboundSchema = DestinationAddenda$inboundSchema;
  /** @deprecated use `DestinationAddenda$outboundSchema` instead. */
  export const outboundSchema = DestinationAddenda$outboundSchema;
  /** @deprecated use `DestinationAddenda$Outbound` instead. */
  export type Outbound = DestinationAddenda$Outbound;
}

export function destinationAddendaToJSON(
  destinationAddenda: DestinationAddenda,
): string {
  return JSON.stringify(
    DestinationAddenda$outboundSchema.parse(destinationAddenda),
  );
}

export function destinationAddendaFromJSON(
  jsonString: string,
): SafeParseResult<DestinationAddenda, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DestinationAddenda$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DestinationAddenda' from JSON`,
  );
}

/** @internal */
export const AchDetailsDestination$inboundSchema: z.ZodType<
  AchDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => DestinationAddenda$inboundSchema).optional(),
});

/** @internal */
export type AchDetailsDestination$Outbound = {
  addenda?: DestinationAddenda$Outbound | undefined;
};

/** @internal */
export const AchDetailsDestination$outboundSchema: z.ZodType<
  AchDetailsDestination$Outbound,
  z.ZodTypeDef,
  AchDetailsDestination
> = z.object({
  addenda: z.lazy(() => DestinationAddenda$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AchDetailsDestination$ {
  /** @deprecated use `AchDetailsDestination$inboundSchema` instead. */
  export const inboundSchema = AchDetailsDestination$inboundSchema;
  /** @deprecated use `AchDetailsDestination$outboundSchema` instead. */
  export const outboundSchema = AchDetailsDestination$outboundSchema;
  /** @deprecated use `AchDetailsDestination$Outbound` instead. */
  export type Outbound = AchDetailsDestination$Outbound;
}

export function achDetailsDestinationToJSON(
  achDetailsDestination: AchDetailsDestination,
): string {
  return JSON.stringify(
    AchDetailsDestination$outboundSchema.parse(achDetailsDestination),
  );
}

export function achDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<AchDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AchDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AchDetailsDestination' from JSON`,
  );
}

/** @internal */
export const AchDetails$inboundSchema: z.ZodType<
  AchDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.lazy(() => Source$inboundSchema).optional(),
  destination: z.lazy(() => AchDetailsDestination$inboundSchema).optional(),
});

/** @internal */
export type AchDetails$Outbound = {
  source?: Source$Outbound | undefined;
  destination?: AchDetailsDestination$Outbound | undefined;
};

/** @internal */
export const AchDetails$outboundSchema: z.ZodType<
  AchDetails$Outbound,
  z.ZodTypeDef,
  AchDetails
> = z.object({
  source: z.lazy(() => Source$outboundSchema).optional(),
  destination: z.lazy(() => AchDetailsDestination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AchDetails$ {
  /** @deprecated use `AchDetails$inboundSchema` instead. */
  export const inboundSchema = AchDetails$inboundSchema;
  /** @deprecated use `AchDetails$outboundSchema` instead. */
  export const outboundSchema = AchDetails$outboundSchema;
  /** @deprecated use `AchDetails$Outbound` instead. */
  export type Outbound = AchDetails$Outbound;
}

export function achDetailsToJSON(achDetails: AchDetails): string {
  return JSON.stringify(AchDetails$outboundSchema.parse(achDetails));
}

export function achDetailsFromJSON(
  jsonString: string,
): SafeParseResult<AchDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AchDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AchDetails' from JSON`,
  );
}

/** @internal */
export const RtpDetailsDestination$inboundSchema: z.ZodType<
  RtpDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
  networkId: z.string().optional(),
  endToEndReferenceId: z.string().optional(),
});

/** @internal */
export type RtpDetailsDestination$Outbound = {
  remittanceData?: string | undefined;
  networkId?: string | undefined;
  endToEndReferenceId?: string | undefined;
};

/** @internal */
export const RtpDetailsDestination$outboundSchema: z.ZodType<
  RtpDetailsDestination$Outbound,
  z.ZodTypeDef,
  RtpDetailsDestination
> = z.object({
  remittanceData: z.string().optional(),
  networkId: z.string().optional(),
  endToEndReferenceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpDetailsDestination$ {
  /** @deprecated use `RtpDetailsDestination$inboundSchema` instead. */
  export const inboundSchema = RtpDetailsDestination$inboundSchema;
  /** @deprecated use `RtpDetailsDestination$outboundSchema` instead. */
  export const outboundSchema = RtpDetailsDestination$outboundSchema;
  /** @deprecated use `RtpDetailsDestination$Outbound` instead. */
  export type Outbound = RtpDetailsDestination$Outbound;
}

export function rtpDetailsDestinationToJSON(
  rtpDetailsDestination: RtpDetailsDestination,
): string {
  return JSON.stringify(
    RtpDetailsDestination$outboundSchema.parse(rtpDetailsDestination),
  );
}

export function rtpDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<RtpDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RtpDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RtpDetailsDestination' from JSON`,
  );
}

/** @internal */
export const RtpDetails$inboundSchema: z.ZodType<
  RtpDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$inboundSchema).optional(),
});

/** @internal */
export type RtpDetails$Outbound = {
  destination?: RtpDetailsDestination$Outbound | undefined;
};

/** @internal */
export const RtpDetails$outboundSchema: z.ZodType<
  RtpDetails$Outbound,
  z.ZodTypeDef,
  RtpDetails
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpDetails$ {
  /** @deprecated use `RtpDetails$inboundSchema` instead. */
  export const inboundSchema = RtpDetails$inboundSchema;
  /** @deprecated use `RtpDetails$outboundSchema` instead. */
  export const outboundSchema = RtpDetails$outboundSchema;
  /** @deprecated use `RtpDetails$Outbound` instead. */
  export type Outbound = RtpDetails$Outbound;
}

export function rtpDetailsToJSON(rtpDetails: RtpDetails): string {
  return JSON.stringify(RtpDetails$outboundSchema.parse(rtpDetails));
}

export function rtpDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RtpDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RtpDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RtpDetails' from JSON`,
  );
}

/** @internal */
export const FedNowDetailsDestination$inboundSchema: z.ZodType<
  FedNowDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
  networkId: z.string().optional(),
  endToEndReferenceId: z.string().optional(),
});

/** @internal */
export type FedNowDetailsDestination$Outbound = {
  remittanceData?: string | undefined;
  networkId?: string | undefined;
  endToEndReferenceId?: string | undefined;
};

/** @internal */
export const FedNowDetailsDestination$outboundSchema: z.ZodType<
  FedNowDetailsDestination$Outbound,
  z.ZodTypeDef,
  FedNowDetailsDestination
> = z.object({
  remittanceData: z.string().optional(),
  networkId: z.string().optional(),
  endToEndReferenceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FedNowDetailsDestination$ {
  /** @deprecated use `FedNowDetailsDestination$inboundSchema` instead. */
  export const inboundSchema = FedNowDetailsDestination$inboundSchema;
  /** @deprecated use `FedNowDetailsDestination$outboundSchema` instead. */
  export const outboundSchema = FedNowDetailsDestination$outboundSchema;
  /** @deprecated use `FedNowDetailsDestination$Outbound` instead. */
  export type Outbound = FedNowDetailsDestination$Outbound;
}

export function fedNowDetailsDestinationToJSON(
  fedNowDetailsDestination: FedNowDetailsDestination,
): string {
  return JSON.stringify(
    FedNowDetailsDestination$outboundSchema.parse(fedNowDetailsDestination),
  );
}

export function fedNowDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<FedNowDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FedNowDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FedNowDetailsDestination' from JSON`,
  );
}

/** @internal */
export const FedNowDetails$inboundSchema: z.ZodType<
  FedNowDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => FedNowDetailsDestination$inboundSchema).optional(),
});

/** @internal */
export type FedNowDetails$Outbound = {
  destination?: FedNowDetailsDestination$Outbound | undefined;
};

/** @internal */
export const FedNowDetails$outboundSchema: z.ZodType<
  FedNowDetails$Outbound,
  z.ZodTypeDef,
  FedNowDetails
> = z.object({
  destination: z.lazy(() => FedNowDetailsDestination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FedNowDetails$ {
  /** @deprecated use `FedNowDetails$inboundSchema` instead. */
  export const inboundSchema = FedNowDetails$inboundSchema;
  /** @deprecated use `FedNowDetails$outboundSchema` instead. */
  export const outboundSchema = FedNowDetails$outboundSchema;
  /** @deprecated use `FedNowDetails$Outbound` instead. */
  export type Outbound = FedNowDetails$Outbound;
}

export function fedNowDetailsToJSON(fedNowDetails: FedNowDetails): string {
  return JSON.stringify(FedNowDetails$outboundSchema.parse(fedNowDetails));
}

export function fedNowDetailsFromJSON(
  jsonString: string,
): SafeParseResult<FedNowDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FedNowDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FedNowDetails' from JSON`,
  );
}

/** @internal */
export const DestinationEnum$inboundSchema: z.ZodNativeEnum<
  typeof DestinationEnum
> = z.nativeEnum(DestinationEnum);

/** @internal */
export const DestinationEnum$outboundSchema: z.ZodNativeEnum<
  typeof DestinationEnum
> = DestinationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationEnum$ {
  /** @deprecated use `DestinationEnum$inboundSchema` instead. */
  export const inboundSchema = DestinationEnum$inboundSchema;
  /** @deprecated use `DestinationEnum$outboundSchema` instead. */
  export const outboundSchema = DestinationEnum$outboundSchema;
}

/** @internal */
export const TransferProcessingChannel$inboundSchema: z.ZodType<
  TransferProcessingChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: DestinationEnum$inboundSchema.optional(),
});

/** @internal */
export type TransferProcessingChannel$Outbound = {
  destination?: string | undefined;
};

/** @internal */
export const TransferProcessingChannel$outboundSchema: z.ZodType<
  TransferProcessingChannel$Outbound,
  z.ZodTypeDef,
  TransferProcessingChannel
> = z.object({
  destination: DestinationEnum$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferProcessingChannel$ {
  /** @deprecated use `TransferProcessingChannel$inboundSchema` instead. */
  export const inboundSchema = TransferProcessingChannel$inboundSchema;
  /** @deprecated use `TransferProcessingChannel$outboundSchema` instead. */
  export const outboundSchema = TransferProcessingChannel$outboundSchema;
  /** @deprecated use `TransferProcessingChannel$Outbound` instead. */
  export type Outbound = TransferProcessingChannel$Outbound;
}

export function transferProcessingChannelToJSON(
  transferProcessingChannel: TransferProcessingChannel,
): string {
  return JSON.stringify(
    TransferProcessingChannel$outboundSchema.parse(transferProcessingChannel),
  );
}

export function transferProcessingChannelFromJSON(
  jsonString: string,
): SafeParseResult<TransferProcessingChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferProcessingChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferProcessingChannel' from JSON`,
  );
}

/** @internal */
export const Transfer$inboundSchema: z.ZodType<
  Transfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => TransferAmount1$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  clearing: z.lazy(() => Clearing$inboundSchema).optional(),
  metadata: z.lazy(() => TransferMetadata$inboundSchema).optional(),
  achDetails: z.lazy(() => AchDetails$inboundSchema).optional(),
  rtpDetails: z.lazy(() => RtpDetails$inboundSchema).optional(),
  fedNowDetails: z.lazy(() => FedNowDetails$inboundSchema).optional(),
  correlationId: z.string().optional(),
  processingChannel: z.lazy(() => TransferProcessingChannel$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type Transfer$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: TransferAmount1$Outbound | undefined;
  created?: string | undefined;
  clearing?: Clearing$Outbound | undefined;
  metadata?: TransferMetadata$Outbound | undefined;
  achDetails?: AchDetails$Outbound | undefined;
  rtpDetails?: RtpDetails$Outbound | undefined;
  fedNowDetails?: FedNowDetails$Outbound | undefined;
  correlationId?: string | undefined;
  processingChannel?: TransferProcessingChannel$Outbound | undefined;
};

/** @internal */
export const Transfer$outboundSchema: z.ZodType<
  Transfer$Outbound,
  z.ZodTypeDef,
  Transfer
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => TransferAmount1$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
  clearing: z.lazy(() => Clearing$outboundSchema).optional(),
  metadata: z.lazy(() => TransferMetadata$outboundSchema).optional(),
  achDetails: z.lazy(() => AchDetails$outboundSchema).optional(),
  rtpDetails: z.lazy(() => RtpDetails$outboundSchema).optional(),
  fedNowDetails: z.lazy(() => FedNowDetails$outboundSchema).optional(),
  correlationId: z.string().optional(),
  processingChannel: z.lazy(() => TransferProcessingChannel$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transfer$ {
  /** @deprecated use `Transfer$inboundSchema` instead. */
  export const inboundSchema = Transfer$inboundSchema;
  /** @deprecated use `Transfer$outboundSchema` instead. */
  export const outboundSchema = Transfer$outboundSchema;
  /** @deprecated use `Transfer$Outbound` instead. */
  export type Outbound = Transfer$Outbound;
}

export function transferToJSON(transfer: Transfer): string {
  return JSON.stringify(Transfer$outboundSchema.parse(transfer));
}

export function transferFromJSON(
  jsonString: string,
): SafeParseResult<Transfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transfer' from JSON`,
  );
}
