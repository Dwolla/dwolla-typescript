/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  ControllerWithPassport,
  ControllerWithPassport$inboundSchema,
  ControllerWithPassport$Outbound,
  ControllerWithPassport$outboundSchema,
} from "./controllerwithpassport.js";
import {
  ControllerWithSsn,
  ControllerWithSsn$inboundSchema,
  ControllerWithSsn$Outbound,
  ControllerWithSsn$outboundSchema,
} from "./controllerwithssn.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ControllerUnion = ControllerWithSsn | ControllerWithPassport;

/**
 * Create a Verified Business customer
 */
export type CreateVerifiedBusinessRequestBody = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName: string;
  type: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  ssn: string;
  dateOfBirth: string;
  businessClassification: string;
  doingBusinessAs?: string | undefined;
  ein: string;
  website?: string | undefined;
  controller: ControllerWithSsn | ControllerWithPassport;
  businessType: string;
};

/** @internal */
export const ControllerUnion$inboundSchema: z.ZodType<
  ControllerUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ControllerWithSsn$inboundSchema,
  ControllerWithPassport$inboundSchema,
]);

/** @internal */
export type ControllerUnion$Outbound =
  | ControllerWithSsn$Outbound
  | ControllerWithPassport$Outbound;

/** @internal */
export const ControllerUnion$outboundSchema: z.ZodType<
  ControllerUnion$Outbound,
  z.ZodTypeDef,
  ControllerUnion
> = z.union([
  ControllerWithSsn$outboundSchema,
  ControllerWithPassport$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControllerUnion$ {
  /** @deprecated use `ControllerUnion$inboundSchema` instead. */
  export const inboundSchema = ControllerUnion$inboundSchema;
  /** @deprecated use `ControllerUnion$outboundSchema` instead. */
  export const outboundSchema = ControllerUnion$outboundSchema;
  /** @deprecated use `ControllerUnion$Outbound` instead. */
  export type Outbound = ControllerUnion$Outbound;
}

export function controllerUnionToJSON(
  controllerUnion: ControllerUnion,
): string {
  return JSON.stringify(ControllerUnion$outboundSchema.parse(controllerUnion));
}

export function controllerUnionFromJSON(
  jsonString: string,
): SafeParseResult<ControllerUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControllerUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControllerUnion' from JSON`,
  );
}

/** @internal */
export const CreateVerifiedBusinessRequestBody$inboundSchema: z.ZodType<
  CreateVerifiedBusinessRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string(),
  type: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  ssn: z.string(),
  dateOfBirth: z.string(),
  businessClassification: z.string(),
  doingBusinessAs: z.string().optional(),
  ein: z.string(),
  website: z.string().optional(),
  controller: z.union([
    ControllerWithSsn$inboundSchema,
    ControllerWithPassport$inboundSchema,
  ]),
  businessType: z.string(),
});

/** @internal */
export type CreateVerifiedBusinessRequestBody$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName: string;
  type: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  ssn: string;
  dateOfBirth: string;
  businessClassification: string;
  doingBusinessAs?: string | undefined;
  ein: string;
  website?: string | undefined;
  controller: ControllerWithSsn$Outbound | ControllerWithPassport$Outbound;
  businessType: string;
};

/** @internal */
export const CreateVerifiedBusinessRequestBody$outboundSchema: z.ZodType<
  CreateVerifiedBusinessRequestBody$Outbound,
  z.ZodTypeDef,
  CreateVerifiedBusinessRequestBody
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string(),
  type: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  ssn: z.string(),
  dateOfBirth: z.string(),
  businessClassification: z.string(),
  doingBusinessAs: z.string().optional(),
  ein: z.string(),
  website: z.string().optional(),
  controller: z.union([
    ControllerWithSsn$outboundSchema,
    ControllerWithPassport$outboundSchema,
  ]),
  businessType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessRequestBody$ {
  /** @deprecated use `CreateVerifiedBusinessRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateVerifiedBusinessRequestBody$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessRequestBody$outboundSchema;
  /** @deprecated use `CreateVerifiedBusinessRequestBody$Outbound` instead. */
  export type Outbound = CreateVerifiedBusinessRequestBody$Outbound;
}

export function createVerifiedBusinessRequestBodyToJSON(
  createVerifiedBusinessRequestBody: CreateVerifiedBusinessRequestBody,
): string {
  return JSON.stringify(
    CreateVerifiedBusinessRequestBody$outboundSchema.parse(
      createVerifiedBusinessRequestBody,
    ),
  );
}

export function createVerifiedBusinessRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateVerifiedBusinessRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateVerifiedBusinessRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedBusinessRequestBody' from JSON`,
  );
}
