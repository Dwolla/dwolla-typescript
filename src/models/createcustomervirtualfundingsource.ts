/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of funding source. Must be set to "virtual" for VAN creation.
 */
export const Type = {
  Virtual: "virtual",
} as const;
/**
 * Type of funding source. Must be set to "virtual" for VAN creation.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * Type of bank account. Must be "checking" for Virtual Account Numbers.
 */
export const CreateCustomerVirtualFundingSourceBankAccountType = {
  Checking: "checking",
} as const;
/**
 * Type of bank account. Must be "checking" for Virtual Account Numbers.
 */
export type CreateCustomerVirtualFundingSourceBankAccountType = ClosedEnum<
  typeof CreateCustomerVirtualFundingSourceBankAccountType
>;

/**
 * Schema for creating a Virtual Account Number (VAN) . VANs are unique account numbers for receiving external transactions into a Dwolla Balance.
 */
export type CreateCustomerVirtualFundingSource = {
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * Type of funding source. Must be set to "virtual" for VAN creation.
   */
  type: Type;
  /**
   * Type of bank account. Must be "checking" for Virtual Account Numbers.
   */
  bankAccountType: CreateCustomerVirtualFundingSourceBankAccountType;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const CreateCustomerVirtualFundingSourceBankAccountType$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerVirtualFundingSourceBankAccountType> = z
    .nativeEnum(CreateCustomerVirtualFundingSourceBankAccountType);

/** @internal */
export const CreateCustomerVirtualFundingSourceBankAccountType$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerVirtualFundingSourceBankAccountType> =
    CreateCustomerVirtualFundingSourceBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerVirtualFundingSourceBankAccountType$ {
  /** @deprecated use `CreateCustomerVirtualFundingSourceBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerVirtualFundingSourceBankAccountType$inboundSchema;
  /** @deprecated use `CreateCustomerVirtualFundingSourceBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerVirtualFundingSourceBankAccountType$outboundSchema;
}

/** @internal */
export const CreateCustomerVirtualFundingSource$inboundSchema: z.ZodType<
  CreateCustomerVirtualFundingSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: Type$inboundSchema,
  bankAccountType:
    CreateCustomerVirtualFundingSourceBankAccountType$inboundSchema,
});

/** @internal */
export type CreateCustomerVirtualFundingSource$Outbound = {
  name: string;
  type: string;
  bankAccountType: string;
};

/** @internal */
export const CreateCustomerVirtualFundingSource$outboundSchema: z.ZodType<
  CreateCustomerVirtualFundingSource$Outbound,
  z.ZodTypeDef,
  CreateCustomerVirtualFundingSource
> = z.object({
  name: z.string(),
  type: Type$outboundSchema,
  bankAccountType:
    CreateCustomerVirtualFundingSourceBankAccountType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerVirtualFundingSource$ {
  /** @deprecated use `CreateCustomerVirtualFundingSource$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerVirtualFundingSource$inboundSchema;
  /** @deprecated use `CreateCustomerVirtualFundingSource$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerVirtualFundingSource$outboundSchema;
  /** @deprecated use `CreateCustomerVirtualFundingSource$Outbound` instead. */
  export type Outbound = CreateCustomerVirtualFundingSource$Outbound;
}

export function createCustomerVirtualFundingSourceToJSON(
  createCustomerVirtualFundingSource: CreateCustomerVirtualFundingSource,
): string {
  return JSON.stringify(
    CreateCustomerVirtualFundingSource$outboundSchema.parse(
      createCustomerVirtualFundingSource,
    ),
  );
}

export function createCustomerVirtualFundingSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerVirtualFundingSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerVirtualFundingSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerVirtualFundingSource' from JSON`,
  );
}
