/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawInvalidWireBeneficiaryCountryErrorLinks = {};

export type WithdrawInvalidWireBeneficiaryCountryErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawInvalidWireBeneficiaryCountryErrorLinks | undefined;
};

export type WithdrawInvalidWireBeneficiaryCountryErrorEmbedded = {
  errors?: Array<WithdrawInvalidWireBeneficiaryCountryErrorError> | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorLinks$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WithdrawInvalidWireBeneficiaryCountryErrorLinks$Outbound = {};

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorLinks$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorLinks$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryCountryErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryCountryErrorLinks$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorLinks$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryCountryErrorLinks$Outbound;
}

export function withdrawInvalidWireBeneficiaryCountryErrorLinksToJSON(
  withdrawInvalidWireBeneficiaryCountryErrorLinks:
    WithdrawInvalidWireBeneficiaryCountryErrorLinks,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryCountryErrorLinks$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryCountryErrorLinks,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryCountryErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryCountryErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryCountryErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryCountryErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorError$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      WithdrawInvalidWireBeneficiaryCountryErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type WithdrawInvalidWireBeneficiaryCountryErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WithdrawInvalidWireBeneficiaryCountryErrorLinks$Outbound | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorError$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorError$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryCountryErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      WithdrawInvalidWireBeneficiaryCountryErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryCountryErrorError$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorError$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorError$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorError$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryCountryErrorError$Outbound;
}

export function withdrawInvalidWireBeneficiaryCountryErrorErrorToJSON(
  withdrawInvalidWireBeneficiaryCountryErrorError:
    WithdrawInvalidWireBeneficiaryCountryErrorError,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryCountryErrorError$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryCountryErrorError,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryCountryErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryCountryErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryCountryErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryCountryErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireBeneficiaryCountryErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$Outbound = {
  errors?:
    | Array<WithdrawInvalidWireBeneficiaryCountryErrorError$Outbound>
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireBeneficiaryCountryErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$Outbound;
}

export function withdrawInvalidWireBeneficiaryCountryErrorEmbeddedToJSON(
  withdrawInvalidWireBeneficiaryCountryErrorEmbedded:
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryCountryErrorEmbedded,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryCountryErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryCountryErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryCountryErrorEmbedded' from JSON`,
  );
}
