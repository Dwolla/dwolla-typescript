/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidFacilitatorFeeCollectFromErrorLinks = {};

export type InvalidFacilitatorFeeCollectFromErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidFacilitatorFeeCollectFromErrorLinks | undefined;
};

export type InvalidFacilitatorFeeCollectFromErrorEmbedded = {
  errors?: Array<InvalidFacilitatorFeeCollectFromErrorError> | undefined;
};

export type InvalidFacilitatorFeeCollectFromError = {
  code: string;
  message: string;
  embedded?: InvalidFacilitatorFeeCollectFromErrorEmbedded | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorLinks$inboundSchema:
  z.ZodType<InvalidFacilitatorFeeCollectFromErrorLinks, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type InvalidFacilitatorFeeCollectFromErrorLinks$Outbound = {};

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorLinks$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromErrorLinks$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromErrorLinks$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromErrorLinks$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorLinks$Outbound` instead. */
  export type Outbound = InvalidFacilitatorFeeCollectFromErrorLinks$Outbound;
}

export function invalidFacilitatorFeeCollectFromErrorLinksToJSON(
  invalidFacilitatorFeeCollectFromErrorLinks:
    InvalidFacilitatorFeeCollectFromErrorLinks,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromErrorLinks$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromErrorLinks,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorError$inboundSchema:
  z.ZodType<InvalidFacilitatorFeeCollectFromErrorError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string().optional(),
      message: z.string().optional(),
      path: z.string().optional(),
      _links: z.lazy(() =>
        InvalidFacilitatorFeeCollectFromErrorLinks$inboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        "_links": "links",
      });
    });

/** @internal */
export type InvalidFacilitatorFeeCollectFromErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidFacilitatorFeeCollectFromErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorError$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromErrorError$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidFacilitatorFeeCollectFromErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromErrorError$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromErrorError$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromErrorError$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorError$Outbound` instead. */
  export type Outbound = InvalidFacilitatorFeeCollectFromErrorError$Outbound;
}

export function invalidFacilitatorFeeCollectFromErrorErrorToJSON(
  invalidFacilitatorFeeCollectFromErrorError:
    InvalidFacilitatorFeeCollectFromErrorError,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromErrorError$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromErrorError,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidFacilitatorFeeCollectFromErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type InvalidFacilitatorFeeCollectFromErrorEmbedded$Outbound = {
  errors?:
    | Array<InvalidFacilitatorFeeCollectFromErrorError$Outbound>
    | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidFacilitatorFeeCollectFromErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidFacilitatorFeeCollectFromErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidFacilitatorFeeCollectFromErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromErrorEmbedded$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidFacilitatorFeeCollectFromErrorEmbedded$Outbound;
}

export function invalidFacilitatorFeeCollectFromErrorEmbeddedToJSON(
  invalidFacilitatorFeeCollectFromErrorEmbedded:
    InvalidFacilitatorFeeCollectFromErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromErrorEmbedded$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromErrorEmbedded,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidFacilitatorFeeCollectFromErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const InvalidFacilitatorFeeCollectFromError$inboundSchema: z.ZodType<
  InvalidFacilitatorFeeCollectFromError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() =>
    InvalidFacilitatorFeeCollectFromErrorEmbedded$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type InvalidFacilitatorFeeCollectFromError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | InvalidFacilitatorFeeCollectFromErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const InvalidFacilitatorFeeCollectFromError$outboundSchema: z.ZodType<
  InvalidFacilitatorFeeCollectFromError$Outbound,
  z.ZodTypeDef,
  InvalidFacilitatorFeeCollectFromError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() =>
    InvalidFacilitatorFeeCollectFromErrorEmbedded$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidFacilitatorFeeCollectFromError$ {
  /** @deprecated use `InvalidFacilitatorFeeCollectFromError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidFacilitatorFeeCollectFromError$inboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidFacilitatorFeeCollectFromError$outboundSchema;
  /** @deprecated use `InvalidFacilitatorFeeCollectFromError$Outbound` instead. */
  export type Outbound = InvalidFacilitatorFeeCollectFromError$Outbound;
}

export function invalidFacilitatorFeeCollectFromErrorToJSON(
  invalidFacilitatorFeeCollectFromError: InvalidFacilitatorFeeCollectFromError,
): string {
  return JSON.stringify(
    InvalidFacilitatorFeeCollectFromError$outboundSchema.parse(
      invalidFacilitatorFeeCollectFromError,
    ),
  );
}

export function invalidFacilitatorFeeCollectFromErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidFacilitatorFeeCollectFromError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidFacilitatorFeeCollectFromError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidFacilitatorFeeCollectFromError' from JSON`,
  );
}
