/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SenderRestrictedErrorLinks = {};

export type SenderRestrictedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: SenderRestrictedErrorLinks | undefined;
};

export type SenderRestrictedErrorEmbedded = {
  errors?: Array<SenderRestrictedErrorError> | undefined;
};

export type SenderRestrictedError = {
  code: string;
  message: string;
  embedded?: SenderRestrictedErrorEmbedded | undefined;
};

/** @internal */
export const SenderRestrictedErrorLinks$inboundSchema: z.ZodType<
  SenderRestrictedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type SenderRestrictedErrorLinks$Outbound = {};

/** @internal */
export const SenderRestrictedErrorLinks$outboundSchema: z.ZodType<
  SenderRestrictedErrorLinks$Outbound,
  z.ZodTypeDef,
  SenderRestrictedErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderRestrictedErrorLinks$ {
  /** @deprecated use `SenderRestrictedErrorLinks$inboundSchema` instead. */
  export const inboundSchema = SenderRestrictedErrorLinks$inboundSchema;
  /** @deprecated use `SenderRestrictedErrorLinks$outboundSchema` instead. */
  export const outboundSchema = SenderRestrictedErrorLinks$outboundSchema;
  /** @deprecated use `SenderRestrictedErrorLinks$Outbound` instead. */
  export type Outbound = SenderRestrictedErrorLinks$Outbound;
}

export function senderRestrictedErrorLinksToJSON(
  senderRestrictedErrorLinks: SenderRestrictedErrorLinks,
): string {
  return JSON.stringify(
    SenderRestrictedErrorLinks$outboundSchema.parse(senderRestrictedErrorLinks),
  );
}

export function senderRestrictedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<SenderRestrictedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderRestrictedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderRestrictedErrorLinks' from JSON`,
  );
}

/** @internal */
export const SenderRestrictedErrorError$inboundSchema: z.ZodType<
  SenderRestrictedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => SenderRestrictedErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type SenderRestrictedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: SenderRestrictedErrorLinks$Outbound | undefined;
};

/** @internal */
export const SenderRestrictedErrorError$outboundSchema: z.ZodType<
  SenderRestrictedErrorError$Outbound,
  z.ZodTypeDef,
  SenderRestrictedErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => SenderRestrictedErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderRestrictedErrorError$ {
  /** @deprecated use `SenderRestrictedErrorError$inboundSchema` instead. */
  export const inboundSchema = SenderRestrictedErrorError$inboundSchema;
  /** @deprecated use `SenderRestrictedErrorError$outboundSchema` instead. */
  export const outboundSchema = SenderRestrictedErrorError$outboundSchema;
  /** @deprecated use `SenderRestrictedErrorError$Outbound` instead. */
  export type Outbound = SenderRestrictedErrorError$Outbound;
}

export function senderRestrictedErrorErrorToJSON(
  senderRestrictedErrorError: SenderRestrictedErrorError,
): string {
  return JSON.stringify(
    SenderRestrictedErrorError$outboundSchema.parse(senderRestrictedErrorError),
  );
}

export function senderRestrictedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<SenderRestrictedErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderRestrictedErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderRestrictedErrorError' from JSON`,
  );
}

/** @internal */
export const SenderRestrictedErrorEmbedded$inboundSchema: z.ZodType<
  SenderRestrictedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => SenderRestrictedErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type SenderRestrictedErrorEmbedded$Outbound = {
  errors?: Array<SenderRestrictedErrorError$Outbound> | undefined;
};

/** @internal */
export const SenderRestrictedErrorEmbedded$outboundSchema: z.ZodType<
  SenderRestrictedErrorEmbedded$Outbound,
  z.ZodTypeDef,
  SenderRestrictedErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => SenderRestrictedErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderRestrictedErrorEmbedded$ {
  /** @deprecated use `SenderRestrictedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = SenderRestrictedErrorEmbedded$inboundSchema;
  /** @deprecated use `SenderRestrictedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = SenderRestrictedErrorEmbedded$outboundSchema;
  /** @deprecated use `SenderRestrictedErrorEmbedded$Outbound` instead. */
  export type Outbound = SenderRestrictedErrorEmbedded$Outbound;
}

export function senderRestrictedErrorEmbeddedToJSON(
  senderRestrictedErrorEmbedded: SenderRestrictedErrorEmbedded,
): string {
  return JSON.stringify(
    SenderRestrictedErrorEmbedded$outboundSchema.parse(
      senderRestrictedErrorEmbedded,
    ),
  );
}

export function senderRestrictedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<SenderRestrictedErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderRestrictedErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderRestrictedErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const SenderRestrictedError$inboundSchema: z.ZodType<
  SenderRestrictedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => SenderRestrictedErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type SenderRestrictedError$Outbound = {
  code: string;
  message: string;
  _embedded?: SenderRestrictedErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const SenderRestrictedError$outboundSchema: z.ZodType<
  SenderRestrictedError$Outbound,
  z.ZodTypeDef,
  SenderRestrictedError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => SenderRestrictedErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SenderRestrictedError$ {
  /** @deprecated use `SenderRestrictedError$inboundSchema` instead. */
  export const inboundSchema = SenderRestrictedError$inboundSchema;
  /** @deprecated use `SenderRestrictedError$outboundSchema` instead. */
  export const outboundSchema = SenderRestrictedError$outboundSchema;
  /** @deprecated use `SenderRestrictedError$Outbound` instead. */
  export type Outbound = SenderRestrictedError$Outbound;
}

export function senderRestrictedErrorToJSON(
  senderRestrictedError: SenderRestrictedError,
): string {
  return JSON.stringify(
    SenderRestrictedError$outboundSchema.parse(senderRestrictedError),
  );
}

export function senderRestrictedErrorFromJSON(
  jsonString: string,
): SafeParseResult<SenderRestrictedError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SenderRestrictedError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SenderRestrictedError' from JSON`,
  );
}
