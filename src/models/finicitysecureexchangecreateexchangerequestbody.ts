/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { RFCDate } from "../types/rfcdate.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner = {
  href?: string | undefined;
};

export type FinicitySecureExchangeCreateExchangeRequestBodyLinks = {
  exchangePartner?:
    | FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner
    | undefined;
};

export type AccessPeriod = {
  type?: string | undefined;
  startTime?: RFCDate | undefined;
  endTime?: Date | undefined;
};

export type Product = {
  product?: string | undefined;
  accountId?: string | undefined;
  accessPeriod?: AccessPeriod | undefined;
};

export type Finicity = {
  profile?: number | undefined;
  version?: string | undefined;
  receiptId?: string | undefined;
  receiptVersion?: string | undefined;
  customerId?: string | undefined;
  partnerId?: number | undefined;
  products?: Array<Product> | undefined;
  timestamp?: Date | undefined;
};

export type FinicitySecureExchangeCreateExchangeRequestBody = {
  links?: FinicitySecureExchangeCreateExchangeRequestBodyLinks | undefined;
  finicity?: Finicity | undefined;
};

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string().optional(),
  });

/** @internal */
export type FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound =
  {
    href?: string | undefined;
  };

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound,
    z.ZodTypeDef,
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner
  > = z.object({
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$ {
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema` instead. */
  export const inboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema` instead. */
  export const outboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound` instead. */
  export type Outbound =
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound;
}

export function finicitySecureExchangeCreateExchangeRequestBodyExchangePartnerToJSON(
  finicitySecureExchangeCreateExchangeRequestBodyExchangePartner:
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner,
): string {
  return JSON.stringify(
    FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
      .parse(finicitySecureExchangeCreateExchangeRequestBodyExchangePartner),
  );
}

export function finicitySecureExchangeCreateExchangeRequestBodyExchangePartnerFromJSON(
  jsonString: string,
): SafeParseResult<
  FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner' from JSON`,
  );
}

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBodyLinks$inboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBodyLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "exchange-partner": z.lazy(() =>
      FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "exchange-partner": "exchangePartner",
    });
  });

/** @internal */
export type FinicitySecureExchangeCreateExchangeRequestBodyLinks$Outbound = {
  "exchange-partner"?:
    | FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound
    | undefined;
};

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBodyLinks$outboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBodyLinks$Outbound,
    z.ZodTypeDef,
    FinicitySecureExchangeCreateExchangeRequestBodyLinks
  > = z.object({
    exchangePartner: z.lazy(() =>
      FinicitySecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      exchangePartner: "exchange-partner",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinicitySecureExchangeCreateExchangeRequestBodyLinks$ {
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyLinks$inboundSchema` instead. */
  export const inboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBodyLinks$inboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyLinks$outboundSchema` instead. */
  export const outboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBodyLinks$outboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBodyLinks$Outbound` instead. */
  export type Outbound =
    FinicitySecureExchangeCreateExchangeRequestBodyLinks$Outbound;
}

export function finicitySecureExchangeCreateExchangeRequestBodyLinksToJSON(
  finicitySecureExchangeCreateExchangeRequestBodyLinks:
    FinicitySecureExchangeCreateExchangeRequestBodyLinks,
): string {
  return JSON.stringify(
    FinicitySecureExchangeCreateExchangeRequestBodyLinks$outboundSchema.parse(
      finicitySecureExchangeCreateExchangeRequestBodyLinks,
    ),
  );
}

export function finicitySecureExchangeCreateExchangeRequestBodyLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  FinicitySecureExchangeCreateExchangeRequestBodyLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FinicitySecureExchangeCreateExchangeRequestBodyLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FinicitySecureExchangeCreateExchangeRequestBodyLinks' from JSON`,
  );
}

/** @internal */
export const AccessPeriod$inboundSchema: z.ZodType<
  AccessPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string().optional(),
  startTime: z.string().transform(v => new RFCDate(v)).optional(),
  endTime: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type AccessPeriod$Outbound = {
  type?: string | undefined;
  startTime?: string | undefined;
  endTime?: string | undefined;
};

/** @internal */
export const AccessPeriod$outboundSchema: z.ZodType<
  AccessPeriod$Outbound,
  z.ZodTypeDef,
  AccessPeriod
> = z.object({
  type: z.string().optional(),
  startTime: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  endTime: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessPeriod$ {
  /** @deprecated use `AccessPeriod$inboundSchema` instead. */
  export const inboundSchema = AccessPeriod$inboundSchema;
  /** @deprecated use `AccessPeriod$outboundSchema` instead. */
  export const outboundSchema = AccessPeriod$outboundSchema;
  /** @deprecated use `AccessPeriod$Outbound` instead. */
  export type Outbound = AccessPeriod$Outbound;
}

export function accessPeriodToJSON(accessPeriod: AccessPeriod): string {
  return JSON.stringify(AccessPeriod$outboundSchema.parse(accessPeriod));
}

export function accessPeriodFromJSON(
  jsonString: string,
): SafeParseResult<AccessPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessPeriod' from JSON`,
  );
}

/** @internal */
export const Product$inboundSchema: z.ZodType<Product, z.ZodTypeDef, unknown> =
  z.object({
    product: z.string().optional(),
    accountId: z.string().optional(),
    accessPeriod: z.lazy(() => AccessPeriod$inboundSchema).optional(),
  });

/** @internal */
export type Product$Outbound = {
  product?: string | undefined;
  accountId?: string | undefined;
  accessPeriod?: AccessPeriod$Outbound | undefined;
};

/** @internal */
export const Product$outboundSchema: z.ZodType<
  Product$Outbound,
  z.ZodTypeDef,
  Product
> = z.object({
  product: z.string().optional(),
  accountId: z.string().optional(),
  accessPeriod: z.lazy(() => AccessPeriod$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Product$ {
  /** @deprecated use `Product$inboundSchema` instead. */
  export const inboundSchema = Product$inboundSchema;
  /** @deprecated use `Product$outboundSchema` instead. */
  export const outboundSchema = Product$outboundSchema;
  /** @deprecated use `Product$Outbound` instead. */
  export type Outbound = Product$Outbound;
}

export function productToJSON(product: Product): string {
  return JSON.stringify(Product$outboundSchema.parse(product));
}

export function productFromJSON(
  jsonString: string,
): SafeParseResult<Product, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Product$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Product' from JSON`,
  );
}

/** @internal */
export const Finicity$inboundSchema: z.ZodType<
  Finicity,
  z.ZodTypeDef,
  unknown
> = z.object({
  profile: z.number().int().optional(),
  version: z.string().optional(),
  receiptId: z.string().optional(),
  receiptVersion: z.string().optional(),
  customerId: z.string().optional(),
  partnerId: z.number().int().optional(),
  products: z.array(z.lazy(() => Product$inboundSchema)).optional(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type Finicity$Outbound = {
  profile?: number | undefined;
  version?: string | undefined;
  receiptId?: string | undefined;
  receiptVersion?: string | undefined;
  customerId?: string | undefined;
  partnerId?: number | undefined;
  products?: Array<Product$Outbound> | undefined;
  timestamp?: string | undefined;
};

/** @internal */
export const Finicity$outboundSchema: z.ZodType<
  Finicity$Outbound,
  z.ZodTypeDef,
  Finicity
> = z.object({
  profile: z.number().int().optional(),
  version: z.string().optional(),
  receiptId: z.string().optional(),
  receiptVersion: z.string().optional(),
  customerId: z.string().optional(),
  partnerId: z.number().int().optional(),
  products: z.array(z.lazy(() => Product$outboundSchema)).optional(),
  timestamp: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Finicity$ {
  /** @deprecated use `Finicity$inboundSchema` instead. */
  export const inboundSchema = Finicity$inboundSchema;
  /** @deprecated use `Finicity$outboundSchema` instead. */
  export const outboundSchema = Finicity$outboundSchema;
  /** @deprecated use `Finicity$Outbound` instead. */
  export type Outbound = Finicity$Outbound;
}

export function finicityToJSON(finicity: Finicity): string {
  return JSON.stringify(Finicity$outboundSchema.parse(finicity));
}

export function finicityFromJSON(
  jsonString: string,
): SafeParseResult<Finicity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Finicity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Finicity' from JSON`,
  );
}

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _links: z.lazy(() =>
      FinicitySecureExchangeCreateExchangeRequestBodyLinks$inboundSchema
    ).optional(),
    finicity: z.lazy(() => Finicity$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type FinicitySecureExchangeCreateExchangeRequestBody$Outbound = {
  _links?:
    | FinicitySecureExchangeCreateExchangeRequestBodyLinks$Outbound
    | undefined;
  finicity?: Finicity$Outbound | undefined;
};

/** @internal */
export const FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema:
  z.ZodType<
    FinicitySecureExchangeCreateExchangeRequestBody$Outbound,
    z.ZodTypeDef,
    FinicitySecureExchangeCreateExchangeRequestBody
  > = z.object({
    links: z.lazy(() =>
      FinicitySecureExchangeCreateExchangeRequestBodyLinks$outboundSchema
    ).optional(),
    finicity: z.lazy(() => Finicity$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FinicitySecureExchangeCreateExchangeRequestBody$ {
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema;
  /** @deprecated use `FinicitySecureExchangeCreateExchangeRequestBody$Outbound` instead. */
  export type Outbound =
    FinicitySecureExchangeCreateExchangeRequestBody$Outbound;
}

export function finicitySecureExchangeCreateExchangeRequestBodyToJSON(
  finicitySecureExchangeCreateExchangeRequestBody:
    FinicitySecureExchangeCreateExchangeRequestBody,
): string {
  return JSON.stringify(
    FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema.parse(
      finicitySecureExchangeCreateExchangeRequestBody,
    ),
  );
}

export function finicitySecureExchangeCreateExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FinicitySecureExchangeCreateExchangeRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FinicitySecureExchangeCreateExchangeRequestBody' from JSON`,
  );
}
