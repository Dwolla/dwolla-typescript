/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawInvalidWireBeneficiaryRegionErrorLinks = {};

export type WithdrawInvalidWireBeneficiaryRegionErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawInvalidWireBeneficiaryRegionErrorLinks | undefined;
};

export type WithdrawInvalidWireBeneficiaryRegionErrorEmbedded = {
  errors?: Array<WithdrawInvalidWireBeneficiaryRegionErrorError> | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorLinks$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WithdrawInvalidWireBeneficiaryRegionErrorLinks$Outbound = {};

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorLinks$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorLinks$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryRegionErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryRegionErrorLinks$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorLinks$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryRegionErrorLinks$Outbound;
}

export function withdrawInvalidWireBeneficiaryRegionErrorLinksToJSON(
  withdrawInvalidWireBeneficiaryRegionErrorLinks:
    WithdrawInvalidWireBeneficiaryRegionErrorLinks,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryRegionErrorLinks$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryRegionErrorLinks,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryRegionErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryRegionErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryRegionErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryRegionErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorError$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      WithdrawInvalidWireBeneficiaryRegionErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type WithdrawInvalidWireBeneficiaryRegionErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WithdrawInvalidWireBeneficiaryRegionErrorLinks$Outbound | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorError$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorError$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryRegionErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      WithdrawInvalidWireBeneficiaryRegionErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryRegionErrorError$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorError$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorError$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorError$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryRegionErrorError$Outbound;
}

export function withdrawInvalidWireBeneficiaryRegionErrorErrorToJSON(
  withdrawInvalidWireBeneficiaryRegionErrorError:
    WithdrawInvalidWireBeneficiaryRegionErrorError,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryRegionErrorError$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryRegionErrorError,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryRegionErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryRegionErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryRegionErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryRegionErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireBeneficiaryRegionErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$Outbound = {
  errors?:
    | Array<WithdrawInvalidWireBeneficiaryRegionErrorError$Outbound>
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireBeneficiaryRegionErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$Outbound;
}

export function withdrawInvalidWireBeneficiaryRegionErrorEmbeddedToJSON(
  withdrawInvalidWireBeneficiaryRegionErrorEmbedded:
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$outboundSchema.parse(
      withdrawInvalidWireBeneficiaryRegionErrorEmbedded,
    ),
  );
}

export function withdrawInvalidWireBeneficiaryRegionErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireBeneficiaryRegionErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireBeneficiaryRegionErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireBeneficiaryRegionErrorEmbedded' from JSON`,
  );
}
