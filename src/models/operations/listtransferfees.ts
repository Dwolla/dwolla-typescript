/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListTransferFeesRequest = {
  /**
   * ID of transfer to retrieve fees for
   */
  id: string;
};

export type ListTransferFeesAmount = {
  value?: string | undefined;
  currency?: string | undefined;
};

export type Transaction = {
  links?: { [k: string]: models.HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: ListTransferFeesAmount | undefined;
  created?: Date | undefined;
};

/**
 * successful operation
 */
export type ListTransferFeesResponse = {
  transactions?: Array<Transaction> | undefined;
  total?: string | undefined;
};

/** @internal */
export const ListTransferFeesRequest$inboundSchema: z.ZodType<
  ListTransferFeesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ListTransferFeesRequest$Outbound = {
  id: string;
};

/** @internal */
export const ListTransferFeesRequest$outboundSchema: z.ZodType<
  ListTransferFeesRequest$Outbound,
  z.ZodTypeDef,
  ListTransferFeesRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransferFeesRequest$ {
  /** @deprecated use `ListTransferFeesRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransferFeesRequest$inboundSchema;
  /** @deprecated use `ListTransferFeesRequest$outboundSchema` instead. */
  export const outboundSchema = ListTransferFeesRequest$outboundSchema;
  /** @deprecated use `ListTransferFeesRequest$Outbound` instead. */
  export type Outbound = ListTransferFeesRequest$Outbound;
}

export function listTransferFeesRequestToJSON(
  listTransferFeesRequest: ListTransferFeesRequest,
): string {
  return JSON.stringify(
    ListTransferFeesRequest$outboundSchema.parse(listTransferFeesRequest),
  );
}

export function listTransferFeesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransferFeesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransferFeesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransferFeesRequest' from JSON`,
  );
}

/** @internal */
export const ListTransferFeesAmount$inboundSchema: z.ZodType<
  ListTransferFeesAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type ListTransferFeesAmount$Outbound = {
  value?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const ListTransferFeesAmount$outboundSchema: z.ZodType<
  ListTransferFeesAmount$Outbound,
  z.ZodTypeDef,
  ListTransferFeesAmount
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransferFeesAmount$ {
  /** @deprecated use `ListTransferFeesAmount$inboundSchema` instead. */
  export const inboundSchema = ListTransferFeesAmount$inboundSchema;
  /** @deprecated use `ListTransferFeesAmount$outboundSchema` instead. */
  export const outboundSchema = ListTransferFeesAmount$outboundSchema;
  /** @deprecated use `ListTransferFeesAmount$Outbound` instead. */
  export type Outbound = ListTransferFeesAmount$Outbound;
}

export function listTransferFeesAmountToJSON(
  listTransferFeesAmount: ListTransferFeesAmount,
): string {
  return JSON.stringify(
    ListTransferFeesAmount$outboundSchema.parse(listTransferFeesAmount),
  );
}

export function listTransferFeesAmountFromJSON(
  jsonString: string,
): SafeParseResult<ListTransferFeesAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransferFeesAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransferFeesAmount' from JSON`,
  );
}

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(models.HalLink$inboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => ListTransferFeesAmount$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type Transaction$Outbound = {
  _links?: { [k: string]: models.HalLink$Outbound } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: ListTransferFeesAmount$Outbound | undefined;
  created?: string | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  links: z.record(models.HalLink$outboundSchema).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
  amount: z.lazy(() => ListTransferFeesAmount$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}

/** @internal */
export const ListTransferFeesResponse$inboundSchema: z.ZodType<
  ListTransferFeesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactions: z.array(z.lazy(() => Transaction$inboundSchema)).optional(),
  total: z.string().optional(),
});

/** @internal */
export type ListTransferFeesResponse$Outbound = {
  transactions?: Array<Transaction$Outbound> | undefined;
  total?: string | undefined;
};

/** @internal */
export const ListTransferFeesResponse$outboundSchema: z.ZodType<
  ListTransferFeesResponse$Outbound,
  z.ZodTypeDef,
  ListTransferFeesResponse
> = z.object({
  transactions: z.array(z.lazy(() => Transaction$outboundSchema)).optional(),
  total: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransferFeesResponse$ {
  /** @deprecated use `ListTransferFeesResponse$inboundSchema` instead. */
  export const inboundSchema = ListTransferFeesResponse$inboundSchema;
  /** @deprecated use `ListTransferFeesResponse$outboundSchema` instead. */
  export const outboundSchema = ListTransferFeesResponse$outboundSchema;
  /** @deprecated use `ListTransferFeesResponse$Outbound` instead. */
  export type Outbound = ListTransferFeesResponse$Outbound;
}

export function listTransferFeesResponseToJSON(
  listTransferFeesResponse: ListTransferFeesResponse,
): string {
  return JSON.stringify(
    ListTransferFeesResponse$outboundSchema.parse(listTransferFeesResponse),
  );
}

export function listTransferFeesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTransferFeesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransferFeesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransferFeesResponse' from JSON`,
  );
}
