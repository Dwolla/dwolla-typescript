/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListBeneficialOwnersForCustomerRequest = {
  /**
   * Customer unique identifier
   */
  id: string;
};

/** @internal */
export const ListBeneficialOwnersForCustomerRequest$inboundSchema: z.ZodType<
  ListBeneficialOwnersForCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type ListBeneficialOwnersForCustomerRequest$Outbound = {
  id: string;
};

/** @internal */
export const ListBeneficialOwnersForCustomerRequest$outboundSchema: z.ZodType<
  ListBeneficialOwnersForCustomerRequest$Outbound,
  z.ZodTypeDef,
  ListBeneficialOwnersForCustomerRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListBeneficialOwnersForCustomerRequest$ {
  /** @deprecated use `ListBeneficialOwnersForCustomerRequest$inboundSchema` instead. */
  export const inboundSchema =
    ListBeneficialOwnersForCustomerRequest$inboundSchema;
  /** @deprecated use `ListBeneficialOwnersForCustomerRequest$outboundSchema` instead. */
  export const outboundSchema =
    ListBeneficialOwnersForCustomerRequest$outboundSchema;
  /** @deprecated use `ListBeneficialOwnersForCustomerRequest$Outbound` instead. */
  export type Outbound = ListBeneficialOwnersForCustomerRequest$Outbound;
}

export function listBeneficialOwnersForCustomerRequestToJSON(
  listBeneficialOwnersForCustomerRequest:
    ListBeneficialOwnersForCustomerRequest,
): string {
  return JSON.stringify(
    ListBeneficialOwnersForCustomerRequest$outboundSchema.parse(
      listBeneficialOwnersForCustomerRequest,
    ),
  );
}

export function listBeneficialOwnersForCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListBeneficialOwnersForCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListBeneficialOwnersForCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListBeneficialOwnersForCustomerRequest' from JSON`,
  );
}
