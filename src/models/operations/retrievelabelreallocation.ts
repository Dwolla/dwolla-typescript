/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveLabelReallocationRequest = {
  /**
   * Label reallocation unique identifier
   */
  reallocationId: string;
};

export type RetrieveLabelReallocationSelf = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type ToLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type FromLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type RetrieveLabelReallocationLinks = {
  self?: RetrieveLabelReallocationSelf | undefined;
  toLedgerEntry?: ToLedgerEntry | undefined;
  fromLedgerEntry?: FromLedgerEntry | undefined;
};

/**
 * successful operation
 */
export type RetrieveLabelReallocationResponse = {
  links?: RetrieveLabelReallocationLinks | undefined;
  created?: Date | undefined;
};

/** @internal */
export const RetrieveLabelReallocationRequest$inboundSchema: z.ZodType<
  RetrieveLabelReallocationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  reallocationId: z.string(),
});

/** @internal */
export type RetrieveLabelReallocationRequest$Outbound = {
  reallocationId: string;
};

/** @internal */
export const RetrieveLabelReallocationRequest$outboundSchema: z.ZodType<
  RetrieveLabelReallocationRequest$Outbound,
  z.ZodTypeDef,
  RetrieveLabelReallocationRequest
> = z.object({
  reallocationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelReallocationRequest$ {
  /** @deprecated use `RetrieveLabelReallocationRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelReallocationRequest$inboundSchema;
  /** @deprecated use `RetrieveLabelReallocationRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelReallocationRequest$outboundSchema;
  /** @deprecated use `RetrieveLabelReallocationRequest$Outbound` instead. */
  export type Outbound = RetrieveLabelReallocationRequest$Outbound;
}

export function retrieveLabelReallocationRequestToJSON(
  retrieveLabelReallocationRequest: RetrieveLabelReallocationRequest,
): string {
  return JSON.stringify(
    RetrieveLabelReallocationRequest$outboundSchema.parse(
      retrieveLabelReallocationRequest,
    ),
  );
}

export function retrieveLabelReallocationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelReallocationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelReallocationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelReallocationRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelReallocationSelf$inboundSchema: z.ZodType<
  RetrieveLabelReallocationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type RetrieveLabelReallocationSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const RetrieveLabelReallocationSelf$outboundSchema: z.ZodType<
  RetrieveLabelReallocationSelf$Outbound,
  z.ZodTypeDef,
  RetrieveLabelReallocationSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelReallocationSelf$ {
  /** @deprecated use `RetrieveLabelReallocationSelf$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelReallocationSelf$inboundSchema;
  /** @deprecated use `RetrieveLabelReallocationSelf$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelReallocationSelf$outboundSchema;
  /** @deprecated use `RetrieveLabelReallocationSelf$Outbound` instead. */
  export type Outbound = RetrieveLabelReallocationSelf$Outbound;
}

export function retrieveLabelReallocationSelfToJSON(
  retrieveLabelReallocationSelf: RetrieveLabelReallocationSelf,
): string {
  return JSON.stringify(
    RetrieveLabelReallocationSelf$outboundSchema.parse(
      retrieveLabelReallocationSelf,
    ),
  );
}

export function retrieveLabelReallocationSelfFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelReallocationSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelReallocationSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelReallocationSelf' from JSON`,
  );
}

/** @internal */
export const ToLedgerEntry$inboundSchema: z.ZodType<
  ToLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type ToLedgerEntry$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const ToLedgerEntry$outboundSchema: z.ZodType<
  ToLedgerEntry$Outbound,
  z.ZodTypeDef,
  ToLedgerEntry
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToLedgerEntry$ {
  /** @deprecated use `ToLedgerEntry$inboundSchema` instead. */
  export const inboundSchema = ToLedgerEntry$inboundSchema;
  /** @deprecated use `ToLedgerEntry$outboundSchema` instead. */
  export const outboundSchema = ToLedgerEntry$outboundSchema;
  /** @deprecated use `ToLedgerEntry$Outbound` instead. */
  export type Outbound = ToLedgerEntry$Outbound;
}

export function toLedgerEntryToJSON(toLedgerEntry: ToLedgerEntry): string {
  return JSON.stringify(ToLedgerEntry$outboundSchema.parse(toLedgerEntry));
}

export function toLedgerEntryFromJSON(
  jsonString: string,
): SafeParseResult<ToLedgerEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToLedgerEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToLedgerEntry' from JSON`,
  );
}

/** @internal */
export const FromLedgerEntry$inboundSchema: z.ZodType<
  FromLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type FromLedgerEntry$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const FromLedgerEntry$outboundSchema: z.ZodType<
  FromLedgerEntry$Outbound,
  z.ZodTypeDef,
  FromLedgerEntry
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FromLedgerEntry$ {
  /** @deprecated use `FromLedgerEntry$inboundSchema` instead. */
  export const inboundSchema = FromLedgerEntry$inboundSchema;
  /** @deprecated use `FromLedgerEntry$outboundSchema` instead. */
  export const outboundSchema = FromLedgerEntry$outboundSchema;
  /** @deprecated use `FromLedgerEntry$Outbound` instead. */
  export type Outbound = FromLedgerEntry$Outbound;
}

export function fromLedgerEntryToJSON(
  fromLedgerEntry: FromLedgerEntry,
): string {
  return JSON.stringify(FromLedgerEntry$outboundSchema.parse(fromLedgerEntry));
}

export function fromLedgerEntryFromJSON(
  jsonString: string,
): SafeParseResult<FromLedgerEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FromLedgerEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FromLedgerEntry' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelReallocationLinks$inboundSchema: z.ZodType<
  RetrieveLabelReallocationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => RetrieveLabelReallocationSelf$inboundSchema).optional(),
  "to-ledger-entry": z.lazy(() => ToLedgerEntry$inboundSchema).optional(),
  "from-ledger-entry": z.lazy(() => FromLedgerEntry$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "to-ledger-entry": "toLedgerEntry",
    "from-ledger-entry": "fromLedgerEntry",
  });
});

/** @internal */
export type RetrieveLabelReallocationLinks$Outbound = {
  self?: RetrieveLabelReallocationSelf$Outbound | undefined;
  "to-ledger-entry"?: ToLedgerEntry$Outbound | undefined;
  "from-ledger-entry"?: FromLedgerEntry$Outbound | undefined;
};

/** @internal */
export const RetrieveLabelReallocationLinks$outboundSchema: z.ZodType<
  RetrieveLabelReallocationLinks$Outbound,
  z.ZodTypeDef,
  RetrieveLabelReallocationLinks
> = z.object({
  self: z.lazy(() => RetrieveLabelReallocationSelf$outboundSchema).optional(),
  toLedgerEntry: z.lazy(() => ToLedgerEntry$outboundSchema).optional(),
  fromLedgerEntry: z.lazy(() => FromLedgerEntry$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    toLedgerEntry: "to-ledger-entry",
    fromLedgerEntry: "from-ledger-entry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelReallocationLinks$ {
  /** @deprecated use `RetrieveLabelReallocationLinks$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelReallocationLinks$inboundSchema;
  /** @deprecated use `RetrieveLabelReallocationLinks$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelReallocationLinks$outboundSchema;
  /** @deprecated use `RetrieveLabelReallocationLinks$Outbound` instead. */
  export type Outbound = RetrieveLabelReallocationLinks$Outbound;
}

export function retrieveLabelReallocationLinksToJSON(
  retrieveLabelReallocationLinks: RetrieveLabelReallocationLinks,
): string {
  return JSON.stringify(
    RetrieveLabelReallocationLinks$outboundSchema.parse(
      retrieveLabelReallocationLinks,
    ),
  );
}

export function retrieveLabelReallocationLinksFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelReallocationLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelReallocationLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelReallocationLinks' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelReallocationResponse$inboundSchema: z.ZodType<
  RetrieveLabelReallocationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => RetrieveLabelReallocationLinks$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type RetrieveLabelReallocationResponse$Outbound = {
  _links?: RetrieveLabelReallocationLinks$Outbound | undefined;
  created?: string | undefined;
};

/** @internal */
export const RetrieveLabelReallocationResponse$outboundSchema: z.ZodType<
  RetrieveLabelReallocationResponse$Outbound,
  z.ZodTypeDef,
  RetrieveLabelReallocationResponse
> = z.object({
  links: z.lazy(() => RetrieveLabelReallocationLinks$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelReallocationResponse$ {
  /** @deprecated use `RetrieveLabelReallocationResponse$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelReallocationResponse$inboundSchema;
  /** @deprecated use `RetrieveLabelReallocationResponse$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveLabelReallocationResponse$outboundSchema;
  /** @deprecated use `RetrieveLabelReallocationResponse$Outbound` instead. */
  export type Outbound = RetrieveLabelReallocationResponse$Outbound;
}

export function retrieveLabelReallocationResponseToJSON(
  retrieveLabelReallocationResponse: RetrieveLabelReallocationResponse,
): string {
  return JSON.stringify(
    RetrieveLabelReallocationResponse$outboundSchema.parse(
      retrieveLabelReallocationResponse,
    ),
  );
}

export function retrieveLabelReallocationResponseFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelReallocationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelReallocationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelReallocationResponse' from JSON`,
  );
}
