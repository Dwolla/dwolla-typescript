/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerFundingSourceRequest = {
  /**
   * Customer's unique identifier
   */
  id: string;
  /**
   * Parameters for creating a funding source
   */
  createCustomerFundingSource: models.CreateCustomerFundingSourceUnion;
};

export type CreateCustomerFundingSourceResponseBody3 = {
  code: string;
  message: string;
};

export type CreateCustomerFundingSourceResponseBody2 = {
  code: string;
  message: string;
};

export type CreateCustomerFundingSourceResponseBody1 = {
  code: string;
  message: string;
};

export type CreateCustomerFundingSourceResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerFundingSourceRequest$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CreateCustomerFundingSource:
    models.CreateCustomerFundingSourceUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateCustomerFundingSource": "createCustomerFundingSource",
  });
});

/** @internal */
export type CreateCustomerFundingSourceRequest$Outbound = {
  id: string;
  CreateCustomerFundingSource: models.CreateCustomerFundingSourceUnion$Outbound;
};

/** @internal */
export const CreateCustomerFundingSourceRequest$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceRequest
> = z.object({
  id: z.string(),
  createCustomerFundingSource:
    models.CreateCustomerFundingSourceUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createCustomerFundingSource: "CreateCustomerFundingSource",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceRequest$ {
  /** @deprecated use `CreateCustomerFundingSourceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSourceRequest$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceRequest$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceRequest$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceRequest$Outbound;
}

export function createCustomerFundingSourceRequestToJSON(
  createCustomerFundingSourceRequest: CreateCustomerFundingSourceRequest,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceRequest$outboundSchema.parse(
      createCustomerFundingSourceRequest,
    ),
  );
}

export function createCustomerFundingSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceResponseBody3$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateCustomerFundingSourceResponseBody3$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerFundingSourceResponseBody3$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody3$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceResponseBody3
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceResponseBody3$ {
  /** @deprecated use `CreateCustomerFundingSourceResponseBody3$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceResponseBody3$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody3$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceResponseBody3$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody3$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceResponseBody3$Outbound;
}

export function createCustomerFundingSourceResponseBody3ToJSON(
  createCustomerFundingSourceResponseBody3:
    CreateCustomerFundingSourceResponseBody3,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceResponseBody3$outboundSchema.parse(
      createCustomerFundingSourceResponseBody3,
    ),
  );
}

export function createCustomerFundingSourceResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceResponseBody3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceResponseBody3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceResponseBody3' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceResponseBody2$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateCustomerFundingSourceResponseBody2$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerFundingSourceResponseBody2$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody2$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceResponseBody2
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceResponseBody2$ {
  /** @deprecated use `CreateCustomerFundingSourceResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceResponseBody2$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceResponseBody2$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody2$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceResponseBody2$Outbound;
}

export function createCustomerFundingSourceResponseBody2ToJSON(
  createCustomerFundingSourceResponseBody2:
    CreateCustomerFundingSourceResponseBody2,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceResponseBody2$outboundSchema.parse(
      createCustomerFundingSourceResponseBody2,
    ),
  );
}

export function createCustomerFundingSourceResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceResponseBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceResponseBody2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceResponseBody1$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type CreateCustomerFundingSourceResponseBody1$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerFundingSourceResponseBody1$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponseBody1$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceResponseBody1
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceResponseBody1$ {
  /** @deprecated use `CreateCustomerFundingSourceResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceResponseBody1$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceResponseBody1$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponseBody1$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceResponseBody1$Outbound;
}

export function createCustomerFundingSourceResponseBody1ToJSON(
  createCustomerFundingSourceResponseBody1:
    CreateCustomerFundingSourceResponseBody1,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceResponseBody1$outboundSchema.parse(
      createCustomerFundingSourceResponseBody1,
    ),
  );
}

export function createCustomerFundingSourceResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceResponseBody1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceResponseBody1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceResponse$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerFundingSourceResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerFundingSourceResponse$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceResponse$ {
  /** @deprecated use `CreateCustomerFundingSourceResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceResponse$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceResponse$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceResponse$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceResponse$Outbound;
}

export function createCustomerFundingSourceResponseToJSON(
  createCustomerFundingSourceResponse: CreateCustomerFundingSourceResponse,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceResponse$outboundSchema.parse(
      createCustomerFundingSourceResponse,
    ),
  );
}

export function createCustomerFundingSourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceResponse' from JSON`,
  );
}
