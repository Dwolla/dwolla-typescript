/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Parameters for updating a Customer
 */
export type UpdateRequestBody =
  | models.UpgradeToVerifiedSoleProp
  | models.RetryVerifiedSoleProp
  | models.UpgradeToVerifiedBusiness
  | models.RetryVerifiedBusinessWithController
  | models.RetryVerifiedBusinessWithInternationalController
  | models.RetryVerifiedBusinessNoController
  | models.UpgradeToVerifiedPersonal
  | models.RetryVerifiedPersonal
  | models.DeactivateCustomer
  | models.ReactivateCustomer
  | models.SuspendCustomer
  | models.UpdateUnverifiedAndReceiveOnly
  | models.UpdateVerifiedPersonal
  | models.UpdateVerifiedBusiness;

export type UpdateRequest = {
  /**
   * Customer unique identifier
   */
  id: string;
  /**
   * Parameters for updating a Customer
   */
  requestBody:
    | models.UpgradeToVerifiedSoleProp
    | models.RetryVerifiedSoleProp
    | models.UpgradeToVerifiedBusiness
    | models.RetryVerifiedBusinessWithController
    | models.RetryVerifiedBusinessWithInternationalController
    | models.RetryVerifiedBusinessNoController
    | models.UpgradeToVerifiedPersonal
    | models.RetryVerifiedPersonal
    | models.DeactivateCustomer
    | models.ReactivateCustomer
    | models.SuspendCustomer
    | models.UpdateUnverifiedAndReceiveOnly
    | models.UpdateVerifiedPersonal
    | models.UpdateVerifiedBusiness;
};

/**
 * successful operation
 */
export type UpdateResponse =
  | models.UnverifiedCustomer
  | models.UnverifiedBusinessCustomer
  | models.VerifiedPersonalCustomer
  | models.VerifiedSolePropCustomer
  | models.VerifiedBusinessCustomer;

/** @internal */
export const UpdateRequestBody$inboundSchema: z.ZodType<
  UpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.UpgradeToVerifiedSoleProp$inboundSchema,
  models.RetryVerifiedSoleProp$inboundSchema,
  models.UpgradeToVerifiedBusiness$inboundSchema,
  models.RetryVerifiedBusinessWithController$inboundSchema,
  models.RetryVerifiedBusinessWithInternationalController$inboundSchema,
  models.RetryVerifiedBusinessNoController$inboundSchema,
  models.UpgradeToVerifiedPersonal$inboundSchema,
  models.RetryVerifiedPersonal$inboundSchema,
  models.DeactivateCustomer$inboundSchema,
  models.ReactivateCustomer$inboundSchema,
  models.SuspendCustomer$inboundSchema,
  models.UpdateUnverifiedAndReceiveOnly$inboundSchema,
  models.UpdateVerifiedPersonal$inboundSchema,
  models.UpdateVerifiedBusiness$inboundSchema,
]);

/** @internal */
export type UpdateRequestBody$Outbound =
  | models.UpgradeToVerifiedSoleProp$Outbound
  | models.RetryVerifiedSoleProp$Outbound
  | models.UpgradeToVerifiedBusiness$Outbound
  | models.RetryVerifiedBusinessWithController$Outbound
  | models.RetryVerifiedBusinessWithInternationalController$Outbound
  | models.RetryVerifiedBusinessNoController$Outbound
  | models.UpgradeToVerifiedPersonal$Outbound
  | models.RetryVerifiedPersonal$Outbound
  | models.DeactivateCustomer$Outbound
  | models.ReactivateCustomer$Outbound
  | models.SuspendCustomer$Outbound
  | models.UpdateUnverifiedAndReceiveOnly$Outbound
  | models.UpdateVerifiedPersonal$Outbound
  | models.UpdateVerifiedBusiness$Outbound;

/** @internal */
export const UpdateRequestBody$outboundSchema: z.ZodType<
  UpdateRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateRequestBody
> = z.union([
  models.UpgradeToVerifiedSoleProp$outboundSchema,
  models.RetryVerifiedSoleProp$outboundSchema,
  models.UpgradeToVerifiedBusiness$outboundSchema,
  models.RetryVerifiedBusinessWithController$outboundSchema,
  models.RetryVerifiedBusinessWithInternationalController$outboundSchema,
  models.RetryVerifiedBusinessNoController$outboundSchema,
  models.UpgradeToVerifiedPersonal$outboundSchema,
  models.RetryVerifiedPersonal$outboundSchema,
  models.DeactivateCustomer$outboundSchema,
  models.ReactivateCustomer$outboundSchema,
  models.SuspendCustomer$outboundSchema,
  models.UpdateUnverifiedAndReceiveOnly$outboundSchema,
  models.UpdateVerifiedPersonal$outboundSchema,
  models.UpdateVerifiedBusiness$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequestBody$ {
  /** @deprecated use `UpdateRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateRequestBody$inboundSchema;
  /** @deprecated use `UpdateRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateRequestBody$outboundSchema;
  /** @deprecated use `UpdateRequestBody$Outbound` instead. */
  export type Outbound = UpdateRequestBody$Outbound;
}

export function updateRequestBodyToJSON(
  updateRequestBody: UpdateRequestBody,
): string {
  return JSON.stringify(
    UpdateRequestBody$outboundSchema.parse(updateRequestBody),
  );
}

export function updateRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateRequest$inboundSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.union([
    models.UpgradeToVerifiedSoleProp$inboundSchema,
    models.RetryVerifiedSoleProp$inboundSchema,
    models.UpgradeToVerifiedBusiness$inboundSchema,
    models.RetryVerifiedBusinessWithController$inboundSchema,
    models.RetryVerifiedBusinessWithInternationalController$inboundSchema,
    models.RetryVerifiedBusinessNoController$inboundSchema,
    models.UpgradeToVerifiedPersonal$inboundSchema,
    models.RetryVerifiedPersonal$inboundSchema,
    models.DeactivateCustomer$inboundSchema,
    models.ReactivateCustomer$inboundSchema,
    models.SuspendCustomer$inboundSchema,
    models.UpdateUnverifiedAndReceiveOnly$inboundSchema,
    models.UpdateVerifiedPersonal$inboundSchema,
    models.UpdateVerifiedBusiness$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateRequest$Outbound = {
  id: string;
  RequestBody:
    | models.UpgradeToVerifiedSoleProp$Outbound
    | models.RetryVerifiedSoleProp$Outbound
    | models.UpgradeToVerifiedBusiness$Outbound
    | models.RetryVerifiedBusinessWithController$Outbound
    | models.RetryVerifiedBusinessWithInternationalController$Outbound
    | models.RetryVerifiedBusinessNoController$Outbound
    | models.UpgradeToVerifiedPersonal$Outbound
    | models.RetryVerifiedPersonal$Outbound
    | models.DeactivateCustomer$Outbound
    | models.ReactivateCustomer$Outbound
    | models.SuspendCustomer$Outbound
    | models.UpdateUnverifiedAndReceiveOnly$Outbound
    | models.UpdateVerifiedPersonal$Outbound
    | models.UpdateVerifiedBusiness$Outbound;
};

/** @internal */
export const UpdateRequest$outboundSchema: z.ZodType<
  UpdateRequest$Outbound,
  z.ZodTypeDef,
  UpdateRequest
> = z.object({
  id: z.string(),
  requestBody: z.union([
    models.UpgradeToVerifiedSoleProp$outboundSchema,
    models.RetryVerifiedSoleProp$outboundSchema,
    models.UpgradeToVerifiedBusiness$outboundSchema,
    models.RetryVerifiedBusinessWithController$outboundSchema,
    models.RetryVerifiedBusinessWithInternationalController$outboundSchema,
    models.RetryVerifiedBusinessNoController$outboundSchema,
    models.UpgradeToVerifiedPersonal$outboundSchema,
    models.RetryVerifiedPersonal$outboundSchema,
    models.DeactivateCustomer$outboundSchema,
    models.ReactivateCustomer$outboundSchema,
    models.SuspendCustomer$outboundSchema,
    models.UpdateUnverifiedAndReceiveOnly$outboundSchema,
    models.UpdateVerifiedPersonal$outboundSchema,
    models.UpdateVerifiedBusiness$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRequest$ {
  /** @deprecated use `UpdateRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRequest$inboundSchema;
  /** @deprecated use `UpdateRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRequest$outboundSchema;
  /** @deprecated use `UpdateRequest$Outbound` instead. */
  export type Outbound = UpdateRequest$Outbound;
}

export function updateRequestToJSON(updateRequest: UpdateRequest): string {
  return JSON.stringify(UpdateRequest$outboundSchema.parse(updateRequest));
}

export function updateRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRequest' from JSON`,
  );
}

/** @internal */
export const UpdateResponse$inboundSchema: z.ZodType<
  UpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.UnverifiedCustomer$inboundSchema,
  models.UnverifiedBusinessCustomer$inboundSchema,
  models.VerifiedPersonalCustomer$inboundSchema,
  models.VerifiedSolePropCustomer$inboundSchema,
  models.VerifiedBusinessCustomer$inboundSchema,
]);

/** @internal */
export type UpdateResponse$Outbound =
  | models.UnverifiedCustomer$Outbound
  | models.UnverifiedBusinessCustomer$Outbound
  | models.VerifiedPersonalCustomer$Outbound
  | models.VerifiedSolePropCustomer$Outbound
  | models.VerifiedBusinessCustomer$Outbound;

/** @internal */
export const UpdateResponse$outboundSchema: z.ZodType<
  UpdateResponse$Outbound,
  z.ZodTypeDef,
  UpdateResponse
> = z.union([
  models.UnverifiedCustomer$outboundSchema,
  models.UnverifiedBusinessCustomer$outboundSchema,
  models.VerifiedPersonalCustomer$outboundSchema,
  models.VerifiedSolePropCustomer$outboundSchema,
  models.VerifiedBusinessCustomer$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResponse$ {
  /** @deprecated use `UpdateResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateResponse$inboundSchema;
  /** @deprecated use `UpdateResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateResponse$outboundSchema;
  /** @deprecated use `UpdateResponse$Outbound` instead. */
  export type Outbound = UpdateResponse$Outbound;
}

export function updateResponseToJSON(updateResponse: UpdateResponse): string {
  return JSON.stringify(UpdateResponse$outboundSchema.parse(updateResponse));
}

export function updateResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResponse' from JSON`,
  );
}
