/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAndSearchTransfersRequest = {
  /**
   * Account's unique identifier
   */
  id: string;
  /**
   * A string to search on fields `firstName`, `lastName`, `email`, `businessName`, Customer ID, and Account ID
   */
  search?: string | undefined;
  /**
   * Only include transactions with an amount equal to or greater than `startAmount`
   */
  startAmount?: string | undefined;
  /**
   * Only include transactions with an amount equal to or less than `endAmount`
   */
  endAmount?: string | undefined;
  /**
   * Only include transactions created after this date. ISO-8601 format `YYYY-MM-DD`
   */
  startDate?: string | undefined;
  /**
   * Only include transactions created before this date. ISO-8601 format `YYYY-MM-DD`
   */
  endDate?: string | undefined;
  /**
   * Filter on transaction status. Possible values are `pending`, `processed`, `failed`, or `cancelled`
   */
  status?: string | undefined;
  /**
   * A string value to search on if `correlationId` was specified for a transaction
   */
  correlationId?: string | undefined;
  /**
   * Number of search results to return. Defaults to 25
   */
  limit?: string | undefined;
  /**
   * Number of search results to skip. Use for pagination
   */
  offset?: string | undefined;
};

/** @internal */
export const ListAndSearchTransfersRequest$inboundSchema: z.ZodType<
  ListAndSearchTransfersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  search: z.string().optional(),
  startAmount: z.string().optional(),
  endAmount: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  status: z.string().optional(),
  correlationId: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
});

/** @internal */
export type ListAndSearchTransfersRequest$Outbound = {
  id: string;
  search?: string | undefined;
  startAmount?: string | undefined;
  endAmount?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  status?: string | undefined;
  correlationId?: string | undefined;
  limit?: string | undefined;
  offset?: string | undefined;
};

/** @internal */
export const ListAndSearchTransfersRequest$outboundSchema: z.ZodType<
  ListAndSearchTransfersRequest$Outbound,
  z.ZodTypeDef,
  ListAndSearchTransfersRequest
> = z.object({
  id: z.string(),
  search: z.string().optional(),
  startAmount: z.string().optional(),
  endAmount: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  status: z.string().optional(),
  correlationId: z.string().optional(),
  limit: z.string().optional(),
  offset: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAndSearchTransfersRequest$ {
  /** @deprecated use `ListAndSearchTransfersRequest$inboundSchema` instead. */
  export const inboundSchema = ListAndSearchTransfersRequest$inboundSchema;
  /** @deprecated use `ListAndSearchTransfersRequest$outboundSchema` instead. */
  export const outboundSchema = ListAndSearchTransfersRequest$outboundSchema;
  /** @deprecated use `ListAndSearchTransfersRequest$Outbound` instead. */
  export type Outbound = ListAndSearchTransfersRequest$Outbound;
}

export function listAndSearchTransfersRequestToJSON(
  listAndSearchTransfersRequest: ListAndSearchTransfersRequest,
): string {
  return JSON.stringify(
    ListAndSearchTransfersRequest$outboundSchema.parse(
      listAndSearchTransfersRequest,
    ),
  );
}

export function listAndSearchTransfersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAndSearchTransfersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAndSearchTransfersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAndSearchTransfersRequest' from JSON`,
  );
}
