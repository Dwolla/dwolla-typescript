/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListFundingSourcesRequest = {
  /**
   * Account's unique identifier
   */
  id: string;
  /**
   * Filter removed funding sources. Boolean value. Defaults to `true`
   */
  removed?: string | undefined;
};

/** @internal */
export const ListFundingSourcesRequest$inboundSchema: z.ZodType<
  ListFundingSourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  removed: z.string().optional(),
});

/** @internal */
export type ListFundingSourcesRequest$Outbound = {
  id: string;
  removed?: string | undefined;
};

/** @internal */
export const ListFundingSourcesRequest$outboundSchema: z.ZodType<
  ListFundingSourcesRequest$Outbound,
  z.ZodTypeDef,
  ListFundingSourcesRequest
> = z.object({
  id: z.string(),
  removed: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListFundingSourcesRequest$ {
  /** @deprecated use `ListFundingSourcesRequest$inboundSchema` instead. */
  export const inboundSchema = ListFundingSourcesRequest$inboundSchema;
  /** @deprecated use `ListFundingSourcesRequest$outboundSchema` instead. */
  export const outboundSchema = ListFundingSourcesRequest$outboundSchema;
  /** @deprecated use `ListFundingSourcesRequest$Outbound` instead. */
  export type Outbound = ListFundingSourcesRequest$Outbound;
}

export function listFundingSourcesRequestToJSON(
  listFundingSourcesRequest: ListFundingSourcesRequest,
): string {
  return JSON.stringify(
    ListFundingSourcesRequest$outboundSchema.parse(listFundingSourcesRequest),
  );
}

export function listFundingSourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListFundingSourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListFundingSourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListFundingSourcesRequest' from JSON`,
  );
}
