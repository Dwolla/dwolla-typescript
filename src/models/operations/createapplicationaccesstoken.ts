/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Must be set to "client_credentials"
 */
export const GrantType = {
  ClientCredentials: "client_credentials",
} as const;
/**
 * Must be set to "client_credentials"
 */
export type GrantType = ClosedEnum<typeof GrantType>;

/**
 * OAuth get token request. Client credentials are sent in the Authorization header using Basic authentication.
 */
export type CreateApplicationAccessTokenRequest = {
  /**
   * Must be set to "client_credentials"
   */
  grantType: GrantType;
};

/**
 * The type of token, always "bearer"
 */
export const TokenType = {
  Bearer: "bearer",
} as const;
/**
 * The type of token, always "bearer"
 */
export type TokenType = ClosedEnum<typeof TokenType>;

/**
 * successful operation
 */
export type CreateApplicationAccessTokenResponse = {
  /**
   * A new access token that is used to authenticate against resources that belong to the app itself.
   */
  accessToken: string;
  /**
   * The type of token, always "bearer"
   */
  tokenType: TokenType;
  /**
   * The lifetime of the access token, in seconds. Default is 3600.
   */
  expiresIn: number;
};

/** @internal */
export const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType> = z
  .nativeEnum(GrantType);

/** @internal */
export const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType> =
  GrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantType$ {
  /** @deprecated use `GrantType$inboundSchema` instead. */
  export const inboundSchema = GrantType$inboundSchema;
  /** @deprecated use `GrantType$outboundSchema` instead. */
  export const outboundSchema = GrantType$outboundSchema;
}

/** @internal */
export const CreateApplicationAccessTokenRequest$inboundSchema: z.ZodType<
  CreateApplicationAccessTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
  });
});

/** @internal */
export type CreateApplicationAccessTokenRequest$Outbound = {
  grant_type: string;
};

/** @internal */
export const CreateApplicationAccessTokenRequest$outboundSchema: z.ZodType<
  CreateApplicationAccessTokenRequest$Outbound,
  z.ZodTypeDef,
  CreateApplicationAccessTokenRequest
> = z.object({
  grantType: GrantType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationAccessTokenRequest$ {
  /** @deprecated use `CreateApplicationAccessTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateApplicationAccessTokenRequest$inboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationAccessTokenRequest$outboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenRequest$Outbound` instead. */
  export type Outbound = CreateApplicationAccessTokenRequest$Outbound;
}

export function createApplicationAccessTokenRequestToJSON(
  createApplicationAccessTokenRequest: CreateApplicationAccessTokenRequest,
): string {
  return JSON.stringify(
    CreateApplicationAccessTokenRequest$outboundSchema.parse(
      createApplicationAccessTokenRequest,
    ),
  );
}

export function createApplicationAccessTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationAccessTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApplicationAccessTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationAccessTokenRequest' from JSON`,
  );
}

/** @internal */
export const TokenType$inboundSchema: z.ZodNativeEnum<typeof TokenType> = z
  .nativeEnum(TokenType);

/** @internal */
export const TokenType$outboundSchema: z.ZodNativeEnum<typeof TokenType> =
  TokenType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenType$ {
  /** @deprecated use `TokenType$inboundSchema` instead. */
  export const inboundSchema = TokenType$inboundSchema;
  /** @deprecated use `TokenType$outboundSchema` instead. */
  export const outboundSchema = TokenType$outboundSchema;
}

/** @internal */
export const CreateApplicationAccessTokenResponse$inboundSchema: z.ZodType<
  CreateApplicationAccessTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string(),
  token_type: TokenType$inboundSchema,
  expires_in: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
    "token_type": "tokenType",
    "expires_in": "expiresIn",
  });
});

/** @internal */
export type CreateApplicationAccessTokenResponse$Outbound = {
  access_token: string;
  token_type: string;
  expires_in: number;
};

/** @internal */
export const CreateApplicationAccessTokenResponse$outboundSchema: z.ZodType<
  CreateApplicationAccessTokenResponse$Outbound,
  z.ZodTypeDef,
  CreateApplicationAccessTokenResponse
> = z.object({
  accessToken: z.string(),
  tokenType: TokenType$outboundSchema,
  expiresIn: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
    tokenType: "token_type",
    expiresIn: "expires_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationAccessTokenResponse$ {
  /** @deprecated use `CreateApplicationAccessTokenResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateApplicationAccessTokenResponse$inboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationAccessTokenResponse$outboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenResponse$Outbound` instead. */
  export type Outbound = CreateApplicationAccessTokenResponse$Outbound;
}

export function createApplicationAccessTokenResponseToJSON(
  createApplicationAccessTokenResponse: CreateApplicationAccessTokenResponse,
): string {
  return JSON.stringify(
    CreateApplicationAccessTokenResponse$outboundSchema.parse(
      createApplicationAccessTokenResponse,
    ),
  );
}

export function createApplicationAccessTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationAccessTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApplicationAccessTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationAccessTokenResponse' from JSON`,
  );
}
