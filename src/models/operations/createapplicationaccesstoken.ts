/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateApplicationAccessTokenSecurity = {
  username: string;
  password: string;
};

/**
 * OAuth get token request
 */
export type CreateApplicationAccessTokenRequest = {
  grantType: string;
};

/**
 * successful operation
 */
export type CreateApplicationAccessTokenResponse = {
  accessToken?: string | undefined;
  tokenType?: string | undefined;
  expiresIn?: number | undefined;
};

/** @internal */
export const CreateApplicationAccessTokenSecurity$inboundSchema: z.ZodType<
  CreateApplicationAccessTokenSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
});

/** @internal */
export type CreateApplicationAccessTokenSecurity$Outbound = {
  username: string;
  password: string;
};

/** @internal */
export const CreateApplicationAccessTokenSecurity$outboundSchema: z.ZodType<
  CreateApplicationAccessTokenSecurity$Outbound,
  z.ZodTypeDef,
  CreateApplicationAccessTokenSecurity
> = z.object({
  username: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationAccessTokenSecurity$ {
  /** @deprecated use `CreateApplicationAccessTokenSecurity$inboundSchema` instead. */
  export const inboundSchema =
    CreateApplicationAccessTokenSecurity$inboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenSecurity$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationAccessTokenSecurity$outboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenSecurity$Outbound` instead. */
  export type Outbound = CreateApplicationAccessTokenSecurity$Outbound;
}

export function createApplicationAccessTokenSecurityToJSON(
  createApplicationAccessTokenSecurity: CreateApplicationAccessTokenSecurity,
): string {
  return JSON.stringify(
    CreateApplicationAccessTokenSecurity$outboundSchema.parse(
      createApplicationAccessTokenSecurity,
    ),
  );
}

export function createApplicationAccessTokenSecurityFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationAccessTokenSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApplicationAccessTokenSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationAccessTokenSecurity' from JSON`,
  );
}

/** @internal */
export const CreateApplicationAccessTokenRequest$inboundSchema: z.ZodType<
  CreateApplicationAccessTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
  });
});

/** @internal */
export type CreateApplicationAccessTokenRequest$Outbound = {
  grant_type: string;
};

/** @internal */
export const CreateApplicationAccessTokenRequest$outboundSchema: z.ZodType<
  CreateApplicationAccessTokenRequest$Outbound,
  z.ZodTypeDef,
  CreateApplicationAccessTokenRequest
> = z.object({
  grantType: z.string(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationAccessTokenRequest$ {
  /** @deprecated use `CreateApplicationAccessTokenRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateApplicationAccessTokenRequest$inboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationAccessTokenRequest$outboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenRequest$Outbound` instead. */
  export type Outbound = CreateApplicationAccessTokenRequest$Outbound;
}

export function createApplicationAccessTokenRequestToJSON(
  createApplicationAccessTokenRequest: CreateApplicationAccessTokenRequest,
): string {
  return JSON.stringify(
    CreateApplicationAccessTokenRequest$outboundSchema.parse(
      createApplicationAccessTokenRequest,
    ),
  );
}

export function createApplicationAccessTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationAccessTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApplicationAccessTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationAccessTokenRequest' from JSON`,
  );
}

/** @internal */
export const CreateApplicationAccessTokenResponse$inboundSchema: z.ZodType<
  CreateApplicationAccessTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string().optional(),
  token_type: z.string().optional(),
  expires_in: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
    "token_type": "tokenType",
    "expires_in": "expiresIn",
  });
});

/** @internal */
export type CreateApplicationAccessTokenResponse$Outbound = {
  access_token?: string | undefined;
  token_type?: string | undefined;
  expires_in?: number | undefined;
};

/** @internal */
export const CreateApplicationAccessTokenResponse$outboundSchema: z.ZodType<
  CreateApplicationAccessTokenResponse$Outbound,
  z.ZodTypeDef,
  CreateApplicationAccessTokenResponse
> = z.object({
  accessToken: z.string().optional(),
  tokenType: z.string().optional(),
  expiresIn: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
    tokenType: "token_type",
    expiresIn: "expires_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateApplicationAccessTokenResponse$ {
  /** @deprecated use `CreateApplicationAccessTokenResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateApplicationAccessTokenResponse$inboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateApplicationAccessTokenResponse$outboundSchema;
  /** @deprecated use `CreateApplicationAccessTokenResponse$Outbound` instead. */
  export type Outbound = CreateApplicationAccessTokenResponse$Outbound;
}

export function createApplicationAccessTokenResponseToJSON(
  createApplicationAccessTokenResponse: CreateApplicationAccessTokenResponse,
): string {
  return JSON.stringify(
    CreateApplicationAccessTokenResponse$outboundSchema.parse(
      createApplicationAccessTokenResponse,
    ),
  );
}

export function createApplicationAccessTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateApplicationAccessTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateApplicationAccessTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateApplicationAccessTokenResponse' from JSON`,
  );
}
