/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveCustomerExchangeSessionRequest = {
  /**
   * Exchange session's unique identifier
   */
  id: string;
};

/** @internal */
export const RetrieveCustomerExchangeSessionRequest$inboundSchema: z.ZodType<
  RetrieveCustomerExchangeSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type RetrieveCustomerExchangeSessionRequest$Outbound = {
  id: string;
};

/** @internal */
export const RetrieveCustomerExchangeSessionRequest$outboundSchema: z.ZodType<
  RetrieveCustomerExchangeSessionRequest$Outbound,
  z.ZodTypeDef,
  RetrieveCustomerExchangeSessionRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveCustomerExchangeSessionRequest$ {
  /** @deprecated use `RetrieveCustomerExchangeSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    RetrieveCustomerExchangeSessionRequest$inboundSchema;
  /** @deprecated use `RetrieveCustomerExchangeSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    RetrieveCustomerExchangeSessionRequest$outboundSchema;
  /** @deprecated use `RetrieveCustomerExchangeSessionRequest$Outbound` instead. */
  export type Outbound = RetrieveCustomerExchangeSessionRequest$Outbound;
}

export function retrieveCustomerExchangeSessionRequestToJSON(
  retrieveCustomerExchangeSessionRequest:
    RetrieveCustomerExchangeSessionRequest,
): string {
  return JSON.stringify(
    RetrieveCustomerExchangeSessionRequest$outboundSchema.parse(
      retrieveCustomerExchangeSessionRequest,
    ),
  );
}

export function retrieveCustomerExchangeSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveCustomerExchangeSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetrieveCustomerExchangeSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveCustomerExchangeSessionRequest' from JSON`,
  );
}
