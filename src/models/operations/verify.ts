/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VerifyAnswer = {
  questionId?: string | undefined;
  answerId?: string | undefined;
};

/**
 * Parameters for verifying KBA questions
 */
export type VerifyRequestBody = {
  answers: Array<VerifyAnswer>;
};

export type VerifyRequest = {
  /**
   * The id of the KBA session to verify questions for.
   */
  id: string;
  /**
   * Parameters for verifying KBA questions
   */
  requestBody: VerifyRequestBody;
};

export type VerifyCustomer = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type VerifyLinks = {
  customer?: VerifyCustomer | undefined;
};

/**
 * created
 */
export type VerifyResponse = {
  links?: VerifyLinks | undefined;
  verificationStatus?: string | undefined;
};

/** @internal */
export const VerifyAnswer$inboundSchema: z.ZodType<
  VerifyAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  questionId: z.string().optional(),
  answerId: z.string().optional(),
});

/** @internal */
export type VerifyAnswer$Outbound = {
  questionId?: string | undefined;
  answerId?: string | undefined;
};

/** @internal */
export const VerifyAnswer$outboundSchema: z.ZodType<
  VerifyAnswer$Outbound,
  z.ZodTypeDef,
  VerifyAnswer
> = z.object({
  questionId: z.string().optional(),
  answerId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyAnswer$ {
  /** @deprecated use `VerifyAnswer$inboundSchema` instead. */
  export const inboundSchema = VerifyAnswer$inboundSchema;
  /** @deprecated use `VerifyAnswer$outboundSchema` instead. */
  export const outboundSchema = VerifyAnswer$outboundSchema;
  /** @deprecated use `VerifyAnswer$Outbound` instead. */
  export type Outbound = VerifyAnswer$Outbound;
}

export function verifyAnswerToJSON(verifyAnswer: VerifyAnswer): string {
  return JSON.stringify(VerifyAnswer$outboundSchema.parse(verifyAnswer));
}

export function verifyAnswerFromJSON(
  jsonString: string,
): SafeParseResult<VerifyAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyAnswer' from JSON`,
  );
}

/** @internal */
export const VerifyRequestBody$inboundSchema: z.ZodType<
  VerifyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  answers: z.array(z.lazy(() => VerifyAnswer$inboundSchema)),
});

/** @internal */
export type VerifyRequestBody$Outbound = {
  answers: Array<VerifyAnswer$Outbound>;
};

/** @internal */
export const VerifyRequestBody$outboundSchema: z.ZodType<
  VerifyRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyRequestBody
> = z.object({
  answers: z.array(z.lazy(() => VerifyAnswer$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyRequestBody$ {
  /** @deprecated use `VerifyRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyRequestBody$inboundSchema;
  /** @deprecated use `VerifyRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyRequestBody$outboundSchema;
  /** @deprecated use `VerifyRequestBody$Outbound` instead. */
  export type Outbound = VerifyRequestBody$Outbound;
}

export function verifyRequestBodyToJSON(
  verifyRequestBody: VerifyRequestBody,
): string {
  return JSON.stringify(
    VerifyRequestBody$outboundSchema.parse(verifyRequestBody),
  );
}

export function verifyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifyRequest$inboundSchema: z.ZodType<
  VerifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => VerifyRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VerifyRequest$Outbound = {
  id: string;
  RequestBody: VerifyRequestBody$Outbound;
};

/** @internal */
export const VerifyRequest$outboundSchema: z.ZodType<
  VerifyRequest$Outbound,
  z.ZodTypeDef,
  VerifyRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => VerifyRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyRequest$ {
  /** @deprecated use `VerifyRequest$inboundSchema` instead. */
  export const inboundSchema = VerifyRequest$inboundSchema;
  /** @deprecated use `VerifyRequest$outboundSchema` instead. */
  export const outboundSchema = VerifyRequest$outboundSchema;
  /** @deprecated use `VerifyRequest$Outbound` instead. */
  export type Outbound = VerifyRequest$Outbound;
}

export function verifyRequestToJSON(verifyRequest: VerifyRequest): string {
  return JSON.stringify(VerifyRequest$outboundSchema.parse(verifyRequest));
}

export function verifyRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyRequest' from JSON`,
  );
}

/** @internal */
export const VerifyCustomer$inboundSchema: z.ZodType<
  VerifyCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type VerifyCustomer$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const VerifyCustomer$outboundSchema: z.ZodType<
  VerifyCustomer$Outbound,
  z.ZodTypeDef,
  VerifyCustomer
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyCustomer$ {
  /** @deprecated use `VerifyCustomer$inboundSchema` instead. */
  export const inboundSchema = VerifyCustomer$inboundSchema;
  /** @deprecated use `VerifyCustomer$outboundSchema` instead. */
  export const outboundSchema = VerifyCustomer$outboundSchema;
  /** @deprecated use `VerifyCustomer$Outbound` instead. */
  export type Outbound = VerifyCustomer$Outbound;
}

export function verifyCustomerToJSON(verifyCustomer: VerifyCustomer): string {
  return JSON.stringify(VerifyCustomer$outboundSchema.parse(verifyCustomer));
}

export function verifyCustomerFromJSON(
  jsonString: string,
): SafeParseResult<VerifyCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyCustomer' from JSON`,
  );
}

/** @internal */
export const VerifyLinks$inboundSchema: z.ZodType<
  VerifyLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.lazy(() => VerifyCustomer$inboundSchema).optional(),
});

/** @internal */
export type VerifyLinks$Outbound = {
  customer?: VerifyCustomer$Outbound | undefined;
};

/** @internal */
export const VerifyLinks$outboundSchema: z.ZodType<
  VerifyLinks$Outbound,
  z.ZodTypeDef,
  VerifyLinks
> = z.object({
  customer: z.lazy(() => VerifyCustomer$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyLinks$ {
  /** @deprecated use `VerifyLinks$inboundSchema` instead. */
  export const inboundSchema = VerifyLinks$inboundSchema;
  /** @deprecated use `VerifyLinks$outboundSchema` instead. */
  export const outboundSchema = VerifyLinks$outboundSchema;
  /** @deprecated use `VerifyLinks$Outbound` instead. */
  export type Outbound = VerifyLinks$Outbound;
}

export function verifyLinksToJSON(verifyLinks: VerifyLinks): string {
  return JSON.stringify(VerifyLinks$outboundSchema.parse(verifyLinks));
}

export function verifyLinksFromJSON(
  jsonString: string,
): SafeParseResult<VerifyLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyLinks' from JSON`,
  );
}

/** @internal */
export const VerifyResponse$inboundSchema: z.ZodType<
  VerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => VerifyLinks$inboundSchema).optional(),
  verificationStatus: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type VerifyResponse$Outbound = {
  _links?: VerifyLinks$Outbound | undefined;
  verificationStatus?: string | undefined;
};

/** @internal */
export const VerifyResponse$outboundSchema: z.ZodType<
  VerifyResponse$Outbound,
  z.ZodTypeDef,
  VerifyResponse
> = z.object({
  links: z.lazy(() => VerifyLinks$outboundSchema).optional(),
  verificationStatus: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyResponse$ {
  /** @deprecated use `VerifyResponse$inboundSchema` instead. */
  export const inboundSchema = VerifyResponse$inboundSchema;
  /** @deprecated use `VerifyResponse$outboundSchema` instead. */
  export const outboundSchema = VerifyResponse$outboundSchema;
  /** @deprecated use `VerifyResponse$Outbound` instead. */
  export type Outbound = VerifyResponse$Outbound;
}

export function verifyResponseToJSON(verifyResponse: VerifyResponse): string {
  return JSON.stringify(VerifyResponse$outboundSchema.parse(verifyResponse));
}

export function verifyResponseFromJSON(
  jsonString: string,
): SafeParseResult<VerifyResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyResponse' from JSON`,
  );
}
