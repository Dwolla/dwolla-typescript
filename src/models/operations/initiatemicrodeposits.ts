/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InitiateMicroDepositsRequest = {
  /**
   * The ID of the funding source to initiate micro-deposits for
   */
  id: string;
};

export type InitiateMicroDepositsResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateMicroDepositsRequest$inboundSchema: z.ZodType<
  InitiateMicroDepositsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type InitiateMicroDepositsRequest$Outbound = {
  id: string;
};

/** @internal */
export const InitiateMicroDepositsRequest$outboundSchema: z.ZodType<
  InitiateMicroDepositsRequest$Outbound,
  z.ZodTypeDef,
  InitiateMicroDepositsRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateMicroDepositsRequest$ {
  /** @deprecated use `InitiateMicroDepositsRequest$inboundSchema` instead. */
  export const inboundSchema = InitiateMicroDepositsRequest$inboundSchema;
  /** @deprecated use `InitiateMicroDepositsRequest$outboundSchema` instead. */
  export const outboundSchema = InitiateMicroDepositsRequest$outboundSchema;
  /** @deprecated use `InitiateMicroDepositsRequest$Outbound` instead. */
  export type Outbound = InitiateMicroDepositsRequest$Outbound;
}

export function initiateMicroDepositsRequestToJSON(
  initiateMicroDepositsRequest: InitiateMicroDepositsRequest,
): string {
  return JSON.stringify(
    InitiateMicroDepositsRequest$outboundSchema.parse(
      initiateMicroDepositsRequest,
    ),
  );
}

export function initiateMicroDepositsRequestFromJSON(
  jsonString: string,
): SafeParseResult<InitiateMicroDepositsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateMicroDepositsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateMicroDepositsRequest' from JSON`,
  );
}

/** @internal */
export const InitiateMicroDepositsResponse$inboundSchema: z.ZodType<
  InitiateMicroDepositsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type InitiateMicroDepositsResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateMicroDepositsResponse$outboundSchema: z.ZodType<
  InitiateMicroDepositsResponse$Outbound,
  z.ZodTypeDef,
  InitiateMicroDepositsResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateMicroDepositsResponse$ {
  /** @deprecated use `InitiateMicroDepositsResponse$inboundSchema` instead. */
  export const inboundSchema = InitiateMicroDepositsResponse$inboundSchema;
  /** @deprecated use `InitiateMicroDepositsResponse$outboundSchema` instead. */
  export const outboundSchema = InitiateMicroDepositsResponse$outboundSchema;
  /** @deprecated use `InitiateMicroDepositsResponse$Outbound` instead. */
  export type Outbound = InitiateMicroDepositsResponse$Outbound;
}

export function initiateMicroDepositsResponseToJSON(
  initiateMicroDepositsResponse: InitiateMicroDepositsResponse,
): string {
  return JSON.stringify(
    InitiateMicroDepositsResponse$outboundSchema.parse(
      initiateMicroDepositsResponse,
    ),
  );
}

export function initiateMicroDepositsResponseFromJSON(
  jsonString: string,
): SafeParseResult<InitiateMicroDepositsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateMicroDepositsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateMicroDepositsResponse' from JSON`,
  );
}
