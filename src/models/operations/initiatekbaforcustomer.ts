/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InitiateKbaForCustomerRequest = {
  /**
   * The ID of the Customer for initiating a KBA session
   */
  id: string;
};

export type InitiateKbaForCustomerResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateKbaForCustomerRequest$inboundSchema: z.ZodType<
  InitiateKbaForCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type InitiateKbaForCustomerRequest$Outbound = {
  id: string;
};

/** @internal */
export const InitiateKbaForCustomerRequest$outboundSchema: z.ZodType<
  InitiateKbaForCustomerRequest$Outbound,
  z.ZodTypeDef,
  InitiateKbaForCustomerRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateKbaForCustomerRequest$ {
  /** @deprecated use `InitiateKbaForCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = InitiateKbaForCustomerRequest$inboundSchema;
  /** @deprecated use `InitiateKbaForCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = InitiateKbaForCustomerRequest$outboundSchema;
  /** @deprecated use `InitiateKbaForCustomerRequest$Outbound` instead. */
  export type Outbound = InitiateKbaForCustomerRequest$Outbound;
}

export function initiateKbaForCustomerRequestToJSON(
  initiateKbaForCustomerRequest: InitiateKbaForCustomerRequest,
): string {
  return JSON.stringify(
    InitiateKbaForCustomerRequest$outboundSchema.parse(
      initiateKbaForCustomerRequest,
    ),
  );
}

export function initiateKbaForCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<InitiateKbaForCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateKbaForCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateKbaForCustomerRequest' from JSON`,
  );
}

/** @internal */
export const InitiateKbaForCustomerResponse$inboundSchema: z.ZodType<
  InitiateKbaForCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type InitiateKbaForCustomerResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateKbaForCustomerResponse$outboundSchema: z.ZodType<
  InitiateKbaForCustomerResponse$Outbound,
  z.ZodTypeDef,
  InitiateKbaForCustomerResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateKbaForCustomerResponse$ {
  /** @deprecated use `InitiateKbaForCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = InitiateKbaForCustomerResponse$inboundSchema;
  /** @deprecated use `InitiateKbaForCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = InitiateKbaForCustomerResponse$outboundSchema;
  /** @deprecated use `InitiateKbaForCustomerResponse$Outbound` instead. */
  export type Outbound = InitiateKbaForCustomerResponse$Outbound;
}

export function initiateKbaForCustomerResponseToJSON(
  initiateKbaForCustomerResponse: InitiateKbaForCustomerResponse,
): string {
  return JSON.stringify(
    InitiateKbaForCustomerResponse$outboundSchema.parse(
      initiateKbaForCustomerResponse,
    ),
  );
}

export function initiateKbaForCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<InitiateKbaForCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateKbaForCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateKbaForCustomerResponse' from JSON`,
  );
}
