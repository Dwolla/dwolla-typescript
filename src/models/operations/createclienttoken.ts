/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateClientTokenCustomer = {
  /**
   * Link to the Customer performing the action
   */
  href: string;
};

export type CreateClientTokenLinks = {
  customer: CreateClientTokenCustomer;
};

export type CreateClientTokenRequest = {
  /**
   * A granular permission for the Customer performing an action within a drop-in component
   */
  action: string;
  links: CreateClientTokenLinks;
};

/**
 * Client token created successfully
 */
export type CreateClientTokenResponse = {
  /**
   * The client token that can be used with drop-in components
   */
  token: string;
};

/** @internal */
export const CreateClientTokenCustomer$inboundSchema: z.ZodType<
  CreateClientTokenCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
});

/** @internal */
export type CreateClientTokenCustomer$Outbound = {
  href: string;
};

/** @internal */
export const CreateClientTokenCustomer$outboundSchema: z.ZodType<
  CreateClientTokenCustomer$Outbound,
  z.ZodTypeDef,
  CreateClientTokenCustomer
> = z.object({
  href: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientTokenCustomer$ {
  /** @deprecated use `CreateClientTokenCustomer$inboundSchema` instead. */
  export const inboundSchema = CreateClientTokenCustomer$inboundSchema;
  /** @deprecated use `CreateClientTokenCustomer$outboundSchema` instead. */
  export const outboundSchema = CreateClientTokenCustomer$outboundSchema;
  /** @deprecated use `CreateClientTokenCustomer$Outbound` instead. */
  export type Outbound = CreateClientTokenCustomer$Outbound;
}

export function createClientTokenCustomerToJSON(
  createClientTokenCustomer: CreateClientTokenCustomer,
): string {
  return JSON.stringify(
    CreateClientTokenCustomer$outboundSchema.parse(createClientTokenCustomer),
  );
}

export function createClientTokenCustomerFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientTokenCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientTokenCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientTokenCustomer' from JSON`,
  );
}

/** @internal */
export const CreateClientTokenLinks$inboundSchema: z.ZodType<
  CreateClientTokenLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.lazy(() => CreateClientTokenCustomer$inboundSchema),
});

/** @internal */
export type CreateClientTokenLinks$Outbound = {
  customer: CreateClientTokenCustomer$Outbound;
};

/** @internal */
export const CreateClientTokenLinks$outboundSchema: z.ZodType<
  CreateClientTokenLinks$Outbound,
  z.ZodTypeDef,
  CreateClientTokenLinks
> = z.object({
  customer: z.lazy(() => CreateClientTokenCustomer$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientTokenLinks$ {
  /** @deprecated use `CreateClientTokenLinks$inboundSchema` instead. */
  export const inboundSchema = CreateClientTokenLinks$inboundSchema;
  /** @deprecated use `CreateClientTokenLinks$outboundSchema` instead. */
  export const outboundSchema = CreateClientTokenLinks$outboundSchema;
  /** @deprecated use `CreateClientTokenLinks$Outbound` instead. */
  export type Outbound = CreateClientTokenLinks$Outbound;
}

export function createClientTokenLinksToJSON(
  createClientTokenLinks: CreateClientTokenLinks,
): string {
  return JSON.stringify(
    CreateClientTokenLinks$outboundSchema.parse(createClientTokenLinks),
  );
}

export function createClientTokenLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientTokenLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientTokenLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientTokenLinks' from JSON`,
  );
}

/** @internal */
export const CreateClientTokenRequest$inboundSchema: z.ZodType<
  CreateClientTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string(),
  _links: z.lazy(() => CreateClientTokenLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateClientTokenRequest$Outbound = {
  action: string;
  _links: CreateClientTokenLinks$Outbound;
};

/** @internal */
export const CreateClientTokenRequest$outboundSchema: z.ZodType<
  CreateClientTokenRequest$Outbound,
  z.ZodTypeDef,
  CreateClientTokenRequest
> = z.object({
  action: z.string(),
  links: z.lazy(() => CreateClientTokenLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientTokenRequest$ {
  /** @deprecated use `CreateClientTokenRequest$inboundSchema` instead. */
  export const inboundSchema = CreateClientTokenRequest$inboundSchema;
  /** @deprecated use `CreateClientTokenRequest$outboundSchema` instead. */
  export const outboundSchema = CreateClientTokenRequest$outboundSchema;
  /** @deprecated use `CreateClientTokenRequest$Outbound` instead. */
  export type Outbound = CreateClientTokenRequest$Outbound;
}

export function createClientTokenRequestToJSON(
  createClientTokenRequest: CreateClientTokenRequest,
): string {
  return JSON.stringify(
    CreateClientTokenRequest$outboundSchema.parse(createClientTokenRequest),
  );
}

export function createClientTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientTokenRequest' from JSON`,
  );
}

/** @internal */
export const CreateClientTokenResponse$inboundSchema: z.ZodType<
  CreateClientTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type CreateClientTokenResponse$Outbound = {
  token: string;
};

/** @internal */
export const CreateClientTokenResponse$outboundSchema: z.ZodType<
  CreateClientTokenResponse$Outbound,
  z.ZodTypeDef,
  CreateClientTokenResponse
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClientTokenResponse$ {
  /** @deprecated use `CreateClientTokenResponse$inboundSchema` instead. */
  export const inboundSchema = CreateClientTokenResponse$inboundSchema;
  /** @deprecated use `CreateClientTokenResponse$outboundSchema` instead. */
  export const outboundSchema = CreateClientTokenResponse$outboundSchema;
  /** @deprecated use `CreateClientTokenResponse$Outbound` instead. */
  export type Outbound = CreateClientTokenResponse$Outbound;
}

export function createClientTokenResponseToJSON(
  createClientTokenResponse: CreateClientTokenResponse,
): string {
  return JSON.stringify(
    CreateClientTokenResponse$outboundSchema.parse(createClientTokenResponse),
  );
}

export function createClientTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateClientTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClientTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClientTokenResponse' from JSON`,
  );
}
