/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Parameters for customer to be created
 */
export type CreateCustomerRequest =
  | models.CreateUnverifiedCustomerRequestBody
  | models.CreateReceiveOnlyRequestBody
  | models.CreateVerifiedPersonalRequestBody
  | models.CreateVerifiedSolePropRequestBody
  | models.CreateVerifiedBusinessRequestBody;

export type CreateCustomerResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerRequest$inboundSchema: z.ZodType<
  CreateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.CreateUnverifiedCustomerRequestBody$inboundSchema,
  models.CreateReceiveOnlyRequestBody$inboundSchema,
  models.CreateVerifiedPersonalRequestBody$inboundSchema,
  models.CreateVerifiedSolePropRequestBody$inboundSchema,
  models.CreateVerifiedBusinessRequestBody$inboundSchema,
]);

/** @internal */
export type CreateCustomerRequest$Outbound =
  | models.CreateUnverifiedCustomerRequestBody$Outbound
  | models.CreateReceiveOnlyRequestBody$Outbound
  | models.CreateVerifiedPersonalRequestBody$Outbound
  | models.CreateVerifiedSolePropRequestBody$Outbound
  | models.CreateVerifiedBusinessRequestBody$Outbound;

/** @internal */
export const CreateCustomerRequest$outboundSchema: z.ZodType<
  CreateCustomerRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerRequest
> = z.union([
  models.CreateUnverifiedCustomerRequestBody$outboundSchema,
  models.CreateReceiveOnlyRequestBody$outboundSchema,
  models.CreateVerifiedPersonalRequestBody$outboundSchema,
  models.CreateVerifiedSolePropRequestBody$outboundSchema,
  models.CreateVerifiedBusinessRequestBody$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerRequest$ {
  /** @deprecated use `CreateCustomerRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerRequest$inboundSchema;
  /** @deprecated use `CreateCustomerRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerRequest$outboundSchema;
  /** @deprecated use `CreateCustomerRequest$Outbound` instead. */
  export type Outbound = CreateCustomerRequest$Outbound;
}

export function createCustomerRequestToJSON(
  createCustomerRequest: CreateCustomerRequest,
): string {
  return JSON.stringify(
    CreateCustomerRequest$outboundSchema.parse(createCustomerRequest),
  );
}

export function createCustomerRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerResponse$inboundSchema: z.ZodType<
  CreateCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerResponse$outboundSchema: z.ZodType<
  CreateCustomerResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerResponse$ {
  /** @deprecated use `CreateCustomerResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerResponse$inboundSchema;
  /** @deprecated use `CreateCustomerResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerResponse$outboundSchema;
  /** @deprecated use `CreateCustomerResponse$Outbound` instead. */
  export type Outbound = CreateCustomerResponse$Outbound;
}

export function createCustomerResponseToJSON(
  createCustomerResponse: CreateCustomerResponse,
): string {
  return JSON.stringify(
    CreateCustomerResponse$outboundSchema.parse(createCustomerResponse),
  );
}

export function createCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerResponse' from JSON`,
  );
}
