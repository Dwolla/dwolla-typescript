/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerExchangeRequestBody =
  | models.FinicitySecureExchangeCreateExchangeRequestBody
  | models.MXSecureExchangeCreateExchangeRequestBody
  | models.MXOpenBankingCreateExchangeRequestBody
  | models.FlinksSecureExchangeCreateExchangeRequestBody
  | models.PlaidSecureExchangeCreateExchangeRequestBody
  | models.PlaidOpenBankingCreateExchangeRequestBody;

export type CreateCustomerExchangeRequest = {
  /**
   * The ID of the customer to create an exchange for
   */
  id: string;
  requestBody:
    | models.FinicitySecureExchangeCreateExchangeRequestBody
    | models.MXSecureExchangeCreateExchangeRequestBody
    | models.MXOpenBankingCreateExchangeRequestBody
    | models.FlinksSecureExchangeCreateExchangeRequestBody
    | models.PlaidSecureExchangeCreateExchangeRequestBody
    | models.PlaidOpenBankingCreateExchangeRequestBody;
};

export type CreateCustomerExchangeResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeRequestBody$inboundSchema: z.ZodType<
  CreateCustomerExchangeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.MXSecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.MXOpenBankingCreateExchangeRequestBody$inboundSchema,
  models.FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.PlaidSecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.PlaidOpenBankingCreateExchangeRequestBody$inboundSchema,
]);

/** @internal */
export type CreateCustomerExchangeRequestBody$Outbound =
  | models.FinicitySecureExchangeCreateExchangeRequestBody$Outbound
  | models.MXSecureExchangeCreateExchangeRequestBody$Outbound
  | models.MXOpenBankingCreateExchangeRequestBody$Outbound
  | models.FlinksSecureExchangeCreateExchangeRequestBody$Outbound
  | models.PlaidSecureExchangeCreateExchangeRequestBody$Outbound
  | models.PlaidOpenBankingCreateExchangeRequestBody$Outbound;

/** @internal */
export const CreateCustomerExchangeRequestBody$outboundSchema: z.ZodType<
  CreateCustomerExchangeRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeRequestBody
> = z.union([
  models.FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.MXSecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.MXOpenBankingCreateExchangeRequestBody$outboundSchema,
  models.FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.PlaidSecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.PlaidOpenBankingCreateExchangeRequestBody$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeRequestBody$ {
  /** @deprecated use `CreateCustomerExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeRequestBody$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeRequestBody$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeRequestBody$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeRequestBody$Outbound;
}

export function createCustomerExchangeRequestBodyToJSON(
  createCustomerExchangeRequestBody: CreateCustomerExchangeRequestBody,
): string {
  return JSON.stringify(
    CreateCustomerExchangeRequestBody$outboundSchema.parse(
      createCustomerExchangeRequestBody,
    ),
  );
}

export function createCustomerExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerExchangeRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeRequest$inboundSchema: z.ZodType<
  CreateCustomerExchangeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.union([
    models.FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema,
    models.MXSecureExchangeCreateExchangeRequestBody$inboundSchema,
    models.MXOpenBankingCreateExchangeRequestBody$inboundSchema,
    models.FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema,
    models.PlaidSecureExchangeCreateExchangeRequestBody$inboundSchema,
    models.PlaidOpenBankingCreateExchangeRequestBody$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCustomerExchangeRequest$Outbound = {
  id: string;
  RequestBody:
    | models.FinicitySecureExchangeCreateExchangeRequestBody$Outbound
    | models.MXSecureExchangeCreateExchangeRequestBody$Outbound
    | models.MXOpenBankingCreateExchangeRequestBody$Outbound
    | models.FlinksSecureExchangeCreateExchangeRequestBody$Outbound
    | models.PlaidSecureExchangeCreateExchangeRequestBody$Outbound
    | models.PlaidOpenBankingCreateExchangeRequestBody$Outbound;
};

/** @internal */
export const CreateCustomerExchangeRequest$outboundSchema: z.ZodType<
  CreateCustomerExchangeRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeRequest
> = z.object({
  id: z.string(),
  requestBody: z.union([
    models.FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema,
    models.MXSecureExchangeCreateExchangeRequestBody$outboundSchema,
    models.MXOpenBankingCreateExchangeRequestBody$outboundSchema,
    models.FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema,
    models.PlaidSecureExchangeCreateExchangeRequestBody$outboundSchema,
    models.PlaidOpenBankingCreateExchangeRequestBody$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeRequest$ {
  /** @deprecated use `CreateCustomerExchangeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeRequest$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerExchangeRequest$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeRequest$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeRequest$Outbound;
}

export function createCustomerExchangeRequestToJSON(
  createCustomerExchangeRequest: CreateCustomerExchangeRequest,
): string {
  return JSON.stringify(
    CreateCustomerExchangeRequest$outboundSchema.parse(
      createCustomerExchangeRequest,
    ),
  );
}

export function createCustomerExchangeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerExchangeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeResponse$inboundSchema: z.ZodType<
  CreateCustomerExchangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerExchangeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeResponse$outboundSchema: z.ZodType<
  CreateCustomerExchangeResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeResponse$ {
  /** @deprecated use `CreateCustomerExchangeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeResponse$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerExchangeResponse$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeResponse$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeResponse$Outbound;
}

export function createCustomerExchangeResponseToJSON(
  createCustomerExchangeResponse: CreateCustomerExchangeResponse,
): string {
  return JSON.stringify(
    CreateCustomerExchangeResponse$outboundSchema.parse(
      createCustomerExchangeResponse,
    ),
  );
}

export function createCustomerExchangeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerExchangeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeResponse' from JSON`,
  );
}
