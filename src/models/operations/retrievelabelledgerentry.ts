/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetrieveLabelLedgerEntryRequest = {
  /**
   * Label reallocation unique identifier
   */
  id: string;
};

export type RetrieveLabelLedgerEntrySelf = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type ToLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type FromLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type RetrieveLabelLedgerEntryLinks = {
  self?: RetrieveLabelLedgerEntrySelf | undefined;
  toLedgerEntry?: ToLedgerEntry | undefined;
  fromLedgerEntry?: FromLedgerEntry | undefined;
};

/**
 * successful operation
 */
export type RetrieveLabelLedgerEntryResponse = {
  links?: RetrieveLabelLedgerEntryLinks | undefined;
  created?: Date | undefined;
};

/** @internal */
export const RetrieveLabelLedgerEntryRequest$inboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type RetrieveLabelLedgerEntryRequest$Outbound = {
  id: string;
};

/** @internal */
export const RetrieveLabelLedgerEntryRequest$outboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryRequest$Outbound,
  z.ZodTypeDef,
  RetrieveLabelLedgerEntryRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelLedgerEntryRequest$ {
  /** @deprecated use `RetrieveLabelLedgerEntryRequest$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelLedgerEntryRequest$inboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryRequest$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelLedgerEntryRequest$outboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryRequest$Outbound` instead. */
  export type Outbound = RetrieveLabelLedgerEntryRequest$Outbound;
}

export function retrieveLabelLedgerEntryRequestToJSON(
  retrieveLabelLedgerEntryRequest: RetrieveLabelLedgerEntryRequest,
): string {
  return JSON.stringify(
    RetrieveLabelLedgerEntryRequest$outboundSchema.parse(
      retrieveLabelLedgerEntryRequest,
    ),
  );
}

export function retrieveLabelLedgerEntryRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelLedgerEntryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelLedgerEntryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelLedgerEntryRequest' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelLedgerEntrySelf$inboundSchema: z.ZodType<
  RetrieveLabelLedgerEntrySelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type RetrieveLabelLedgerEntrySelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const RetrieveLabelLedgerEntrySelf$outboundSchema: z.ZodType<
  RetrieveLabelLedgerEntrySelf$Outbound,
  z.ZodTypeDef,
  RetrieveLabelLedgerEntrySelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelLedgerEntrySelf$ {
  /** @deprecated use `RetrieveLabelLedgerEntrySelf$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelLedgerEntrySelf$inboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntrySelf$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelLedgerEntrySelf$outboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntrySelf$Outbound` instead. */
  export type Outbound = RetrieveLabelLedgerEntrySelf$Outbound;
}

export function retrieveLabelLedgerEntrySelfToJSON(
  retrieveLabelLedgerEntrySelf: RetrieveLabelLedgerEntrySelf,
): string {
  return JSON.stringify(
    RetrieveLabelLedgerEntrySelf$outboundSchema.parse(
      retrieveLabelLedgerEntrySelf,
    ),
  );
}

export function retrieveLabelLedgerEntrySelfFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelLedgerEntrySelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelLedgerEntrySelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelLedgerEntrySelf' from JSON`,
  );
}

/** @internal */
export const ToLedgerEntry$inboundSchema: z.ZodType<
  ToLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type ToLedgerEntry$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const ToLedgerEntry$outboundSchema: z.ZodType<
  ToLedgerEntry$Outbound,
  z.ZodTypeDef,
  ToLedgerEntry
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ToLedgerEntry$ {
  /** @deprecated use `ToLedgerEntry$inboundSchema` instead. */
  export const inboundSchema = ToLedgerEntry$inboundSchema;
  /** @deprecated use `ToLedgerEntry$outboundSchema` instead. */
  export const outboundSchema = ToLedgerEntry$outboundSchema;
  /** @deprecated use `ToLedgerEntry$Outbound` instead. */
  export type Outbound = ToLedgerEntry$Outbound;
}

export function toLedgerEntryToJSON(toLedgerEntry: ToLedgerEntry): string {
  return JSON.stringify(ToLedgerEntry$outboundSchema.parse(toLedgerEntry));
}

export function toLedgerEntryFromJSON(
  jsonString: string,
): SafeParseResult<ToLedgerEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ToLedgerEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ToLedgerEntry' from JSON`,
  );
}

/** @internal */
export const FromLedgerEntry$inboundSchema: z.ZodType<
  FromLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type FromLedgerEntry$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const FromLedgerEntry$outboundSchema: z.ZodType<
  FromLedgerEntry$Outbound,
  z.ZodTypeDef,
  FromLedgerEntry
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FromLedgerEntry$ {
  /** @deprecated use `FromLedgerEntry$inboundSchema` instead. */
  export const inboundSchema = FromLedgerEntry$inboundSchema;
  /** @deprecated use `FromLedgerEntry$outboundSchema` instead. */
  export const outboundSchema = FromLedgerEntry$outboundSchema;
  /** @deprecated use `FromLedgerEntry$Outbound` instead. */
  export type Outbound = FromLedgerEntry$Outbound;
}

export function fromLedgerEntryToJSON(
  fromLedgerEntry: FromLedgerEntry,
): string {
  return JSON.stringify(FromLedgerEntry$outboundSchema.parse(fromLedgerEntry));
}

export function fromLedgerEntryFromJSON(
  jsonString: string,
): SafeParseResult<FromLedgerEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FromLedgerEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FromLedgerEntry' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelLedgerEntryLinks$inboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => RetrieveLabelLedgerEntrySelf$inboundSchema).optional(),
  "to-ledger-entry": z.lazy(() => ToLedgerEntry$inboundSchema).optional(),
  "from-ledger-entry": z.lazy(() => FromLedgerEntry$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "to-ledger-entry": "toLedgerEntry",
    "from-ledger-entry": "fromLedgerEntry",
  });
});

/** @internal */
export type RetrieveLabelLedgerEntryLinks$Outbound = {
  self?: RetrieveLabelLedgerEntrySelf$Outbound | undefined;
  "to-ledger-entry"?: ToLedgerEntry$Outbound | undefined;
  "from-ledger-entry"?: FromLedgerEntry$Outbound | undefined;
};

/** @internal */
export const RetrieveLabelLedgerEntryLinks$outboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryLinks$Outbound,
  z.ZodTypeDef,
  RetrieveLabelLedgerEntryLinks
> = z.object({
  self: z.lazy(() => RetrieveLabelLedgerEntrySelf$outboundSchema).optional(),
  toLedgerEntry: z.lazy(() => ToLedgerEntry$outboundSchema).optional(),
  fromLedgerEntry: z.lazy(() => FromLedgerEntry$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    toLedgerEntry: "to-ledger-entry",
    fromLedgerEntry: "from-ledger-entry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelLedgerEntryLinks$ {
  /** @deprecated use `RetrieveLabelLedgerEntryLinks$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelLedgerEntryLinks$inboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryLinks$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelLedgerEntryLinks$outboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryLinks$Outbound` instead. */
  export type Outbound = RetrieveLabelLedgerEntryLinks$Outbound;
}

export function retrieveLabelLedgerEntryLinksToJSON(
  retrieveLabelLedgerEntryLinks: RetrieveLabelLedgerEntryLinks,
): string {
  return JSON.stringify(
    RetrieveLabelLedgerEntryLinks$outboundSchema.parse(
      retrieveLabelLedgerEntryLinks,
    ),
  );
}

export function retrieveLabelLedgerEntryLinksFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelLedgerEntryLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelLedgerEntryLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelLedgerEntryLinks' from JSON`,
  );
}

/** @internal */
export const RetrieveLabelLedgerEntryResponse$inboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => RetrieveLabelLedgerEntryLinks$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type RetrieveLabelLedgerEntryResponse$Outbound = {
  _links?: RetrieveLabelLedgerEntryLinks$Outbound | undefined;
  created?: string | undefined;
};

/** @internal */
export const RetrieveLabelLedgerEntryResponse$outboundSchema: z.ZodType<
  RetrieveLabelLedgerEntryResponse$Outbound,
  z.ZodTypeDef,
  RetrieveLabelLedgerEntryResponse
> = z.object({
  links: z.lazy(() => RetrieveLabelLedgerEntryLinks$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetrieveLabelLedgerEntryResponse$ {
  /** @deprecated use `RetrieveLabelLedgerEntryResponse$inboundSchema` instead. */
  export const inboundSchema = RetrieveLabelLedgerEntryResponse$inboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryResponse$outboundSchema` instead. */
  export const outboundSchema = RetrieveLabelLedgerEntryResponse$outboundSchema;
  /** @deprecated use `RetrieveLabelLedgerEntryResponse$Outbound` instead. */
  export type Outbound = RetrieveLabelLedgerEntryResponse$Outbound;
}

export function retrieveLabelLedgerEntryResponseToJSON(
  retrieveLabelLedgerEntryResponse: RetrieveLabelLedgerEntryResponse,
): string {
  return JSON.stringify(
    RetrieveLabelLedgerEntryResponse$outboundSchema.parse(
      retrieveLabelLedgerEntryResponse,
    ),
  );
}

export function retrieveLabelLedgerEntryResponseFromJSON(
  jsonString: string,
): SafeParseResult<RetrieveLabelLedgerEntryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetrieveLabelLedgerEntryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetrieveLabelLedgerEntryResponse' from JSON`,
  );
}
