/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAccountFundingSourcesRequest = {
  /**
   * Account's unique identifier
   */
  id: string;
  /**
   * Filter removed funding sources. Boolean value. Defaults to `true`
   */
  removed?: string | undefined;
};

/** @internal */
export const ListAccountFundingSourcesRequest$inboundSchema: z.ZodType<
  ListAccountFundingSourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  removed: z.string().optional(),
});

/** @internal */
export type ListAccountFundingSourcesRequest$Outbound = {
  id: string;
  removed?: string | undefined;
};

/** @internal */
export const ListAccountFundingSourcesRequest$outboundSchema: z.ZodType<
  ListAccountFundingSourcesRequest$Outbound,
  z.ZodTypeDef,
  ListAccountFundingSourcesRequest
> = z.object({
  id: z.string(),
  removed: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountFundingSourcesRequest$ {
  /** @deprecated use `ListAccountFundingSourcesRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountFundingSourcesRequest$inboundSchema;
  /** @deprecated use `ListAccountFundingSourcesRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountFundingSourcesRequest$outboundSchema;
  /** @deprecated use `ListAccountFundingSourcesRequest$Outbound` instead. */
  export type Outbound = ListAccountFundingSourcesRequest$Outbound;
}

export function listAccountFundingSourcesRequestToJSON(
  listAccountFundingSourcesRequest: ListAccountFundingSourcesRequest,
): string {
  return JSON.stringify(
    ListAccountFundingSourcesRequest$outboundSchema.parse(
      listAccountFundingSourcesRequest,
    ),
  );
}

export function listAccountFundingSourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountFundingSourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountFundingSourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountFundingSourcesRequest' from JSON`,
  );
}
