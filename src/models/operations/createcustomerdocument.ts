/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateCustomerDocumentFile = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * Upload a document for a customer.
 */
export type CreateCustomerDocumentRequestBody = {
  documentType?: string | undefined;
  file?: CreateCustomerDocumentFile | Blob | undefined;
};

export type CreateCustomerDocumentRequest = {
  /**
   * customer unique identifier
   */
  id: string;
  /**
   * Upload a document for a customer.
   */
  requestBody: CreateCustomerDocumentRequestBody;
};

export type CreateCustomerDocumentResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerDocumentFile$inboundSchema: z.ZodType<
  CreateCustomerDocumentFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type CreateCustomerDocumentFile$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const CreateCustomerDocumentFile$outboundSchema: z.ZodType<
  CreateCustomerDocumentFile$Outbound,
  z.ZodTypeDef,
  CreateCustomerDocumentFile
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDocumentFile$ {
  /** @deprecated use `CreateCustomerDocumentFile$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDocumentFile$inboundSchema;
  /** @deprecated use `CreateCustomerDocumentFile$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerDocumentFile$outboundSchema;
  /** @deprecated use `CreateCustomerDocumentFile$Outbound` instead. */
  export type Outbound = CreateCustomerDocumentFile$Outbound;
}

export function createCustomerDocumentFileToJSON(
  createCustomerDocumentFile: CreateCustomerDocumentFile,
): string {
  return JSON.stringify(
    CreateCustomerDocumentFile$outboundSchema.parse(createCustomerDocumentFile),
  );
}

export function createCustomerDocumentFileFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDocumentFile, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDocumentFile$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDocumentFile' from JSON`,
  );
}

/** @internal */
export const CreateCustomerDocumentRequestBody$inboundSchema: z.ZodType<
  CreateCustomerDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentType: z.string().optional(),
  file: z.lazy(() => CreateCustomerDocumentFile$inboundSchema).optional(),
});

/** @internal */
export type CreateCustomerDocumentRequestBody$Outbound = {
  documentType?: string | undefined;
  file?: CreateCustomerDocumentFile$Outbound | Blob | undefined;
};

/** @internal */
export const CreateCustomerDocumentRequestBody$outboundSchema: z.ZodType<
  CreateCustomerDocumentRequestBody$Outbound,
  z.ZodTypeDef,
  CreateCustomerDocumentRequestBody
> = z.object({
  documentType: z.string().optional(),
  file: z.lazy(() => CreateCustomerDocumentFile$outboundSchema).or(
    blobLikeSchema,
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDocumentRequestBody$ {
  /** @deprecated use `CreateCustomerDocumentRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDocumentRequestBody$inboundSchema;
  /** @deprecated use `CreateCustomerDocumentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerDocumentRequestBody$outboundSchema;
  /** @deprecated use `CreateCustomerDocumentRequestBody$Outbound` instead. */
  export type Outbound = CreateCustomerDocumentRequestBody$Outbound;
}

export function createCustomerDocumentRequestBodyToJSON(
  createCustomerDocumentRequestBody: CreateCustomerDocumentRequestBody,
): string {
  return JSON.stringify(
    CreateCustomerDocumentRequestBody$outboundSchema.parse(
      createCustomerDocumentRequestBody,
    ),
  );
}

export function createCustomerDocumentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDocumentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDocumentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDocumentRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateCustomerDocumentRequest$inboundSchema: z.ZodType<
  CreateCustomerDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => CreateCustomerDocumentRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateCustomerDocumentRequest$Outbound = {
  id: string;
  RequestBody: CreateCustomerDocumentRequestBody$Outbound;
};

/** @internal */
export const CreateCustomerDocumentRequest$outboundSchema: z.ZodType<
  CreateCustomerDocumentRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerDocumentRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => CreateCustomerDocumentRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDocumentRequest$ {
  /** @deprecated use `CreateCustomerDocumentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDocumentRequest$inboundSchema;
  /** @deprecated use `CreateCustomerDocumentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerDocumentRequest$outboundSchema;
  /** @deprecated use `CreateCustomerDocumentRequest$Outbound` instead. */
  export type Outbound = CreateCustomerDocumentRequest$Outbound;
}

export function createCustomerDocumentRequestToJSON(
  createCustomerDocumentRequest: CreateCustomerDocumentRequest,
): string {
  return JSON.stringify(
    CreateCustomerDocumentRequest$outboundSchema.parse(
      createCustomerDocumentRequest,
    ),
  );
}

export function createCustomerDocumentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDocumentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDocumentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDocumentRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerDocumentResponse$inboundSchema: z.ZodType<
  CreateCustomerDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerDocumentResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerDocumentResponse$outboundSchema: z.ZodType<
  CreateCustomerDocumentResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerDocumentResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerDocumentResponse$ {
  /** @deprecated use `CreateCustomerDocumentResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerDocumentResponse$inboundSchema;
  /** @deprecated use `CreateCustomerDocumentResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerDocumentResponse$outboundSchema;
  /** @deprecated use `CreateCustomerDocumentResponse$Outbound` instead. */
  export type Outbound = CreateCustomerDocumentResponse$Outbound;
}

export function createCustomerDocumentResponseToJSON(
  createCustomerDocumentResponse: CreateCustomerDocumentResponse,
): string {
  return JSON.stringify(
    CreateCustomerDocumentResponse$outboundSchema.parse(
      createCustomerDocumentResponse,
    ),
  );
}

export function createCustomerDocumentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerDocumentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerDocumentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerDocumentResponse' from JSON`,
  );
}
