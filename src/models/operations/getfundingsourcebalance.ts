/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetFundingSourceBalanceRequest = {
  /**
   * ID of funding source to retrieve the balance for
   */
  id: string;
};

export type Balance = {
  value?: string | undefined;
  currency?: string | undefined;
};

export type Total = {
  value?: string | undefined;
  currency?: string | undefined;
};

/**
 * successful operation
 */
export type GetFundingSourceBalanceResponse = {
  links?: { [k: string]: models.HalLink } | undefined;
  balance?: Balance | undefined;
  total?: Total | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const GetFundingSourceBalanceRequest$inboundSchema: z.ZodType<
  GetFundingSourceBalanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetFundingSourceBalanceRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetFundingSourceBalanceRequest$outboundSchema: z.ZodType<
  GetFundingSourceBalanceRequest$Outbound,
  z.ZodTypeDef,
  GetFundingSourceBalanceRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFundingSourceBalanceRequest$ {
  /** @deprecated use `GetFundingSourceBalanceRequest$inboundSchema` instead. */
  export const inboundSchema = GetFundingSourceBalanceRequest$inboundSchema;
  /** @deprecated use `GetFundingSourceBalanceRequest$outboundSchema` instead. */
  export const outboundSchema = GetFundingSourceBalanceRequest$outboundSchema;
  /** @deprecated use `GetFundingSourceBalanceRequest$Outbound` instead. */
  export type Outbound = GetFundingSourceBalanceRequest$Outbound;
}

export function getFundingSourceBalanceRequestToJSON(
  getFundingSourceBalanceRequest: GetFundingSourceBalanceRequest,
): string {
  return JSON.stringify(
    GetFundingSourceBalanceRequest$outboundSchema.parse(
      getFundingSourceBalanceRequest,
    ),
  );
}

export function getFundingSourceBalanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetFundingSourceBalanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFundingSourceBalanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFundingSourceBalanceRequest' from JSON`,
  );
}

/** @internal */
export const Balance$inboundSchema: z.ZodType<Balance, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string().optional(),
    currency: z.string().optional(),
  });

/** @internal */
export type Balance$Outbound = {
  value?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const Balance$outboundSchema: z.ZodType<
  Balance$Outbound,
  z.ZodTypeDef,
  Balance
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Balance$ {
  /** @deprecated use `Balance$inboundSchema` instead. */
  export const inboundSchema = Balance$inboundSchema;
  /** @deprecated use `Balance$outboundSchema` instead. */
  export const outboundSchema = Balance$outboundSchema;
  /** @deprecated use `Balance$Outbound` instead. */
  export type Outbound = Balance$Outbound;
}

export function balanceToJSON(balance: Balance): string {
  return JSON.stringify(Balance$outboundSchema.parse(balance));
}

export function balanceFromJSON(
  jsonString: string,
): SafeParseResult<Balance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Balance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Balance' from JSON`,
  );
}

/** @internal */
export const Total$inboundSchema: z.ZodType<Total, z.ZodTypeDef, unknown> = z
  .object({
    value: z.string().optional(),
    currency: z.string().optional(),
  });

/** @internal */
export type Total$Outbound = {
  value?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const Total$outboundSchema: z.ZodType<
  Total$Outbound,
  z.ZodTypeDef,
  Total
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Total$ {
  /** @deprecated use `Total$inboundSchema` instead. */
  export const inboundSchema = Total$inboundSchema;
  /** @deprecated use `Total$outboundSchema` instead. */
  export const outboundSchema = Total$outboundSchema;
  /** @deprecated use `Total$Outbound` instead. */
  export type Outbound = Total$Outbound;
}

export function totalToJSON(total: Total): string {
  return JSON.stringify(Total$outboundSchema.parse(total));
}

export function totalFromJSON(
  jsonString: string,
): SafeParseResult<Total, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Total$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Total' from JSON`,
  );
}

/** @internal */
export const GetFundingSourceBalanceResponse$inboundSchema: z.ZodType<
  GetFundingSourceBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(models.HalLink$inboundSchema).optional(),
  balance: z.lazy(() => Balance$inboundSchema).optional(),
  total: z.lazy(() => Total$inboundSchema).optional(),
  lastUpdated: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetFundingSourceBalanceResponse$Outbound = {
  _links?: { [k: string]: models.HalLink$Outbound } | undefined;
  balance?: Balance$Outbound | undefined;
  total?: Total$Outbound | undefined;
  lastUpdated?: string | undefined;
};

/** @internal */
export const GetFundingSourceBalanceResponse$outboundSchema: z.ZodType<
  GetFundingSourceBalanceResponse$Outbound,
  z.ZodTypeDef,
  GetFundingSourceBalanceResponse
> = z.object({
  links: z.record(models.HalLink$outboundSchema).optional(),
  balance: z.lazy(() => Balance$outboundSchema).optional(),
  total: z.lazy(() => Total$outboundSchema).optional(),
  lastUpdated: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetFundingSourceBalanceResponse$ {
  /** @deprecated use `GetFundingSourceBalanceResponse$inboundSchema` instead. */
  export const inboundSchema = GetFundingSourceBalanceResponse$inboundSchema;
  /** @deprecated use `GetFundingSourceBalanceResponse$outboundSchema` instead. */
  export const outboundSchema = GetFundingSourceBalanceResponse$outboundSchema;
  /** @deprecated use `GetFundingSourceBalanceResponse$Outbound` instead. */
  export type Outbound = GetFundingSourceBalanceResponse$Outbound;
}

export function getFundingSourceBalanceResponseToJSON(
  getFundingSourceBalanceResponse: GetFundingSourceBalanceResponse,
): string {
  return JSON.stringify(
    GetFundingSourceBalanceResponse$outboundSchema.parse(
      getFundingSourceBalanceResponse,
    ),
  );
}

export function getFundingSourceBalanceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetFundingSourceBalanceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetFundingSourceBalanceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetFundingSourceBalanceResponse' from JSON`,
  );
}
