/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Amount1 = {
  value: string;
  currency: string;
};

export type Amount2 = {
  value: string;
  currency: string;
};

/**
 * The micro-deposit amounts received in the bank account
 */
export type VerifyMicroDepositsRequestBody = {
  amount1: Amount1;
  amount2: Amount2;
};

export type VerifyMicroDepositsRequest = {
  /**
   * The ID of the funding source to verify micro-deposits for
   */
  id: string;
  /**
   * The micro-deposit amounts received in the bank account
   */
  requestBody: VerifyMicroDepositsRequestBody;
};

export type BadRequestLinks = {};

export type ErrorT = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: BadRequestLinks | undefined;
};

export type VerifyMicroDepositsEmbedded = {
  errors?: Array<ErrorT> | undefined;
};

export type VerifyMicroDepositsSelf = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export type VerifyMicroDepositsLinks = {
  self?: VerifyMicroDepositsSelf | undefined;
};

/**
 * Micro-deposits verified successfully
 */
export type VerifyMicroDepositsResponse = {
  links?: VerifyMicroDepositsLinks | undefined;
};

/** @internal */
export const Amount1$inboundSchema: z.ZodType<Amount1, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string(),
    currency: z.string(),
  });

/** @internal */
export type Amount1$Outbound = {
  value: string;
  currency: string;
};

/** @internal */
export const Amount1$outboundSchema: z.ZodType<
  Amount1$Outbound,
  z.ZodTypeDef,
  Amount1
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount1$ {
  /** @deprecated use `Amount1$inboundSchema` instead. */
  export const inboundSchema = Amount1$inboundSchema;
  /** @deprecated use `Amount1$outboundSchema` instead. */
  export const outboundSchema = Amount1$outboundSchema;
  /** @deprecated use `Amount1$Outbound` instead. */
  export type Outbound = Amount1$Outbound;
}

export function amount1ToJSON(amount1: Amount1): string {
  return JSON.stringify(Amount1$outboundSchema.parse(amount1));
}

export function amount1FromJSON(
  jsonString: string,
): SafeParseResult<Amount1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount1' from JSON`,
  );
}

/** @internal */
export const Amount2$inboundSchema: z.ZodType<Amount2, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string(),
    currency: z.string(),
  });

/** @internal */
export type Amount2$Outbound = {
  value: string;
  currency: string;
};

/** @internal */
export const Amount2$outboundSchema: z.ZodType<
  Amount2$Outbound,
  z.ZodTypeDef,
  Amount2
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount2$ {
  /** @deprecated use `Amount2$inboundSchema` instead. */
  export const inboundSchema = Amount2$inboundSchema;
  /** @deprecated use `Amount2$outboundSchema` instead. */
  export const outboundSchema = Amount2$outboundSchema;
  /** @deprecated use `Amount2$Outbound` instead. */
  export type Outbound = Amount2$Outbound;
}

export function amount2ToJSON(amount2: Amount2): string {
  return JSON.stringify(Amount2$outboundSchema.parse(amount2));
}

export function amount2FromJSON(
  jsonString: string,
): SafeParseResult<Amount2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount2' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsRequestBody$inboundSchema: z.ZodType<
  VerifyMicroDepositsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount1: z.lazy(() => Amount1$inboundSchema),
  amount2: z.lazy(() => Amount2$inboundSchema),
});

/** @internal */
export type VerifyMicroDepositsRequestBody$Outbound = {
  amount1: Amount1$Outbound;
  amount2: Amount2$Outbound;
};

/** @internal */
export const VerifyMicroDepositsRequestBody$outboundSchema: z.ZodType<
  VerifyMicroDepositsRequestBody$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsRequestBody
> = z.object({
  amount1: z.lazy(() => Amount1$outboundSchema),
  amount2: z.lazy(() => Amount2$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsRequestBody$ {
  /** @deprecated use `VerifyMicroDepositsRequestBody$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsRequestBody$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsRequestBody$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsRequestBody$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsRequestBody$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsRequestBody$Outbound;
}

export function verifyMicroDepositsRequestBodyToJSON(
  verifyMicroDepositsRequestBody: VerifyMicroDepositsRequestBody,
): string {
  return JSON.stringify(
    VerifyMicroDepositsRequestBody$outboundSchema.parse(
      verifyMicroDepositsRequestBody,
    ),
  );
}

export function verifyMicroDepositsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsRequestBody' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsRequest$inboundSchema: z.ZodType<
  VerifyMicroDepositsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => VerifyMicroDepositsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type VerifyMicroDepositsRequest$Outbound = {
  id: string;
  RequestBody: VerifyMicroDepositsRequestBody$Outbound;
};

/** @internal */
export const VerifyMicroDepositsRequest$outboundSchema: z.ZodType<
  VerifyMicroDepositsRequest$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => VerifyMicroDepositsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsRequest$ {
  /** @deprecated use `VerifyMicroDepositsRequest$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsRequest$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsRequest$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsRequest$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsRequest$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsRequest$Outbound;
}

export function verifyMicroDepositsRequestToJSON(
  verifyMicroDepositsRequest: VerifyMicroDepositsRequest,
): string {
  return JSON.stringify(
    VerifyMicroDepositsRequest$outboundSchema.parse(verifyMicroDepositsRequest),
  );
}

export function verifyMicroDepositsRequestFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsRequest' from JSON`,
  );
}

/** @internal */
export const BadRequestLinks$inboundSchema: z.ZodType<
  BadRequestLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BadRequestLinks$Outbound = {};

/** @internal */
export const BadRequestLinks$outboundSchema: z.ZodType<
  BadRequestLinks$Outbound,
  z.ZodTypeDef,
  BadRequestLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestLinks$ {
  /** @deprecated use `BadRequestLinks$inboundSchema` instead. */
  export const inboundSchema = BadRequestLinks$inboundSchema;
  /** @deprecated use `BadRequestLinks$outboundSchema` instead. */
  export const outboundSchema = BadRequestLinks$outboundSchema;
  /** @deprecated use `BadRequestLinks$Outbound` instead. */
  export type Outbound = BadRequestLinks$Outbound;
}

export function badRequestLinksToJSON(
  badRequestLinks: BadRequestLinks,
): string {
  return JSON.stringify(BadRequestLinks$outboundSchema.parse(badRequestLinks));
}

export function badRequestLinksFromJSON(
  jsonString: string,
): SafeParseResult<BadRequestLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BadRequestLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BadRequestLinks' from JSON`,
  );
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() => BadRequestLinks$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type ErrorT$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: BadRequestLinks$Outbound | undefined;
};

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => BadRequestLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsEmbedded$inboundSchema: z.ZodType<
  VerifyMicroDepositsEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => ErrorT$inboundSchema)).optional(),
});

/** @internal */
export type VerifyMicroDepositsEmbedded$Outbound = {
  errors?: Array<ErrorT$Outbound> | undefined;
};

/** @internal */
export const VerifyMicroDepositsEmbedded$outboundSchema: z.ZodType<
  VerifyMicroDepositsEmbedded$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsEmbedded
> = z.object({
  errors: z.array(z.lazy(() => ErrorT$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsEmbedded$ {
  /** @deprecated use `VerifyMicroDepositsEmbedded$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsEmbedded$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsEmbedded$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsEmbedded$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsEmbedded$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsEmbedded$Outbound;
}

export function verifyMicroDepositsEmbeddedToJSON(
  verifyMicroDepositsEmbedded: VerifyMicroDepositsEmbedded,
): string {
  return JSON.stringify(
    VerifyMicroDepositsEmbedded$outboundSchema.parse(
      verifyMicroDepositsEmbedded,
    ),
  );
}

export function verifyMicroDepositsEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsEmbedded' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsSelf$inboundSchema: z.ZodType<
  VerifyMicroDepositsSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  "resource-type": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "resource-type": "resourceType",
  });
});

/** @internal */
export type VerifyMicroDepositsSelf$Outbound = {
  href?: string | undefined;
  type?: string | undefined;
  "resource-type"?: string | undefined;
};

/** @internal */
export const VerifyMicroDepositsSelf$outboundSchema: z.ZodType<
  VerifyMicroDepositsSelf$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsSelf
> = z.object({
  href: z.string().optional(),
  type: z.string().optional(),
  resourceType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    resourceType: "resource-type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsSelf$ {
  /** @deprecated use `VerifyMicroDepositsSelf$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsSelf$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsSelf$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsSelf$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsSelf$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsSelf$Outbound;
}

export function verifyMicroDepositsSelfToJSON(
  verifyMicroDepositsSelf: VerifyMicroDepositsSelf,
): string {
  return JSON.stringify(
    VerifyMicroDepositsSelf$outboundSchema.parse(verifyMicroDepositsSelf),
  );
}

export function verifyMicroDepositsSelfFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsSelf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsSelf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsSelf' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsLinks$inboundSchema: z.ZodType<
  VerifyMicroDepositsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.lazy(() => VerifyMicroDepositsSelf$inboundSchema).optional(),
});

/** @internal */
export type VerifyMicroDepositsLinks$Outbound = {
  self?: VerifyMicroDepositsSelf$Outbound | undefined;
};

/** @internal */
export const VerifyMicroDepositsLinks$outboundSchema: z.ZodType<
  VerifyMicroDepositsLinks$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsLinks
> = z.object({
  self: z.lazy(() => VerifyMicroDepositsSelf$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsLinks$ {
  /** @deprecated use `VerifyMicroDepositsLinks$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsLinks$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsLinks$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsLinks$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsLinks$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsLinks$Outbound;
}

export function verifyMicroDepositsLinksToJSON(
  verifyMicroDepositsLinks: VerifyMicroDepositsLinks,
): string {
  return JSON.stringify(
    VerifyMicroDepositsLinks$outboundSchema.parse(verifyMicroDepositsLinks),
  );
}

export function verifyMicroDepositsLinksFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsLinks' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDepositsResponse$inboundSchema: z.ZodType<
  VerifyMicroDepositsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => VerifyMicroDepositsLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type VerifyMicroDepositsResponse$Outbound = {
  _links?: VerifyMicroDepositsLinks$Outbound | undefined;
};

/** @internal */
export const VerifyMicroDepositsResponse$outboundSchema: z.ZodType<
  VerifyMicroDepositsResponse$Outbound,
  z.ZodTypeDef,
  VerifyMicroDepositsResponse
> = z.object({
  links: z.lazy(() => VerifyMicroDepositsLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsResponse$ {
  /** @deprecated use `VerifyMicroDepositsResponse$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDepositsResponse$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsResponse$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDepositsResponse$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsResponse$Outbound` instead. */
  export type Outbound = VerifyMicroDepositsResponse$Outbound;
}

export function verifyMicroDepositsResponseToJSON(
  verifyMicroDepositsResponse: VerifyMicroDepositsResponse,
): string {
  return JSON.stringify(
    VerifyMicroDepositsResponse$outboundSchema.parse(
      verifyMicroDepositsResponse,
    ),
  );
}

export function verifyMicroDepositsResponseFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDepositsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDepositsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDepositsResponse' from JSON`,
  );
}
