/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetTransferFailureReasonRequest = {
  /**
   * Transfer unique identifier
   */
  id: string;
};

/**
 * successful operation
 */
export type GetTransferFailureReasonResponse = {
  links?: { [k: string]: models.HalLink } | undefined;
  code?: string | undefined;
  description?: string | undefined;
  explanation?: string | undefined;
};

/** @internal */
export const GetTransferFailureReasonRequest$inboundSchema: z.ZodType<
  GetTransferFailureReasonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetTransferFailureReasonRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetTransferFailureReasonRequest$outboundSchema: z.ZodType<
  GetTransferFailureReasonRequest$Outbound,
  z.ZodTypeDef,
  GetTransferFailureReasonRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferFailureReasonRequest$ {
  /** @deprecated use `GetTransferFailureReasonRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransferFailureReasonRequest$inboundSchema;
  /** @deprecated use `GetTransferFailureReasonRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransferFailureReasonRequest$outboundSchema;
  /** @deprecated use `GetTransferFailureReasonRequest$Outbound` instead. */
  export type Outbound = GetTransferFailureReasonRequest$Outbound;
}

export function getTransferFailureReasonRequestToJSON(
  getTransferFailureReasonRequest: GetTransferFailureReasonRequest,
): string {
  return JSON.stringify(
    GetTransferFailureReasonRequest$outboundSchema.parse(
      getTransferFailureReasonRequest,
    ),
  );
}

export function getTransferFailureReasonRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferFailureReasonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferFailureReasonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferFailureReasonRequest' from JSON`,
  );
}

/** @internal */
export const GetTransferFailureReasonResponse$inboundSchema: z.ZodType<
  GetTransferFailureReasonResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(models.HalLink$inboundSchema).optional(),
  code: z.string().optional(),
  description: z.string().optional(),
  explanation: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetTransferFailureReasonResponse$Outbound = {
  _links?: { [k: string]: models.HalLink$Outbound } | undefined;
  code?: string | undefined;
  description?: string | undefined;
  explanation?: string | undefined;
};

/** @internal */
export const GetTransferFailureReasonResponse$outboundSchema: z.ZodType<
  GetTransferFailureReasonResponse$Outbound,
  z.ZodTypeDef,
  GetTransferFailureReasonResponse
> = z.object({
  links: z.record(models.HalLink$outboundSchema).optional(),
  code: z.string().optional(),
  description: z.string().optional(),
  explanation: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransferFailureReasonResponse$ {
  /** @deprecated use `GetTransferFailureReasonResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransferFailureReasonResponse$inboundSchema;
  /** @deprecated use `GetTransferFailureReasonResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransferFailureReasonResponse$outboundSchema;
  /** @deprecated use `GetTransferFailureReasonResponse$Outbound` instead. */
  export type Outbound = GetTransferFailureReasonResponse$Outbound;
}

export function getTransferFailureReasonResponseToJSON(
  getTransferFailureReasonResponse: GetTransferFailureReasonResponse,
): string {
  return JSON.stringify(
    GetTransferFailureReasonResponse$outboundSchema.parse(
      getTransferFailureReasonResponse,
    ),
  );
}

export function getTransferFailureReasonResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransferFailureReasonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransferFailureReasonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransferFailureReasonResponse' from JSON`,
  );
}
