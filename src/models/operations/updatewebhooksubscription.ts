/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameters to update a webhook subscription
 */
export type UpdateWebhookSubscriptionRequestBody = {
  paused: boolean;
};

export type UpdateWebhookSubscriptionRequest = {
  /**
   * Webhook unique identifier
   */
  id: string;
  /**
   * Parameters to update a webhook subscription
   */
  requestBody: UpdateWebhookSubscriptionRequestBody;
};

/** @internal */
export const UpdateWebhookSubscriptionRequestBody$inboundSchema: z.ZodType<
  UpdateWebhookSubscriptionRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  paused: z.boolean(),
});

/** @internal */
export type UpdateWebhookSubscriptionRequestBody$Outbound = {
  paused: boolean;
};

/** @internal */
export const UpdateWebhookSubscriptionRequestBody$outboundSchema: z.ZodType<
  UpdateWebhookSubscriptionRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateWebhookSubscriptionRequestBody
> = z.object({
  paused: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookSubscriptionRequestBody$ {
  /** @deprecated use `UpdateWebhookSubscriptionRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateWebhookSubscriptionRequestBody$inboundSchema;
  /** @deprecated use `UpdateWebhookSubscriptionRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateWebhookSubscriptionRequestBody$outboundSchema;
  /** @deprecated use `UpdateWebhookSubscriptionRequestBody$Outbound` instead. */
  export type Outbound = UpdateWebhookSubscriptionRequestBody$Outbound;
}

export function updateWebhookSubscriptionRequestBodyToJSON(
  updateWebhookSubscriptionRequestBody: UpdateWebhookSubscriptionRequestBody,
): string {
  return JSON.stringify(
    UpdateWebhookSubscriptionRequestBody$outboundSchema.parse(
      updateWebhookSubscriptionRequestBody,
    ),
  );
}

export function updateWebhookSubscriptionRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookSubscriptionRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateWebhookSubscriptionRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookSubscriptionRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateWebhookSubscriptionRequest$inboundSchema: z.ZodType<
  UpdateWebhookSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => UpdateWebhookSubscriptionRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateWebhookSubscriptionRequest$Outbound = {
  id: string;
  RequestBody: UpdateWebhookSubscriptionRequestBody$Outbound;
};

/** @internal */
export const UpdateWebhookSubscriptionRequest$outboundSchema: z.ZodType<
  UpdateWebhookSubscriptionRequest$Outbound,
  z.ZodTypeDef,
  UpdateWebhookSubscriptionRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() =>
    UpdateWebhookSubscriptionRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateWebhookSubscriptionRequest$ {
  /** @deprecated use `UpdateWebhookSubscriptionRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateWebhookSubscriptionRequest$inboundSchema;
  /** @deprecated use `UpdateWebhookSubscriptionRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateWebhookSubscriptionRequest$outboundSchema;
  /** @deprecated use `UpdateWebhookSubscriptionRequest$Outbound` instead. */
  export type Outbound = UpdateWebhookSubscriptionRequest$Outbound;
}

export function updateWebhookSubscriptionRequestToJSON(
  updateWebhookSubscriptionRequest: UpdateWebhookSubscriptionRequest,
): string {
  return JSON.stringify(
    UpdateWebhookSubscriptionRequest$outboundSchema.parse(
      updateWebhookSubscriptionRequest,
    ),
  );
}

export function updateWebhookSubscriptionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateWebhookSubscriptionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateWebhookSubscriptionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateWebhookSubscriptionRequest' from JSON`,
  );
}
