/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateVerifiedPersonalCustomerResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateVerifiedPersonalCustomerResponse$inboundSchema: z.ZodType<
  CreateVerifiedPersonalCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())).default({}),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateVerifiedPersonalCustomerResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateVerifiedPersonalCustomerResponse$outboundSchema: z.ZodType<
  CreateVerifiedPersonalCustomerResponse$Outbound,
  z.ZodTypeDef,
  CreateVerifiedPersonalCustomerResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedPersonalCustomerResponse$ {
  /** @deprecated use `CreateVerifiedPersonalCustomerResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedPersonalCustomerResponse$inboundSchema;
  /** @deprecated use `CreateVerifiedPersonalCustomerResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedPersonalCustomerResponse$outboundSchema;
  /** @deprecated use `CreateVerifiedPersonalCustomerResponse$Outbound` instead. */
  export type Outbound = CreateVerifiedPersonalCustomerResponse$Outbound;
}

export function createVerifiedPersonalCustomerResponseToJSON(
  createVerifiedPersonalCustomerResponse:
    CreateVerifiedPersonalCustomerResponse,
): string {
  return JSON.stringify(
    CreateVerifiedPersonalCustomerResponse$outboundSchema.parse(
      createVerifiedPersonalCustomerResponse,
    ),
  );
}

export function createVerifiedPersonalCustomerResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateVerifiedPersonalCustomerResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateVerifiedPersonalCustomerResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedPersonalCustomerResponse' from JSON`,
  );
}
