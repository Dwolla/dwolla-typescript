/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetVanAchRoutingRequest = {
  /**
   * ID of VAN funding source to retrieve ACH details
   */
  id: string;
};

/**
 * successful operation
 */
export type GetVanAchRoutingResponse = {
  links?: { [k: string]: models.HalLink } | undefined;
  accountNumber?: string | undefined;
  routingNumber?: string | undefined;
};

/** @internal */
export const GetVanAchRoutingRequest$inboundSchema: z.ZodType<
  GetVanAchRoutingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetVanAchRoutingRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetVanAchRoutingRequest$outboundSchema: z.ZodType<
  GetVanAchRoutingRequest$Outbound,
  z.ZodTypeDef,
  GetVanAchRoutingRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVanAchRoutingRequest$ {
  /** @deprecated use `GetVanAchRoutingRequest$inboundSchema` instead. */
  export const inboundSchema = GetVanAchRoutingRequest$inboundSchema;
  /** @deprecated use `GetVanAchRoutingRequest$outboundSchema` instead. */
  export const outboundSchema = GetVanAchRoutingRequest$outboundSchema;
  /** @deprecated use `GetVanAchRoutingRequest$Outbound` instead. */
  export type Outbound = GetVanAchRoutingRequest$Outbound;
}

export function getVanAchRoutingRequestToJSON(
  getVanAchRoutingRequest: GetVanAchRoutingRequest,
): string {
  return JSON.stringify(
    GetVanAchRoutingRequest$outboundSchema.parse(getVanAchRoutingRequest),
  );
}

export function getVanAchRoutingRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVanAchRoutingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVanAchRoutingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVanAchRoutingRequest' from JSON`,
  );
}

/** @internal */
export const GetVanAchRoutingResponse$inboundSchema: z.ZodType<
  GetVanAchRoutingResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(models.HalLink$inboundSchema).optional(),
  accountNumber: z.string().optional(),
  routingNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type GetVanAchRoutingResponse$Outbound = {
  _links?: { [k: string]: models.HalLink$Outbound } | undefined;
  accountNumber?: string | undefined;
  routingNumber?: string | undefined;
};

/** @internal */
export const GetVanAchRoutingResponse$outboundSchema: z.ZodType<
  GetVanAchRoutingResponse$Outbound,
  z.ZodTypeDef,
  GetVanAchRoutingResponse
> = z.object({
  links: z.record(models.HalLink$outboundSchema).optional(),
  accountNumber: z.string().optional(),
  routingNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVanAchRoutingResponse$ {
  /** @deprecated use `GetVanAchRoutingResponse$inboundSchema` instead. */
  export const inboundSchema = GetVanAchRoutingResponse$inboundSchema;
  /** @deprecated use `GetVanAchRoutingResponse$outboundSchema` instead. */
  export const outboundSchema = GetVanAchRoutingResponse$outboundSchema;
  /** @deprecated use `GetVanAchRoutingResponse$Outbound` instead. */
  export type Outbound = GetVanAchRoutingResponse$Outbound;
}

export function getVanAchRoutingResponseToJSON(
  getVanAchRoutingResponse: GetVanAchRoutingResponse,
): string {
  return JSON.stringify(
    GetVanAchRoutingResponse$outboundSchema.parse(getVanAchRoutingResponse),
  );
}

export function getVanAchRoutingResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetVanAchRoutingResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVanAchRoutingResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVanAchRoutingResponse' from JSON`,
  );
}
