/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListCustomerMassPaymentsRequest = {
  /**
   * Customer ID to get mass payments for
   */
  id: string;
  /**
   * A string value to search on if `correlationId` was specified for a transaction
   */
  correlationId?: string | undefined;
  /**
   * Number of search results to return. Defaults to 25
   */
  limit?: number | undefined;
  /**
   * Number of search results to skip. Use for pagination
   */
  offset?: number | undefined;
};

/** @internal */
export const ListCustomerMassPaymentsRequest$inboundSchema: z.ZodType<
  ListCustomerMassPaymentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  correlationId: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/** @internal */
export type ListCustomerMassPaymentsRequest$Outbound = {
  id: string;
  correlationId?: string | undefined;
  limit?: number | undefined;
  offset?: number | undefined;
};

/** @internal */
export const ListCustomerMassPaymentsRequest$outboundSchema: z.ZodType<
  ListCustomerMassPaymentsRequest$Outbound,
  z.ZodTypeDef,
  ListCustomerMassPaymentsRequest
> = z.object({
  id: z.string(),
  correlationId: z.string().optional(),
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCustomerMassPaymentsRequest$ {
  /** @deprecated use `ListCustomerMassPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema = ListCustomerMassPaymentsRequest$inboundSchema;
  /** @deprecated use `ListCustomerMassPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema = ListCustomerMassPaymentsRequest$outboundSchema;
  /** @deprecated use `ListCustomerMassPaymentsRequest$Outbound` instead. */
  export type Outbound = ListCustomerMassPaymentsRequest$Outbound;
}

export function listCustomerMassPaymentsRequestToJSON(
  listCustomerMassPaymentsRequest: ListCustomerMassPaymentsRequest,
): string {
  return JSON.stringify(
    ListCustomerMassPaymentsRequest$outboundSchema.parse(
      listCustomerMassPaymentsRequest,
    ),
  );
}

export function listCustomerMassPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListCustomerMassPaymentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListCustomerMassPaymentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCustomerMassPaymentsRequest' from JSON`,
  );
}
