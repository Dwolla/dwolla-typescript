/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Parameters to cancel a transfer
 */
export type CancelTransferRequestBody = {
  status: string;
};

export type CancelTransferRequest = {
  /**
   * ID of transfer
   */
  id: string;
  /**
   * Parameters to cancel a transfer
   */
  requestBody: CancelTransferRequestBody;
};

/**
 * successful operation
 */
export type CancelTransferResponse = {};

/** @internal */
export const CancelTransferRequestBody$inboundSchema: z.ZodType<
  CancelTransferRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
});

/** @internal */
export type CancelTransferRequestBody$Outbound = {
  status: string;
};

/** @internal */
export const CancelTransferRequestBody$outboundSchema: z.ZodType<
  CancelTransferRequestBody$Outbound,
  z.ZodTypeDef,
  CancelTransferRequestBody
> = z.object({
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransferRequestBody$ {
  /** @deprecated use `CancelTransferRequestBody$inboundSchema` instead. */
  export const inboundSchema = CancelTransferRequestBody$inboundSchema;
  /** @deprecated use `CancelTransferRequestBody$outboundSchema` instead. */
  export const outboundSchema = CancelTransferRequestBody$outboundSchema;
  /** @deprecated use `CancelTransferRequestBody$Outbound` instead. */
  export type Outbound = CancelTransferRequestBody$Outbound;
}

export function cancelTransferRequestBodyToJSON(
  cancelTransferRequestBody: CancelTransferRequestBody,
): string {
  return JSON.stringify(
    CancelTransferRequestBody$outboundSchema.parse(cancelTransferRequestBody),
  );
}

export function cancelTransferRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransferRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransferRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransferRequestBody' from JSON`,
  );
}

/** @internal */
export const CancelTransferRequest$inboundSchema: z.ZodType<
  CancelTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.lazy(() => CancelTransferRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CancelTransferRequest$Outbound = {
  id: string;
  RequestBody: CancelTransferRequestBody$Outbound;
};

/** @internal */
export const CancelTransferRequest$outboundSchema: z.ZodType<
  CancelTransferRequest$Outbound,
  z.ZodTypeDef,
  CancelTransferRequest
> = z.object({
  id: z.string(),
  requestBody: z.lazy(() => CancelTransferRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransferRequest$ {
  /** @deprecated use `CancelTransferRequest$inboundSchema` instead. */
  export const inboundSchema = CancelTransferRequest$inboundSchema;
  /** @deprecated use `CancelTransferRequest$outboundSchema` instead. */
  export const outboundSchema = CancelTransferRequest$outboundSchema;
  /** @deprecated use `CancelTransferRequest$Outbound` instead. */
  export type Outbound = CancelTransferRequest$Outbound;
}

export function cancelTransferRequestToJSON(
  cancelTransferRequest: CancelTransferRequest,
): string {
  return JSON.stringify(
    CancelTransferRequest$outboundSchema.parse(cancelTransferRequest),
  );
}

export function cancelTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransferRequest' from JSON`,
  );
}

/** @internal */
export const CancelTransferResponse$inboundSchema: z.ZodType<
  CancelTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CancelTransferResponse$Outbound = {};

/** @internal */
export const CancelTransferResponse$outboundSchema: z.ZodType<
  CancelTransferResponse$Outbound,
  z.ZodTypeDef,
  CancelTransferResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransferResponse$ {
  /** @deprecated use `CancelTransferResponse$inboundSchema` instead. */
  export const inboundSchema = CancelTransferResponse$inboundSchema;
  /** @deprecated use `CancelTransferResponse$outboundSchema` instead. */
  export const outboundSchema = CancelTransferResponse$outboundSchema;
  /** @deprecated use `CancelTransferResponse$Outbound` instead. */
  export type Outbound = CancelTransferResponse$Outbound;
}

export function cancelTransferResponseToJSON(
  cancelTransferResponse: CancelTransferResponse,
): string {
  return JSON.stringify(
    CancelTransferResponse$outboundSchema.parse(cancelTransferResponse),
  );
}

export function cancelTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransferResponse' from JSON`,
  );
}
