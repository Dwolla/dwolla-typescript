/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Parameters for creating an exchange
 */
export type CreateAccountExchangeRequest =
  | models.FinicitySecureExchangeCreateExchangeRequestBody
  | models.MXSecureExchangeCreateExchangeRequestBody
  | models.FlinksSecureExchangeCreateExchangeRequestBody
  | models.PlaidSecureExchangeCreateExchangeRequestBody;

/**
 * Created
 */
export type CreateAccountExchangeResponseBody = {};

export type CreateAccountExchangeResponse = {
  headers: { [k: string]: Array<string> };
  result: CreateAccountExchangeResponseBody;
};

/** @internal */
export const CreateAccountExchangeRequest$inboundSchema: z.ZodType<
  CreateAccountExchangeRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.FinicitySecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.MXSecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema,
  models.PlaidSecureExchangeCreateExchangeRequestBody$inboundSchema,
]);

/** @internal */
export type CreateAccountExchangeRequest$Outbound =
  | models.FinicitySecureExchangeCreateExchangeRequestBody$Outbound
  | models.MXSecureExchangeCreateExchangeRequestBody$Outbound
  | models.FlinksSecureExchangeCreateExchangeRequestBody$Outbound
  | models.PlaidSecureExchangeCreateExchangeRequestBody$Outbound;

/** @internal */
export const CreateAccountExchangeRequest$outboundSchema: z.ZodType<
  CreateAccountExchangeRequest$Outbound,
  z.ZodTypeDef,
  CreateAccountExchangeRequest
> = z.union([
  models.FinicitySecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.MXSecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema,
  models.PlaidSecureExchangeCreateExchangeRequestBody$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountExchangeRequest$ {
  /** @deprecated use `CreateAccountExchangeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateAccountExchangeRequest$inboundSchema;
  /** @deprecated use `CreateAccountExchangeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateAccountExchangeRequest$outboundSchema;
  /** @deprecated use `CreateAccountExchangeRequest$Outbound` instead. */
  export type Outbound = CreateAccountExchangeRequest$Outbound;
}

export function createAccountExchangeRequestToJSON(
  createAccountExchangeRequest: CreateAccountExchangeRequest,
): string {
  return JSON.stringify(
    CreateAccountExchangeRequest$outboundSchema.parse(
      createAccountExchangeRequest,
    ),
  );
}

export function createAccountExchangeRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountExchangeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountExchangeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountExchangeRequest' from JSON`,
  );
}

/** @internal */
export const CreateAccountExchangeResponseBody$inboundSchema: z.ZodType<
  CreateAccountExchangeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateAccountExchangeResponseBody$Outbound = {};

/** @internal */
export const CreateAccountExchangeResponseBody$outboundSchema: z.ZodType<
  CreateAccountExchangeResponseBody$Outbound,
  z.ZodTypeDef,
  CreateAccountExchangeResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountExchangeResponseBody$ {
  /** @deprecated use `CreateAccountExchangeResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateAccountExchangeResponseBody$inboundSchema;
  /** @deprecated use `CreateAccountExchangeResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccountExchangeResponseBody$outboundSchema;
  /** @deprecated use `CreateAccountExchangeResponseBody$Outbound` instead. */
  export type Outbound = CreateAccountExchangeResponseBody$Outbound;
}

export function createAccountExchangeResponseBodyToJSON(
  createAccountExchangeResponseBody: CreateAccountExchangeResponseBody,
): string {
  return JSON.stringify(
    CreateAccountExchangeResponseBody$outboundSchema.parse(
      createAccountExchangeResponseBody,
    ),
  );
}

export function createAccountExchangeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountExchangeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountExchangeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountExchangeResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateAccountExchangeResponse$inboundSchema: z.ZodType<
  CreateAccountExchangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => CreateAccountExchangeResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type CreateAccountExchangeResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: CreateAccountExchangeResponseBody$Outbound;
};

/** @internal */
export const CreateAccountExchangeResponse$outboundSchema: z.ZodType<
  CreateAccountExchangeResponse$Outbound,
  z.ZodTypeDef,
  CreateAccountExchangeResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => CreateAccountExchangeResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountExchangeResponse$ {
  /** @deprecated use `CreateAccountExchangeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAccountExchangeResponse$inboundSchema;
  /** @deprecated use `CreateAccountExchangeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAccountExchangeResponse$outboundSchema;
  /** @deprecated use `CreateAccountExchangeResponse$Outbound` instead. */
  export type Outbound = CreateAccountExchangeResponse$Outbound;
}

export function createAccountExchangeResponseToJSON(
  createAccountExchangeResponse: CreateAccountExchangeResponse,
): string {
  return JSON.stringify(
    CreateAccountExchangeResponse$outboundSchema.parse(
      createAccountExchangeResponse,
    ),
  );
}

export function createAccountExchangeResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountExchangeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateAccountExchangeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountExchangeResponse' from JSON`,
  );
}
