/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerExchangeSessionRequest = {
  /**
   * Customer's unique identifier
   */
  id: string;
  /**
   * Parameters for creating an exchange session
   */
  createCustomerExchangeSession: models.CreateCustomerExchangeSessionUnion;
};

export type CreateCustomerExchangeSessionResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeSessionRequest$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CreateCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateCustomerExchangeSession": "createCustomerExchangeSession",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionRequest$Outbound = {
  id: string;
  CreateCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSessionRequest$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionRequest
> = z.object({
  id: z.string(),
  createCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createCustomerExchangeSession: "CreateCustomerExchangeSession",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionRequest$ {
  /** @deprecated use `CreateCustomerExchangeSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionRequest$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionRequest$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRequest$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionRequest$Outbound;
}

export function createCustomerExchangeSessionRequestToJSON(
  createCustomerExchangeSessionRequest: CreateCustomerExchangeSessionRequest,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionRequest$outboundSchema.parse(
      createCustomerExchangeSessionRequest,
    ),
  );
}

export function createCustomerExchangeSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionRequest' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionResponse$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeSessionResponse$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponse$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponse$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponse$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponse$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionResponse$Outbound;
}

export function createCustomerExchangeSessionResponseToJSON(
  createCustomerExchangeSessionResponse: CreateCustomerExchangeSessionResponse,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionResponse$outboundSchema.parse(
      createCustomerExchangeSessionResponse,
    ),
  );
}

export function createCustomerExchangeSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionResponse' from JSON`,
  );
}
