/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateCustomerExchangeSessionRequest = {
  /**
   * Customer's unique identifier
   */
  id: string;
  /**
   * Parameters for creating an exchange session
   */
  createCustomerExchangeSession: models.CreateCustomerExchangeSessionUnion;
};

export type ResponseBodyForbidden2 = {
  code: string;
  message: string;
};

export type ResponseBodyForbidden1 = {
  code: string;
  message: string;
};

export type CreateCustomerExchangeSessionResponseBodyBadRequest3 = {
  code: string;
  message: string;
};

export type CreateCustomerExchangeSessionResponseBodyBadRequest2 = {
  code: string;
  message: string;
};

export type CreateCustomerExchangeSessionResponseBodyBadRequest1 = {
  code: string;
  message: string;
};

export type CreateCustomerExchangeSessionResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeSessionRequest$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  CreateCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "CreateCustomerExchangeSession": "createCustomerExchangeSession",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionRequest$Outbound = {
  id: string;
  CreateCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSessionRequest$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRequest$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionRequest
> = z.object({
  id: z.string(),
  createCustomerExchangeSession:
    models.CreateCustomerExchangeSessionUnion$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    createCustomerExchangeSession: "CreateCustomerExchangeSession",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionRequest$ {
  /** @deprecated use `CreateCustomerExchangeSessionRequest$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionRequest$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionRequest$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRequest$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionRequest$Outbound;
}

export function createCustomerExchangeSessionRequestToJSON(
  createCustomerExchangeSessionRequest: CreateCustomerExchangeSessionRequest,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionRequest$outboundSchema.parse(
      createCustomerExchangeSessionRequest,
    ),
  );
}

export function createCustomerExchangeSessionRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBodyForbidden2$inboundSchema: z.ZodType<
  ResponseBodyForbidden2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ResponseBodyForbidden2$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponseBodyForbidden2$outboundSchema: z.ZodType<
  ResponseBodyForbidden2$Outbound,
  z.ZodTypeDef,
  ResponseBodyForbidden2
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyForbidden2$ {
  /** @deprecated use `ResponseBodyForbidden2$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyForbidden2$inboundSchema;
  /** @deprecated use `ResponseBodyForbidden2$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyForbidden2$outboundSchema;
  /** @deprecated use `ResponseBodyForbidden2$Outbound` instead. */
  export type Outbound = ResponseBodyForbidden2$Outbound;
}

export function responseBodyForbidden2ToJSON(
  responseBodyForbidden2: ResponseBodyForbidden2,
): string {
  return JSON.stringify(
    ResponseBodyForbidden2$outboundSchema.parse(responseBodyForbidden2),
  );
}

export function responseBodyForbidden2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyForbidden2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyForbidden2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyForbidden2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyForbidden1$inboundSchema: z.ZodType<
  ResponseBodyForbidden1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type ResponseBodyForbidden1$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponseBodyForbidden1$outboundSchema: z.ZodType<
  ResponseBodyForbidden1$Outbound,
  z.ZodTypeDef,
  ResponseBodyForbidden1
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyForbidden1$ {
  /** @deprecated use `ResponseBodyForbidden1$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyForbidden1$inboundSchema;
  /** @deprecated use `ResponseBodyForbidden1$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyForbidden1$outboundSchema;
  /** @deprecated use `ResponseBodyForbidden1$Outbound` instead. */
  export type Outbound = ResponseBodyForbidden1$Outbound;
}

export function responseBodyForbidden1ToJSON(
  responseBodyForbidden1: ResponseBodyForbidden1,
): string {
  return JSON.stringify(
    ResponseBodyForbidden1$outboundSchema.parse(responseBodyForbidden1),
  );
}

export function responseBodyForbidden1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyForbidden1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyForbidden1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyForbidden1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest3$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequest3$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest3$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest3$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequest3
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequest3$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest3$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest3$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest3$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest3$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest3$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequest3$Outbound;
}

export function createCustomerExchangeSessionResponseBodyBadRequest3ToJSON(
  createCustomerExchangeSessionResponseBodyBadRequest3:
    CreateCustomerExchangeSessionResponseBodyBadRequest3,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionResponseBodyBadRequest3$outboundSchema.parse(
      createCustomerExchangeSessionResponseBodyBadRequest3,
    ),
  );
}

export function createCustomerExchangeSessionResponseBodyBadRequest3FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionResponseBodyBadRequest3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionResponseBodyBadRequest3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionResponseBodyBadRequest3' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest2$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequest2$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest2$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest2$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequest2
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequest2$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest2$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest2$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest2$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequest2$Outbound;
}

export function createCustomerExchangeSessionResponseBodyBadRequest2ToJSON(
  createCustomerExchangeSessionResponseBodyBadRequest2:
    CreateCustomerExchangeSessionResponseBodyBadRequest2,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionResponseBodyBadRequest2$outboundSchema.parse(
      createCustomerExchangeSessionResponseBodyBadRequest2,
    ),
  );
}

export function createCustomerExchangeSessionResponseBodyBadRequest2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionResponseBodyBadRequest2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionResponseBodyBadRequest2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionResponseBodyBadRequest2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest1$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequest1$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequest1$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest1$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequest1
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequest1$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest1$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequest1$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequest1$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequest1$Outbound;
}

export function createCustomerExchangeSessionResponseBodyBadRequest1ToJSON(
  createCustomerExchangeSessionResponseBodyBadRequest1:
    CreateCustomerExchangeSessionResponseBodyBadRequest1,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionResponseBodyBadRequest1$outboundSchema.parse(
      createCustomerExchangeSessionResponseBodyBadRequest1,
    ),
  );
}

export function createCustomerExchangeSessionResponseBodyBadRequest1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionResponseBodyBadRequest1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionResponseBodyBadRequest1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionResponseBodyBadRequest1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionResponse$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const CreateCustomerExchangeSessionResponse$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionResponse$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponse$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponse$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponse$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponse$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponse$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponse$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionResponse$Outbound;
}

export function createCustomerExchangeSessionResponseToJSON(
  createCustomerExchangeSessionResponse: CreateCustomerExchangeSessionResponse,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionResponse$outboundSchema.parse(
      createCustomerExchangeSessionResponse,
    ),
  );
}

export function createCustomerExchangeSessionResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionResponse' from JSON`,
  );
}
