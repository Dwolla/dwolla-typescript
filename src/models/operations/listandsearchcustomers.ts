/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListAndSearchCustomersRequest = {
  /**
   * How many results to return
   */
  limit?: string | undefined;
  /**
   * How many results to skip
   */
  offset?: string | undefined;
  /**
   * Searches on certain fields
   */
  search?: string | undefined;
  /**
   * Filter by customer status
   */
  status?: string | undefined;
};

/** @internal */
export const ListAndSearchCustomersRequest$inboundSchema: z.ZodType<
  ListAndSearchCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.string().optional(),
  offset: z.string().optional(),
  search: z.string().optional(),
  status: z.string().optional(),
});

/** @internal */
export type ListAndSearchCustomersRequest$Outbound = {
  limit?: string | undefined;
  offset?: string | undefined;
  search?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const ListAndSearchCustomersRequest$outboundSchema: z.ZodType<
  ListAndSearchCustomersRequest$Outbound,
  z.ZodTypeDef,
  ListAndSearchCustomersRequest
> = z.object({
  limit: z.string().optional(),
  offset: z.string().optional(),
  search: z.string().optional(),
  status: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAndSearchCustomersRequest$ {
  /** @deprecated use `ListAndSearchCustomersRequest$inboundSchema` instead. */
  export const inboundSchema = ListAndSearchCustomersRequest$inboundSchema;
  /** @deprecated use `ListAndSearchCustomersRequest$outboundSchema` instead. */
  export const outboundSchema = ListAndSearchCustomersRequest$outboundSchema;
  /** @deprecated use `ListAndSearchCustomersRequest$Outbound` instead. */
  export type Outbound = ListAndSearchCustomersRequest$Outbound;
}

export function listAndSearchCustomersRequestToJSON(
  listAndSearchCustomersRequest: ListAndSearchCustomersRequest,
): string {
  return JSON.stringify(
    ListAndSearchCustomersRequest$outboundSchema.parse(
      listAndSearchCustomersRequest,
    ),
  );
}

export function listAndSearchCustomersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAndSearchCustomersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAndSearchCustomersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAndSearchCustomersRequest' from JSON`,
  );
}
