/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type InitiateTransferLinksSource = {
  href?: string | undefined;
};

export type InitiateTransferLinksDestination = {
  href?: string | undefined;
};

export type InitiateTransferLinks = {
  source?: InitiateTransferLinksSource | undefined;
  destination?: InitiateTransferLinksDestination | undefined;
};

export type InitiateTransferMetadata = {};

export type ChargeTo = {
  href?: string | undefined;
};

export type FeeLinks = {
  chargeTo?: ChargeTo | undefined;
};

export type InitiateTransferAmount = {
  amount?: string | undefined;
  currency?: string | undefined;
};

export type Fee = {
  links?: FeeLinks | undefined;
  amount?: InitiateTransferAmount | undefined;
};

export type InitiateTransferClearing = {
  source?: string | undefined;
  destination?: string | undefined;
};

export type InitiateTransferSourceAddenda = {
  values?: Array<string> | undefined;
};

export type InitiateTransferAchDetailsSource = {
  addenda?: InitiateTransferSourceAddenda | undefined;
};

export type InitiateTransferDestinationAddenda = {
  values?: Array<string> | undefined;
};

export type InitiateTransferAchDetailsDestination = {
  addenda?: InitiateTransferDestinationAddenda | undefined;
};

export type InitiateTransferAchDetails = {
  source?: InitiateTransferAchDetailsSource | undefined;
  destination?: InitiateTransferAchDetailsDestination | undefined;
};

/**
 * RTP details for the destination
 */
export type RtpDetailsDestination = {
  /**
   * Remittance information for Real-Time Payments, providing context about the payment purpose
   */
  remittanceData?: string | undefined;
};

/**
 * Real-Time Payments (RTP) specific transaction details.
 */
export type RtpDetails = {
  /**
   * RTP details for the destination
   */
  destination?: RtpDetailsDestination | undefined;
};

/**
 * Instant payment details for the destination
 */
export type InstantDetailsDestination = {
  /**
   * Remittance information for Instant Payments (RTP/FedNow), providing context about the payment purpose
   */
  remittanceData?: string | undefined;
};

/**
 * Instant Payments specific transaction details for both RTP and FedNow networks.
 */
export type InstantDetails = {
  /**
   * Instant payment details for the destination
   */
  destination?: InstantDetailsDestination | undefined;
};

export const DestinationEnum = {
  RealTimePayments: "real-time-payments",
  Instant: "instant",
} as const;
export type DestinationEnum = ClosedEnum<typeof DestinationEnum>;

export type InitiateTransferProcessingChannel = {
  destination?: DestinationEnum | undefined;
};

/**
 * Parameters to initiate a transfer
 */
export type InitiateTransferRequestBody = {
  links: InitiateTransferLinks;
  amount: models.TransferAmount;
  metadata?: InitiateTransferMetadata | undefined;
  fees?: Array<Fee> | undefined;
  clearing?: InitiateTransferClearing | undefined;
  achDetails?: InitiateTransferAchDetails | undefined;
  /**
   * Real-Time Payments (RTP) specific transaction details.
   */
  rtpDetails?: RtpDetails | undefined;
  /**
   * Instant Payments specific transaction details for both RTP and FedNow networks.
   */
  instantDetails?: InstantDetails | undefined;
  correlationId?: string | undefined;
  processingChannel?: InitiateTransferProcessingChannel | undefined;
};

export type InitiateTransferRequest = {
  idempotencyKey?: string | undefined;
  /**
   * Parameters to initiate a transfer
   */
  requestBody: InitiateTransferRequestBody;
};

export type InitiateTransferResponse = {
  headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateTransferLinksSource$inboundSchema: z.ZodType<
  InitiateTransferLinksSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type InitiateTransferLinksSource$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const InitiateTransferLinksSource$outboundSchema: z.ZodType<
  InitiateTransferLinksSource$Outbound,
  z.ZodTypeDef,
  InitiateTransferLinksSource
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferLinksSource$ {
  /** @deprecated use `InitiateTransferLinksSource$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferLinksSource$inboundSchema;
  /** @deprecated use `InitiateTransferLinksSource$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferLinksSource$outboundSchema;
  /** @deprecated use `InitiateTransferLinksSource$Outbound` instead. */
  export type Outbound = InitiateTransferLinksSource$Outbound;
}

export function initiateTransferLinksSourceToJSON(
  initiateTransferLinksSource: InitiateTransferLinksSource,
): string {
  return JSON.stringify(
    InitiateTransferLinksSource$outboundSchema.parse(
      initiateTransferLinksSource,
    ),
  );
}

export function initiateTransferLinksSourceFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferLinksSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferLinksSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferLinksSource' from JSON`,
  );
}

/** @internal */
export const InitiateTransferLinksDestination$inboundSchema: z.ZodType<
  InitiateTransferLinksDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type InitiateTransferLinksDestination$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const InitiateTransferLinksDestination$outboundSchema: z.ZodType<
  InitiateTransferLinksDestination$Outbound,
  z.ZodTypeDef,
  InitiateTransferLinksDestination
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferLinksDestination$ {
  /** @deprecated use `InitiateTransferLinksDestination$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferLinksDestination$inboundSchema;
  /** @deprecated use `InitiateTransferLinksDestination$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferLinksDestination$outboundSchema;
  /** @deprecated use `InitiateTransferLinksDestination$Outbound` instead. */
  export type Outbound = InitiateTransferLinksDestination$Outbound;
}

export function initiateTransferLinksDestinationToJSON(
  initiateTransferLinksDestination: InitiateTransferLinksDestination,
): string {
  return JSON.stringify(
    InitiateTransferLinksDestination$outboundSchema.parse(
      initiateTransferLinksDestination,
    ),
  );
}

export function initiateTransferLinksDestinationFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferLinksDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferLinksDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferLinksDestination' from JSON`,
  );
}

/** @internal */
export const InitiateTransferLinks$inboundSchema: z.ZodType<
  InitiateTransferLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.lazy(() => InitiateTransferLinksSource$inboundSchema).optional(),
  destination: z.lazy(() => InitiateTransferLinksDestination$inboundSchema)
    .optional(),
});

/** @internal */
export type InitiateTransferLinks$Outbound = {
  source?: InitiateTransferLinksSource$Outbound | undefined;
  destination?: InitiateTransferLinksDestination$Outbound | undefined;
};

/** @internal */
export const InitiateTransferLinks$outboundSchema: z.ZodType<
  InitiateTransferLinks$Outbound,
  z.ZodTypeDef,
  InitiateTransferLinks
> = z.object({
  source: z.lazy(() => InitiateTransferLinksSource$outboundSchema).optional(),
  destination: z.lazy(() => InitiateTransferLinksDestination$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferLinks$ {
  /** @deprecated use `InitiateTransferLinks$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferLinks$inboundSchema;
  /** @deprecated use `InitiateTransferLinks$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferLinks$outboundSchema;
  /** @deprecated use `InitiateTransferLinks$Outbound` instead. */
  export type Outbound = InitiateTransferLinks$Outbound;
}

export function initiateTransferLinksToJSON(
  initiateTransferLinks: InitiateTransferLinks,
): string {
  return JSON.stringify(
    InitiateTransferLinks$outboundSchema.parse(initiateTransferLinks),
  );
}

export function initiateTransferLinksFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferLinks' from JSON`,
  );
}

/** @internal */
export const InitiateTransferMetadata$inboundSchema: z.ZodType<
  InitiateTransferMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InitiateTransferMetadata$Outbound = {};

/** @internal */
export const InitiateTransferMetadata$outboundSchema: z.ZodType<
  InitiateTransferMetadata$Outbound,
  z.ZodTypeDef,
  InitiateTransferMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferMetadata$ {
  /** @deprecated use `InitiateTransferMetadata$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferMetadata$inboundSchema;
  /** @deprecated use `InitiateTransferMetadata$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferMetadata$outboundSchema;
  /** @deprecated use `InitiateTransferMetadata$Outbound` instead. */
  export type Outbound = InitiateTransferMetadata$Outbound;
}

export function initiateTransferMetadataToJSON(
  initiateTransferMetadata: InitiateTransferMetadata,
): string {
  return JSON.stringify(
    InitiateTransferMetadata$outboundSchema.parse(initiateTransferMetadata),
  );
}

export function initiateTransferMetadataFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferMetadata' from JSON`,
  );
}

/** @internal */
export const ChargeTo$inboundSchema: z.ZodType<
  ChargeTo,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

/** @internal */
export type ChargeTo$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const ChargeTo$outboundSchema: z.ZodType<
  ChargeTo$Outbound,
  z.ZodTypeDef,
  ChargeTo
> = z.object({
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChargeTo$ {
  /** @deprecated use `ChargeTo$inboundSchema` instead. */
  export const inboundSchema = ChargeTo$inboundSchema;
  /** @deprecated use `ChargeTo$outboundSchema` instead. */
  export const outboundSchema = ChargeTo$outboundSchema;
  /** @deprecated use `ChargeTo$Outbound` instead. */
  export type Outbound = ChargeTo$Outbound;
}

export function chargeToToJSON(chargeTo: ChargeTo): string {
  return JSON.stringify(ChargeTo$outboundSchema.parse(chargeTo));
}

export function chargeToFromJSON(
  jsonString: string,
): SafeParseResult<ChargeTo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChargeTo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChargeTo' from JSON`,
  );
}

/** @internal */
export const FeeLinks$inboundSchema: z.ZodType<
  FeeLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  "charge-to": z.lazy(() => ChargeTo$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "charge-to": "chargeTo",
  });
});

/** @internal */
export type FeeLinks$Outbound = {
  "charge-to"?: ChargeTo$Outbound | undefined;
};

/** @internal */
export const FeeLinks$outboundSchema: z.ZodType<
  FeeLinks$Outbound,
  z.ZodTypeDef,
  FeeLinks
> = z.object({
  chargeTo: z.lazy(() => ChargeTo$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    chargeTo: "charge-to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeeLinks$ {
  /** @deprecated use `FeeLinks$inboundSchema` instead. */
  export const inboundSchema = FeeLinks$inboundSchema;
  /** @deprecated use `FeeLinks$outboundSchema` instead. */
  export const outboundSchema = FeeLinks$outboundSchema;
  /** @deprecated use `FeeLinks$Outbound` instead. */
  export type Outbound = FeeLinks$Outbound;
}

export function feeLinksToJSON(feeLinks: FeeLinks): string {
  return JSON.stringify(FeeLinks$outboundSchema.parse(feeLinks));
}

export function feeLinksFromJSON(
  jsonString: string,
): SafeParseResult<FeeLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeeLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeeLinks' from JSON`,
  );
}

/** @internal */
export const InitiateTransferAmount$inboundSchema: z.ZodType<
  InitiateTransferAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type InitiateTransferAmount$Outbound = {
  amount?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const InitiateTransferAmount$outboundSchema: z.ZodType<
  InitiateTransferAmount$Outbound,
  z.ZodTypeDef,
  InitiateTransferAmount
> = z.object({
  amount: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferAmount$ {
  /** @deprecated use `InitiateTransferAmount$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferAmount$inboundSchema;
  /** @deprecated use `InitiateTransferAmount$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferAmount$outboundSchema;
  /** @deprecated use `InitiateTransferAmount$Outbound` instead. */
  export type Outbound = InitiateTransferAmount$Outbound;
}

export function initiateTransferAmountToJSON(
  initiateTransferAmount: InitiateTransferAmount,
): string {
  return JSON.stringify(
    InitiateTransferAmount$outboundSchema.parse(initiateTransferAmount),
  );
}

export function initiateTransferAmountFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferAmount' from JSON`,
  );
}

/** @internal */
export const Fee$inboundSchema: z.ZodType<Fee, z.ZodTypeDef, unknown> = z
  .object({
    _links: z.lazy(() => FeeLinks$inboundSchema).optional(),
    amount: z.lazy(() => InitiateTransferAmount$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type Fee$Outbound = {
  _links?: FeeLinks$Outbound | undefined;
  amount?: InitiateTransferAmount$Outbound | undefined;
};

/** @internal */
export const Fee$outboundSchema: z.ZodType<Fee$Outbound, z.ZodTypeDef, Fee> = z
  .object({
    links: z.lazy(() => FeeLinks$outboundSchema).optional(),
    amount: z.lazy(() => InitiateTransferAmount$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fee$ {
  /** @deprecated use `Fee$inboundSchema` instead. */
  export const inboundSchema = Fee$inboundSchema;
  /** @deprecated use `Fee$outboundSchema` instead. */
  export const outboundSchema = Fee$outboundSchema;
  /** @deprecated use `Fee$Outbound` instead. */
  export type Outbound = Fee$Outbound;
}

export function feeToJSON(fee: Fee): string {
  return JSON.stringify(Fee$outboundSchema.parse(fee));
}

export function feeFromJSON(
  jsonString: string,
): SafeParseResult<Fee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fee' from JSON`,
  );
}

/** @internal */
export const InitiateTransferClearing$inboundSchema: z.ZodType<
  InitiateTransferClearing,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  destination: z.string().optional(),
});

/** @internal */
export type InitiateTransferClearing$Outbound = {
  source?: string | undefined;
  destination?: string | undefined;
};

/** @internal */
export const InitiateTransferClearing$outboundSchema: z.ZodType<
  InitiateTransferClearing$Outbound,
  z.ZodTypeDef,
  InitiateTransferClearing
> = z.object({
  source: z.string().optional(),
  destination: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferClearing$ {
  /** @deprecated use `InitiateTransferClearing$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferClearing$inboundSchema;
  /** @deprecated use `InitiateTransferClearing$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferClearing$outboundSchema;
  /** @deprecated use `InitiateTransferClearing$Outbound` instead. */
  export type Outbound = InitiateTransferClearing$Outbound;
}

export function initiateTransferClearingToJSON(
  initiateTransferClearing: InitiateTransferClearing,
): string {
  return JSON.stringify(
    InitiateTransferClearing$outboundSchema.parse(initiateTransferClearing),
  );
}

export function initiateTransferClearingFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferClearing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferClearing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferClearing' from JSON`,
  );
}

/** @internal */
export const InitiateTransferSourceAddenda$inboundSchema: z.ZodType<
  InitiateTransferSourceAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

/** @internal */
export type InitiateTransferSourceAddenda$Outbound = {
  values?: Array<string> | undefined;
};

/** @internal */
export const InitiateTransferSourceAddenda$outboundSchema: z.ZodType<
  InitiateTransferSourceAddenda$Outbound,
  z.ZodTypeDef,
  InitiateTransferSourceAddenda
> = z.object({
  values: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferSourceAddenda$ {
  /** @deprecated use `InitiateTransferSourceAddenda$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferSourceAddenda$inboundSchema;
  /** @deprecated use `InitiateTransferSourceAddenda$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferSourceAddenda$outboundSchema;
  /** @deprecated use `InitiateTransferSourceAddenda$Outbound` instead. */
  export type Outbound = InitiateTransferSourceAddenda$Outbound;
}

export function initiateTransferSourceAddendaToJSON(
  initiateTransferSourceAddenda: InitiateTransferSourceAddenda,
): string {
  return JSON.stringify(
    InitiateTransferSourceAddenda$outboundSchema.parse(
      initiateTransferSourceAddenda,
    ),
  );
}

export function initiateTransferSourceAddendaFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferSourceAddenda, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferSourceAddenda$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferSourceAddenda' from JSON`,
  );
}

/** @internal */
export const InitiateTransferAchDetailsSource$inboundSchema: z.ZodType<
  InitiateTransferAchDetailsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => InitiateTransferSourceAddenda$inboundSchema).optional(),
});

/** @internal */
export type InitiateTransferAchDetailsSource$Outbound = {
  addenda?: InitiateTransferSourceAddenda$Outbound | undefined;
};

/** @internal */
export const InitiateTransferAchDetailsSource$outboundSchema: z.ZodType<
  InitiateTransferAchDetailsSource$Outbound,
  z.ZodTypeDef,
  InitiateTransferAchDetailsSource
> = z.object({
  addenda: z.lazy(() => InitiateTransferSourceAddenda$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferAchDetailsSource$ {
  /** @deprecated use `InitiateTransferAchDetailsSource$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferAchDetailsSource$inboundSchema;
  /** @deprecated use `InitiateTransferAchDetailsSource$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferAchDetailsSource$outboundSchema;
  /** @deprecated use `InitiateTransferAchDetailsSource$Outbound` instead. */
  export type Outbound = InitiateTransferAchDetailsSource$Outbound;
}

export function initiateTransferAchDetailsSourceToJSON(
  initiateTransferAchDetailsSource: InitiateTransferAchDetailsSource,
): string {
  return JSON.stringify(
    InitiateTransferAchDetailsSource$outboundSchema.parse(
      initiateTransferAchDetailsSource,
    ),
  );
}

export function initiateTransferAchDetailsSourceFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferAchDetailsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferAchDetailsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferAchDetailsSource' from JSON`,
  );
}

/** @internal */
export const InitiateTransferDestinationAddenda$inboundSchema: z.ZodType<
  InitiateTransferDestinationAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

/** @internal */
export type InitiateTransferDestinationAddenda$Outbound = {
  values?: Array<string> | undefined;
};

/** @internal */
export const InitiateTransferDestinationAddenda$outboundSchema: z.ZodType<
  InitiateTransferDestinationAddenda$Outbound,
  z.ZodTypeDef,
  InitiateTransferDestinationAddenda
> = z.object({
  values: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferDestinationAddenda$ {
  /** @deprecated use `InitiateTransferDestinationAddenda$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferDestinationAddenda$inboundSchema;
  /** @deprecated use `InitiateTransferDestinationAddenda$outboundSchema` instead. */
  export const outboundSchema =
    InitiateTransferDestinationAddenda$outboundSchema;
  /** @deprecated use `InitiateTransferDestinationAddenda$Outbound` instead. */
  export type Outbound = InitiateTransferDestinationAddenda$Outbound;
}

export function initiateTransferDestinationAddendaToJSON(
  initiateTransferDestinationAddenda: InitiateTransferDestinationAddenda,
): string {
  return JSON.stringify(
    InitiateTransferDestinationAddenda$outboundSchema.parse(
      initiateTransferDestinationAddenda,
    ),
  );
}

export function initiateTransferDestinationAddendaFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferDestinationAddenda, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateTransferDestinationAddenda$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferDestinationAddenda' from JSON`,
  );
}

/** @internal */
export const InitiateTransferAchDetailsDestination$inboundSchema: z.ZodType<
  InitiateTransferAchDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => InitiateTransferDestinationAddenda$inboundSchema)
    .optional(),
});

/** @internal */
export type InitiateTransferAchDetailsDestination$Outbound = {
  addenda?: InitiateTransferDestinationAddenda$Outbound | undefined;
};

/** @internal */
export const InitiateTransferAchDetailsDestination$outboundSchema: z.ZodType<
  InitiateTransferAchDetailsDestination$Outbound,
  z.ZodTypeDef,
  InitiateTransferAchDetailsDestination
> = z.object({
  addenda: z.lazy(() => InitiateTransferDestinationAddenda$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferAchDetailsDestination$ {
  /** @deprecated use `InitiateTransferAchDetailsDestination$inboundSchema` instead. */
  export const inboundSchema =
    InitiateTransferAchDetailsDestination$inboundSchema;
  /** @deprecated use `InitiateTransferAchDetailsDestination$outboundSchema` instead. */
  export const outboundSchema =
    InitiateTransferAchDetailsDestination$outboundSchema;
  /** @deprecated use `InitiateTransferAchDetailsDestination$Outbound` instead. */
  export type Outbound = InitiateTransferAchDetailsDestination$Outbound;
}

export function initiateTransferAchDetailsDestinationToJSON(
  initiateTransferAchDetailsDestination: InitiateTransferAchDetailsDestination,
): string {
  return JSON.stringify(
    InitiateTransferAchDetailsDestination$outboundSchema.parse(
      initiateTransferAchDetailsDestination,
    ),
  );
}

export function initiateTransferAchDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferAchDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateTransferAchDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferAchDetailsDestination' from JSON`,
  );
}

/** @internal */
export const InitiateTransferAchDetails$inboundSchema: z.ZodType<
  InitiateTransferAchDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.lazy(() => InitiateTransferAchDetailsSource$inboundSchema)
    .optional(),
  destination: z.lazy(() => InitiateTransferAchDetailsDestination$inboundSchema)
    .optional(),
});

/** @internal */
export type InitiateTransferAchDetails$Outbound = {
  source?: InitiateTransferAchDetailsSource$Outbound | undefined;
  destination?: InitiateTransferAchDetailsDestination$Outbound | undefined;
};

/** @internal */
export const InitiateTransferAchDetails$outboundSchema: z.ZodType<
  InitiateTransferAchDetails$Outbound,
  z.ZodTypeDef,
  InitiateTransferAchDetails
> = z.object({
  source: z.lazy(() => InitiateTransferAchDetailsSource$outboundSchema)
    .optional(),
  destination: z.lazy(() =>
    InitiateTransferAchDetailsDestination$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferAchDetails$ {
  /** @deprecated use `InitiateTransferAchDetails$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferAchDetails$inboundSchema;
  /** @deprecated use `InitiateTransferAchDetails$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferAchDetails$outboundSchema;
  /** @deprecated use `InitiateTransferAchDetails$Outbound` instead. */
  export type Outbound = InitiateTransferAchDetails$Outbound;
}

export function initiateTransferAchDetailsToJSON(
  initiateTransferAchDetails: InitiateTransferAchDetails,
): string {
  return JSON.stringify(
    InitiateTransferAchDetails$outboundSchema.parse(initiateTransferAchDetails),
  );
}

export function initiateTransferAchDetailsFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferAchDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferAchDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferAchDetails' from JSON`,
  );
}

/** @internal */
export const RtpDetailsDestination$inboundSchema: z.ZodType<
  RtpDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
});

/** @internal */
export type RtpDetailsDestination$Outbound = {
  remittanceData?: string | undefined;
};

/** @internal */
export const RtpDetailsDestination$outboundSchema: z.ZodType<
  RtpDetailsDestination$Outbound,
  z.ZodTypeDef,
  RtpDetailsDestination
> = z.object({
  remittanceData: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpDetailsDestination$ {
  /** @deprecated use `RtpDetailsDestination$inboundSchema` instead. */
  export const inboundSchema = RtpDetailsDestination$inboundSchema;
  /** @deprecated use `RtpDetailsDestination$outboundSchema` instead. */
  export const outboundSchema = RtpDetailsDestination$outboundSchema;
  /** @deprecated use `RtpDetailsDestination$Outbound` instead. */
  export type Outbound = RtpDetailsDestination$Outbound;
}

export function rtpDetailsDestinationToJSON(
  rtpDetailsDestination: RtpDetailsDestination,
): string {
  return JSON.stringify(
    RtpDetailsDestination$outboundSchema.parse(rtpDetailsDestination),
  );
}

export function rtpDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<RtpDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RtpDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RtpDetailsDestination' from JSON`,
  );
}

/** @internal */
export const RtpDetails$inboundSchema: z.ZodType<
  RtpDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$inboundSchema).optional(),
});

/** @internal */
export type RtpDetails$Outbound = {
  destination?: RtpDetailsDestination$Outbound | undefined;
};

/** @internal */
export const RtpDetails$outboundSchema: z.ZodType<
  RtpDetails$Outbound,
  z.ZodTypeDef,
  RtpDetails
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpDetails$ {
  /** @deprecated use `RtpDetails$inboundSchema` instead. */
  export const inboundSchema = RtpDetails$inboundSchema;
  /** @deprecated use `RtpDetails$outboundSchema` instead. */
  export const outboundSchema = RtpDetails$outboundSchema;
  /** @deprecated use `RtpDetails$Outbound` instead. */
  export type Outbound = RtpDetails$Outbound;
}

export function rtpDetailsToJSON(rtpDetails: RtpDetails): string {
  return JSON.stringify(RtpDetails$outboundSchema.parse(rtpDetails));
}

export function rtpDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RtpDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RtpDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RtpDetails' from JSON`,
  );
}

/** @internal */
export const InstantDetailsDestination$inboundSchema: z.ZodType<
  InstantDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
});

/** @internal */
export type InstantDetailsDestination$Outbound = {
  remittanceData?: string | undefined;
};

/** @internal */
export const InstantDetailsDestination$outboundSchema: z.ZodType<
  InstantDetailsDestination$Outbound,
  z.ZodTypeDef,
  InstantDetailsDestination
> = z.object({
  remittanceData: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstantDetailsDestination$ {
  /** @deprecated use `InstantDetailsDestination$inboundSchema` instead. */
  export const inboundSchema = InstantDetailsDestination$inboundSchema;
  /** @deprecated use `InstantDetailsDestination$outboundSchema` instead. */
  export const outboundSchema = InstantDetailsDestination$outboundSchema;
  /** @deprecated use `InstantDetailsDestination$Outbound` instead. */
  export type Outbound = InstantDetailsDestination$Outbound;
}

export function instantDetailsDestinationToJSON(
  instantDetailsDestination: InstantDetailsDestination,
): string {
  return JSON.stringify(
    InstantDetailsDestination$outboundSchema.parse(instantDetailsDestination),
  );
}

export function instantDetailsDestinationFromJSON(
  jsonString: string,
): SafeParseResult<InstantDetailsDestination, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstantDetailsDestination$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstantDetailsDestination' from JSON`,
  );
}

/** @internal */
export const InstantDetails$inboundSchema: z.ZodType<
  InstantDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => InstantDetailsDestination$inboundSchema).optional(),
});

/** @internal */
export type InstantDetails$Outbound = {
  destination?: InstantDetailsDestination$Outbound | undefined;
};

/** @internal */
export const InstantDetails$outboundSchema: z.ZodType<
  InstantDetails$Outbound,
  z.ZodTypeDef,
  InstantDetails
> = z.object({
  destination: z.lazy(() => InstantDetailsDestination$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InstantDetails$ {
  /** @deprecated use `InstantDetails$inboundSchema` instead. */
  export const inboundSchema = InstantDetails$inboundSchema;
  /** @deprecated use `InstantDetails$outboundSchema` instead. */
  export const outboundSchema = InstantDetails$outboundSchema;
  /** @deprecated use `InstantDetails$Outbound` instead. */
  export type Outbound = InstantDetails$Outbound;
}

export function instantDetailsToJSON(instantDetails: InstantDetails): string {
  return JSON.stringify(InstantDetails$outboundSchema.parse(instantDetails));
}

export function instantDetailsFromJSON(
  jsonString: string,
): SafeParseResult<InstantDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InstantDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InstantDetails' from JSON`,
  );
}

/** @internal */
export const DestinationEnum$inboundSchema: z.ZodNativeEnum<
  typeof DestinationEnum
> = z.nativeEnum(DestinationEnum);

/** @internal */
export const DestinationEnum$outboundSchema: z.ZodNativeEnum<
  typeof DestinationEnum
> = DestinationEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DestinationEnum$ {
  /** @deprecated use `DestinationEnum$inboundSchema` instead. */
  export const inboundSchema = DestinationEnum$inboundSchema;
  /** @deprecated use `DestinationEnum$outboundSchema` instead. */
  export const outboundSchema = DestinationEnum$outboundSchema;
}

/** @internal */
export const InitiateTransferProcessingChannel$inboundSchema: z.ZodType<
  InitiateTransferProcessingChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: DestinationEnum$inboundSchema.optional(),
});

/** @internal */
export type InitiateTransferProcessingChannel$Outbound = {
  destination?: string | undefined;
};

/** @internal */
export const InitiateTransferProcessingChannel$outboundSchema: z.ZodType<
  InitiateTransferProcessingChannel$Outbound,
  z.ZodTypeDef,
  InitiateTransferProcessingChannel
> = z.object({
  destination: DestinationEnum$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferProcessingChannel$ {
  /** @deprecated use `InitiateTransferProcessingChannel$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferProcessingChannel$inboundSchema;
  /** @deprecated use `InitiateTransferProcessingChannel$outboundSchema` instead. */
  export const outboundSchema =
    InitiateTransferProcessingChannel$outboundSchema;
  /** @deprecated use `InitiateTransferProcessingChannel$Outbound` instead. */
  export type Outbound = InitiateTransferProcessingChannel$Outbound;
}

export function initiateTransferProcessingChannelToJSON(
  initiateTransferProcessingChannel: InitiateTransferProcessingChannel,
): string {
  return JSON.stringify(
    InitiateTransferProcessingChannel$outboundSchema.parse(
      initiateTransferProcessingChannel,
    ),
  );
}

export function initiateTransferProcessingChannelFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferProcessingChannel, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferProcessingChannel$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferProcessingChannel' from JSON`,
  );
}

/** @internal */
export const InitiateTransferRequestBody$inboundSchema: z.ZodType<
  InitiateTransferRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => InitiateTransferLinks$inboundSchema),
  amount: models.TransferAmount$inboundSchema,
  metadata: z.lazy(() => InitiateTransferMetadata$inboundSchema).optional(),
  fees: z.array(z.lazy(() => Fee$inboundSchema)).optional(),
  clearing: z.lazy(() => InitiateTransferClearing$inboundSchema).optional(),
  achDetails: z.lazy(() => InitiateTransferAchDetails$inboundSchema).optional(),
  rtpDetails: z.lazy(() => RtpDetails$inboundSchema).optional(),
  instantDetails: z.lazy(() => InstantDetails$inboundSchema).optional(),
  correlationId: z.string().optional(),
  processingChannel: z.lazy(() =>
    InitiateTransferProcessingChannel$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InitiateTransferRequestBody$Outbound = {
  _links: InitiateTransferLinks$Outbound;
  amount: models.TransferAmount$Outbound;
  metadata?: InitiateTransferMetadata$Outbound | undefined;
  fees?: Array<Fee$Outbound> | undefined;
  clearing?: InitiateTransferClearing$Outbound | undefined;
  achDetails?: InitiateTransferAchDetails$Outbound | undefined;
  rtpDetails?: RtpDetails$Outbound | undefined;
  instantDetails?: InstantDetails$Outbound | undefined;
  correlationId?: string | undefined;
  processingChannel?: InitiateTransferProcessingChannel$Outbound | undefined;
};

/** @internal */
export const InitiateTransferRequestBody$outboundSchema: z.ZodType<
  InitiateTransferRequestBody$Outbound,
  z.ZodTypeDef,
  InitiateTransferRequestBody
> = z.object({
  links: z.lazy(() => InitiateTransferLinks$outboundSchema),
  amount: models.TransferAmount$outboundSchema,
  metadata: z.lazy(() => InitiateTransferMetadata$outboundSchema).optional(),
  fees: z.array(z.lazy(() => Fee$outboundSchema)).optional(),
  clearing: z.lazy(() => InitiateTransferClearing$outboundSchema).optional(),
  achDetails: z.lazy(() => InitiateTransferAchDetails$outboundSchema)
    .optional(),
  rtpDetails: z.lazy(() => RtpDetails$outboundSchema).optional(),
  instantDetails: z.lazy(() => InstantDetails$outboundSchema).optional(),
  correlationId: z.string().optional(),
  processingChannel: z.lazy(() =>
    InitiateTransferProcessingChannel$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferRequestBody$ {
  /** @deprecated use `InitiateTransferRequestBody$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferRequestBody$inboundSchema;
  /** @deprecated use `InitiateTransferRequestBody$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferRequestBody$outboundSchema;
  /** @deprecated use `InitiateTransferRequestBody$Outbound` instead. */
  export type Outbound = InitiateTransferRequestBody$Outbound;
}

export function initiateTransferRequestBodyToJSON(
  initiateTransferRequestBody: InitiateTransferRequestBody,
): string {
  return JSON.stringify(
    InitiateTransferRequestBody$outboundSchema.parse(
      initiateTransferRequestBody,
    ),
  );
}

export function initiateTransferRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferRequestBody' from JSON`,
  );
}

/** @internal */
export const InitiateTransferRequest$inboundSchema: z.ZodType<
  InitiateTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string().optional(),
  RequestBody: z.lazy(() => InitiateTransferRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type InitiateTransferRequest$Outbound = {
  "Idempotency-Key"?: string | undefined;
  RequestBody: InitiateTransferRequestBody$Outbound;
};

/** @internal */
export const InitiateTransferRequest$outboundSchema: z.ZodType<
  InitiateTransferRequest$Outbound,
  z.ZodTypeDef,
  InitiateTransferRequest
> = z.object({
  idempotencyKey: z.string().optional(),
  requestBody: z.lazy(() => InitiateTransferRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferRequest$ {
  /** @deprecated use `InitiateTransferRequest$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferRequest$inboundSchema;
  /** @deprecated use `InitiateTransferRequest$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferRequest$outboundSchema;
  /** @deprecated use `InitiateTransferRequest$Outbound` instead. */
  export type Outbound = InitiateTransferRequest$Outbound;
}

export function initiateTransferRequestToJSON(
  initiateTransferRequest: InitiateTransferRequest,
): string {
  return JSON.stringify(
    InitiateTransferRequest$outboundSchema.parse(initiateTransferRequest),
  );
}

export function initiateTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferRequest' from JSON`,
  );
}

/** @internal */
export const InitiateTransferResponse$inboundSchema: z.ZodType<
  InitiateTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
  });
});

/** @internal */
export type InitiateTransferResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
};

/** @internal */
export const InitiateTransferResponse$outboundSchema: z.ZodType<
  InitiateTransferResponse$Outbound,
  z.ZodTypeDef,
  InitiateTransferResponse
> = z.object({
  headers: z.record(z.array(z.string())),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferResponse$ {
  /** @deprecated use `InitiateTransferResponse$inboundSchema` instead. */
  export const inboundSchema = InitiateTransferResponse$inboundSchema;
  /** @deprecated use `InitiateTransferResponse$outboundSchema` instead. */
  export const outboundSchema = InitiateTransferResponse$outboundSchema;
  /** @deprecated use `InitiateTransferResponse$Outbound` instead. */
  export type Outbound = InitiateTransferResponse$Outbound;
}

export function initiateTransferResponseToJSON(
  initiateTransferResponse: InitiateTransferResponse,
): string {
  return JSON.stringify(
    InitiateTransferResponse$outboundSchema.parse(initiateTransferResponse),
  );
}

export function initiateTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<InitiateTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InitiateTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InitiateTransferResponse' from JSON`,
  );
}
