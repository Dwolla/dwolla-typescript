/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * Parameters to update a customer funding source
 */
export type UpdateOrRemoveFundingSourceRequestBody =
  | models.UpdateVerifiedBank
  | models.RemoveBank
  | models.UpdateUnverifiedBank;

export type UpdateOrRemoveFundingSourceRequest = {
  /**
   * Funding source unique identifier
   */
  id: string;
  /**
   * Parameters to update a customer funding source
   */
  requestBody:
    | models.UpdateVerifiedBank
    | models.RemoveBank
    | models.UpdateUnverifiedBank;
};

/**
 * successful operation
 */
export type UpdateOrRemoveFundingSourceResponse = {};

/** @internal */
export const UpdateOrRemoveFundingSourceRequestBody$inboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.UpdateVerifiedBank$inboundSchema,
  models.RemoveBank$inboundSchema,
  models.UpdateUnverifiedBank$inboundSchema,
]);

/** @internal */
export type UpdateOrRemoveFundingSourceRequestBody$Outbound =
  | models.UpdateVerifiedBank$Outbound
  | models.RemoveBank$Outbound
  | models.UpdateUnverifiedBank$Outbound;

/** @internal */
export const UpdateOrRemoveFundingSourceRequestBody$outboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateOrRemoveFundingSourceRequestBody
> = z.union([
  models.UpdateVerifiedBank$outboundSchema,
  models.RemoveBank$outboundSchema,
  models.UpdateUnverifiedBank$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrRemoveFundingSourceRequestBody$ {
  /** @deprecated use `UpdateOrRemoveFundingSourceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrRemoveFundingSourceRequestBody$inboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrRemoveFundingSourceRequestBody$outboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceRequestBody$Outbound` instead. */
  export type Outbound = UpdateOrRemoveFundingSourceRequestBody$Outbound;
}

export function updateOrRemoveFundingSourceRequestBodyToJSON(
  updateOrRemoveFundingSourceRequestBody:
    UpdateOrRemoveFundingSourceRequestBody,
): string {
  return JSON.stringify(
    UpdateOrRemoveFundingSourceRequestBody$outboundSchema.parse(
      updateOrRemoveFundingSourceRequestBody,
    ),
  );
}

export function updateOrRemoveFundingSourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrRemoveFundingSourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrRemoveFundingSourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrRemoveFundingSourceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOrRemoveFundingSourceRequest$inboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.union([
    models.UpdateVerifiedBank$inboundSchema,
    models.RemoveBank$inboundSchema,
    models.UpdateUnverifiedBank$inboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateOrRemoveFundingSourceRequest$Outbound = {
  id: string;
  RequestBody:
    | models.UpdateVerifiedBank$Outbound
    | models.RemoveBank$Outbound
    | models.UpdateUnverifiedBank$Outbound;
};

/** @internal */
export const UpdateOrRemoveFundingSourceRequest$outboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequest$Outbound,
  z.ZodTypeDef,
  UpdateOrRemoveFundingSourceRequest
> = z.object({
  id: z.string(),
  requestBody: z.union([
    models.UpdateVerifiedBank$outboundSchema,
    models.RemoveBank$outboundSchema,
    models.UpdateUnverifiedBank$outboundSchema,
  ]),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrRemoveFundingSourceRequest$ {
  /** @deprecated use `UpdateOrRemoveFundingSourceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOrRemoveFundingSourceRequest$inboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceRequest$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrRemoveFundingSourceRequest$outboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceRequest$Outbound` instead. */
  export type Outbound = UpdateOrRemoveFundingSourceRequest$Outbound;
}

export function updateOrRemoveFundingSourceRequestToJSON(
  updateOrRemoveFundingSourceRequest: UpdateOrRemoveFundingSourceRequest,
): string {
  return JSON.stringify(
    UpdateOrRemoveFundingSourceRequest$outboundSchema.parse(
      updateOrRemoveFundingSourceRequest,
    ),
  );
}

export function updateOrRemoveFundingSourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrRemoveFundingSourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrRemoveFundingSourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrRemoveFundingSourceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateOrRemoveFundingSourceResponse$inboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateOrRemoveFundingSourceResponse$Outbound = {};

/** @internal */
export const UpdateOrRemoveFundingSourceResponse$outboundSchema: z.ZodType<
  UpdateOrRemoveFundingSourceResponse$Outbound,
  z.ZodTypeDef,
  UpdateOrRemoveFundingSourceResponse
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrRemoveFundingSourceResponse$ {
  /** @deprecated use `UpdateOrRemoveFundingSourceResponse$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrRemoveFundingSourceResponse$inboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceResponse$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrRemoveFundingSourceResponse$outboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceResponse$Outbound` instead. */
  export type Outbound = UpdateOrRemoveFundingSourceResponse$Outbound;
}

export function updateOrRemoveFundingSourceResponseToJSON(
  updateOrRemoveFundingSourceResponse: UpdateOrRemoveFundingSourceResponse,
): string {
  return JSON.stringify(
    UpdateOrRemoveFundingSourceResponse$outboundSchema.parse(
      updateOrRemoveFundingSourceResponse,
    ),
  );
}

export function updateOrRemoveFundingSourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrRemoveFundingSourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateOrRemoveFundingSourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrRemoveFundingSourceResponse' from JSON`,
  );
}
