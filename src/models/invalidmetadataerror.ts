/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidMetadataErrorLinks = {};

export type InvalidMetadataErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidMetadataErrorLinks | undefined;
};

export type InvalidMetadataErrorEmbedded = {
  errors?: Array<InvalidMetadataErrorError> | undefined;
};

/** @internal */
export const InvalidMetadataErrorLinks$inboundSchema: z.ZodType<
  InvalidMetadataErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidMetadataErrorLinks$Outbound = {};

/** @internal */
export const InvalidMetadataErrorLinks$outboundSchema: z.ZodType<
  InvalidMetadataErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidMetadataErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidMetadataErrorLinks$ {
  /** @deprecated use `InvalidMetadataErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InvalidMetadataErrorLinks$inboundSchema;
  /** @deprecated use `InvalidMetadataErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InvalidMetadataErrorLinks$outboundSchema;
  /** @deprecated use `InvalidMetadataErrorLinks$Outbound` instead. */
  export type Outbound = InvalidMetadataErrorLinks$Outbound;
}

export function invalidMetadataErrorLinksToJSON(
  invalidMetadataErrorLinks: InvalidMetadataErrorLinks,
): string {
  return JSON.stringify(
    InvalidMetadataErrorLinks$outboundSchema.parse(invalidMetadataErrorLinks),
  );
}

export function invalidMetadataErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidMetadataErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidMetadataErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidMetadataErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidMetadataErrorError$inboundSchema: z.ZodType<
  InvalidMetadataErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidMetadataErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidMetadataErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidMetadataErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidMetadataErrorError$outboundSchema: z.ZodType<
  InvalidMetadataErrorError$Outbound,
  z.ZodTypeDef,
  InvalidMetadataErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidMetadataErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidMetadataErrorError$ {
  /** @deprecated use `InvalidMetadataErrorError$inboundSchema` instead. */
  export const inboundSchema = InvalidMetadataErrorError$inboundSchema;
  /** @deprecated use `InvalidMetadataErrorError$outboundSchema` instead. */
  export const outboundSchema = InvalidMetadataErrorError$outboundSchema;
  /** @deprecated use `InvalidMetadataErrorError$Outbound` instead. */
  export type Outbound = InvalidMetadataErrorError$Outbound;
}

export function invalidMetadataErrorErrorToJSON(
  invalidMetadataErrorError: InvalidMetadataErrorError,
): string {
  return JSON.stringify(
    InvalidMetadataErrorError$outboundSchema.parse(invalidMetadataErrorError),
  );
}

export function invalidMetadataErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidMetadataErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidMetadataErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidMetadataErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidMetadataErrorEmbedded$inboundSchema: z.ZodType<
  InvalidMetadataErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidMetadataErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InvalidMetadataErrorEmbedded$Outbound = {
  errors?: Array<InvalidMetadataErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidMetadataErrorEmbedded$outboundSchema: z.ZodType<
  InvalidMetadataErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidMetadataErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InvalidMetadataErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidMetadataErrorEmbedded$ {
  /** @deprecated use `InvalidMetadataErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InvalidMetadataErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidMetadataErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InvalidMetadataErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidMetadataErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidMetadataErrorEmbedded$Outbound;
}

export function invalidMetadataErrorEmbeddedToJSON(
  invalidMetadataErrorEmbedded: InvalidMetadataErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidMetadataErrorEmbedded$outboundSchema.parse(
      invalidMetadataErrorEmbedded,
    ),
  );
}

export function invalidMetadataErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InvalidMetadataErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidMetadataErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidMetadataErrorEmbedded' from JSON`,
  );
}
