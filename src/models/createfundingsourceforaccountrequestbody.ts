/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateFundingSourceForAccountRequestBodyExchange = {
  href?: string | undefined;
};

export type CreateFundingSourceForAccountRequestBodyLinks = {
  exchange?: CreateFundingSourceForAccountRequestBodyExchange | undefined;
};

export const CreateFundingSourceForAccountRequestBodyBankAccountType = {
  Checking: "checking",
  Savings: "savings",
} as const;
export type CreateFundingSourceForAccountRequestBodyBankAccountType =
  ClosedEnum<typeof CreateFundingSourceForAccountRequestBodyBankAccountType>;

export type CreateFundingSourceForAccountRequestBody = {
  links?: CreateFundingSourceForAccountRequestBodyLinks | undefined;
  name: string;
  bankAccountType: CreateFundingSourceForAccountRequestBodyBankAccountType;
  accountNumber: string;
  routingNumber: string;
  channels?: Array<string> | undefined;
};

/** @internal */
export const CreateFundingSourceForAccountRequestBodyExchange$inboundSchema:
  z.ZodType<
    CreateFundingSourceForAccountRequestBodyExchange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string().optional(),
  });

/** @internal */
export type CreateFundingSourceForAccountRequestBodyExchange$Outbound = {
  href?: string | undefined;
};

/** @internal */
export const CreateFundingSourceForAccountRequestBodyExchange$outboundSchema:
  z.ZodType<
    CreateFundingSourceForAccountRequestBodyExchange$Outbound,
    z.ZodTypeDef,
    CreateFundingSourceForAccountRequestBodyExchange
  > = z.object({
    href: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFundingSourceForAccountRequestBodyExchange$ {
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyExchange$inboundSchema` instead. */
  export const inboundSchema =
    CreateFundingSourceForAccountRequestBodyExchange$inboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyExchange$outboundSchema` instead. */
  export const outboundSchema =
    CreateFundingSourceForAccountRequestBodyExchange$outboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyExchange$Outbound` instead. */
  export type Outbound =
    CreateFundingSourceForAccountRequestBodyExchange$Outbound;
}

export function createFundingSourceForAccountRequestBodyExchangeToJSON(
  createFundingSourceForAccountRequestBodyExchange:
    CreateFundingSourceForAccountRequestBodyExchange,
): string {
  return JSON.stringify(
    CreateFundingSourceForAccountRequestBodyExchange$outboundSchema.parse(
      createFundingSourceForAccountRequestBodyExchange,
    ),
  );
}

export function createFundingSourceForAccountRequestBodyExchangeFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateFundingSourceForAccountRequestBodyExchange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFundingSourceForAccountRequestBodyExchange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateFundingSourceForAccountRequestBodyExchange' from JSON`,
  );
}

/** @internal */
export const CreateFundingSourceForAccountRequestBodyLinks$inboundSchema:
  z.ZodType<
    CreateFundingSourceForAccountRequestBodyLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    exchange: z.lazy(() =>
      CreateFundingSourceForAccountRequestBodyExchange$inboundSchema
    ).optional(),
  });

/** @internal */
export type CreateFundingSourceForAccountRequestBodyLinks$Outbound = {
  exchange?:
    | CreateFundingSourceForAccountRequestBodyExchange$Outbound
    | undefined;
};

/** @internal */
export const CreateFundingSourceForAccountRequestBodyLinks$outboundSchema:
  z.ZodType<
    CreateFundingSourceForAccountRequestBodyLinks$Outbound,
    z.ZodTypeDef,
    CreateFundingSourceForAccountRequestBodyLinks
  > = z.object({
    exchange: z.lazy(() =>
      CreateFundingSourceForAccountRequestBodyExchange$outboundSchema
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFundingSourceForAccountRequestBodyLinks$ {
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateFundingSourceForAccountRequestBodyLinks$inboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateFundingSourceForAccountRequestBodyLinks$outboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyLinks$Outbound` instead. */
  export type Outbound = CreateFundingSourceForAccountRequestBodyLinks$Outbound;
}

export function createFundingSourceForAccountRequestBodyLinksToJSON(
  createFundingSourceForAccountRequestBodyLinks:
    CreateFundingSourceForAccountRequestBodyLinks,
): string {
  return JSON.stringify(
    CreateFundingSourceForAccountRequestBodyLinks$outboundSchema.parse(
      createFundingSourceForAccountRequestBodyLinks,
    ),
  );
}

export function createFundingSourceForAccountRequestBodyLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateFundingSourceForAccountRequestBodyLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFundingSourceForAccountRequestBodyLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateFundingSourceForAccountRequestBodyLinks' from JSON`,
  );
}

/** @internal */
export const CreateFundingSourceForAccountRequestBodyBankAccountType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateFundingSourceForAccountRequestBodyBankAccountType
  > = z.nativeEnum(CreateFundingSourceForAccountRequestBodyBankAccountType);

/** @internal */
export const CreateFundingSourceForAccountRequestBodyBankAccountType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateFundingSourceForAccountRequestBodyBankAccountType
  > = CreateFundingSourceForAccountRequestBodyBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFundingSourceForAccountRequestBodyBankAccountType$ {
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateFundingSourceForAccountRequestBodyBankAccountType$inboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBodyBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateFundingSourceForAccountRequestBodyBankAccountType$outboundSchema;
}

/** @internal */
export const CreateFundingSourceForAccountRequestBody$inboundSchema: z.ZodType<
  CreateFundingSourceForAccountRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() =>
    CreateFundingSourceForAccountRequestBodyLinks$inboundSchema
  ).optional(),
  name: z.string(),
  bankAccountType:
    CreateFundingSourceForAccountRequestBodyBankAccountType$inboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string(),
  channels: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateFundingSourceForAccountRequestBody$Outbound = {
  _links?: CreateFundingSourceForAccountRequestBodyLinks$Outbound | undefined;
  name: string;
  bankAccountType: string;
  accountNumber: string;
  routingNumber: string;
  channels?: Array<string> | undefined;
};

/** @internal */
export const CreateFundingSourceForAccountRequestBody$outboundSchema: z.ZodType<
  CreateFundingSourceForAccountRequestBody$Outbound,
  z.ZodTypeDef,
  CreateFundingSourceForAccountRequestBody
> = z.object({
  links: z.lazy(() =>
    CreateFundingSourceForAccountRequestBodyLinks$outboundSchema
  ).optional(),
  name: z.string(),
  bankAccountType:
    CreateFundingSourceForAccountRequestBodyBankAccountType$outboundSchema,
  accountNumber: z.string(),
  routingNumber: z.string(),
  channels: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateFundingSourceForAccountRequestBody$ {
  /** @deprecated use `CreateFundingSourceForAccountRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateFundingSourceForAccountRequestBody$inboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateFundingSourceForAccountRequestBody$outboundSchema;
  /** @deprecated use `CreateFundingSourceForAccountRequestBody$Outbound` instead. */
  export type Outbound = CreateFundingSourceForAccountRequestBody$Outbound;
}

export function createFundingSourceForAccountRequestBodyToJSON(
  createFundingSourceForAccountRequestBody:
    CreateFundingSourceForAccountRequestBody,
): string {
  return JSON.stringify(
    CreateFundingSourceForAccountRequestBody$outboundSchema.parse(
      createFundingSourceForAccountRequestBody,
    ),
  );
}

export function createFundingSourceForAccountRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateFundingSourceForAccountRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateFundingSourceForAccountRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateFundingSourceForAccountRequestBody' from JSON`,
  );
}
