/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type MaximumNumberOfResourcesSchema = {
  code: string;
  message: string;
};

/** @internal */
export const MaximumNumberOfResourcesSchema$inboundSchema: z.ZodType<
  MaximumNumberOfResourcesSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/** @internal */
export type MaximumNumberOfResourcesSchema$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const MaximumNumberOfResourcesSchema$outboundSchema: z.ZodType<
  MaximumNumberOfResourcesSchema$Outbound,
  z.ZodTypeDef,
  MaximumNumberOfResourcesSchema
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MaximumNumberOfResourcesSchema$ {
  /** @deprecated use `MaximumNumberOfResourcesSchema$inboundSchema` instead. */
  export const inboundSchema = MaximumNumberOfResourcesSchema$inboundSchema;
  /** @deprecated use `MaximumNumberOfResourcesSchema$outboundSchema` instead. */
  export const outboundSchema = MaximumNumberOfResourcesSchema$outboundSchema;
  /** @deprecated use `MaximumNumberOfResourcesSchema$Outbound` instead. */
  export type Outbound = MaximumNumberOfResourcesSchema$Outbound;
}

export function maximumNumberOfResourcesSchemaToJSON(
  maximumNumberOfResourcesSchema: MaximumNumberOfResourcesSchema,
): string {
  return JSON.stringify(
    MaximumNumberOfResourcesSchema$outboundSchema.parse(
      maximumNumberOfResourcesSchema,
    ),
  );
}

export function maximumNumberOfResourcesSchemaFromJSON(
  jsonString: string,
): SafeParseResult<MaximumNumberOfResourcesSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MaximumNumberOfResourcesSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MaximumNumberOfResourcesSchema' from JSON`,
  );
}
