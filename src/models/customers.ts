/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Customer,
  Customer$inboundSchema,
  Customer$Outbound,
  Customer$outboundSchema,
} from "./customer.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type CustomersEmbedded = {
  customers?: Array<Customer> | undefined;
};

export type Customers = {
  links?: { [k: string]: HalLink } | undefined;
  embedded?: CustomersEmbedded | undefined;
};

/** @internal */
export const CustomersEmbedded$inboundSchema: z.ZodType<
  CustomersEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  customers: z.array(Customer$inboundSchema).optional(),
});

/** @internal */
export type CustomersEmbedded$Outbound = {
  customers?: Array<Customer$Outbound> | undefined;
};

/** @internal */
export const CustomersEmbedded$outboundSchema: z.ZodType<
  CustomersEmbedded$Outbound,
  z.ZodTypeDef,
  CustomersEmbedded
> = z.object({
  customers: z.array(Customer$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CustomersEmbedded$ {
  /** @deprecated use `CustomersEmbedded$inboundSchema` instead. */
  export const inboundSchema = CustomersEmbedded$inboundSchema;
  /** @deprecated use `CustomersEmbedded$outboundSchema` instead. */
  export const outboundSchema = CustomersEmbedded$outboundSchema;
  /** @deprecated use `CustomersEmbedded$Outbound` instead. */
  export type Outbound = CustomersEmbedded$Outbound;
}

export function customersEmbeddedToJSON(
  customersEmbedded: CustomersEmbedded,
): string {
  return JSON.stringify(
    CustomersEmbedded$outboundSchema.parse(customersEmbedded),
  );
}

export function customersEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<CustomersEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CustomersEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CustomersEmbedded' from JSON`,
  );
}

/** @internal */
export const Customers$inboundSchema: z.ZodType<
  Customers,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  _embedded: z.lazy(() => CustomersEmbedded$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type Customers$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  _embedded?: CustomersEmbedded$Outbound | undefined;
};

/** @internal */
export const Customers$outboundSchema: z.ZodType<
  Customers$Outbound,
  z.ZodTypeDef,
  Customers
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  embedded: z.lazy(() => CustomersEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customers$ {
  /** @deprecated use `Customers$inboundSchema` instead. */
  export const inboundSchema = Customers$inboundSchema;
  /** @deprecated use `Customers$outboundSchema` instead. */
  export const outboundSchema = Customers$outboundSchema;
  /** @deprecated use `Customers$Outbound` instead. */
  export type Outbound = Customers$Outbound;
}

export function customersToJSON(customers: Customers): string {
  return JSON.stringify(Customers$outboundSchema.parse(customers));
}

export function customersFromJSON(
  jsonString: string,
): SafeParseResult<Customers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customers' from JSON`,
  );
}
