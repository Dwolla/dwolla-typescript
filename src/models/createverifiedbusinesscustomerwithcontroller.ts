/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InternationalAddress,
  InternationalAddress$inboundSchema,
  InternationalAddress$Outbound,
  InternationalAddress$outboundSchema,
} from "./internationaladdress.js";

export type CreateVerifiedBusinessCustomerWithControllerController = {
  firstName: string;
  lastName: string;
  title: string;
  dateOfBirth: string;
  address: InternationalAddress;
  ssn: string;
};

export const CreateVerifiedBusinessCustomerWithControllerBusinessType = {
  Llc: "llc",
  Corporation: "corporation",
  Partnership: "partnership",
} as const;
export type CreateVerifiedBusinessCustomerWithControllerBusinessType =
  ClosedEnum<typeof CreateVerifiedBusinessCustomerWithControllerBusinessType>;

/**
 * Create a Verified Business customer with a US controller
 */
export type CreateVerifiedBusinessCustomerWithController = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  type?: "business" | undefined;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  businessClassification: string;
  businessName: string;
  doingBusinessAs?: string | undefined;
  ein: string;
  website?: string | undefined;
  controller: CreateVerifiedBusinessCustomerWithControllerController;
  businessType: CreateVerifiedBusinessCustomerWithControllerBusinessType;
};

/** @internal */
export const CreateVerifiedBusinessCustomerWithControllerController$inboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithControllerController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: InternationalAddress$inboundSchema,
    ssn: z.string(),
  });

/** @internal */
export type CreateVerifiedBusinessCustomerWithControllerController$Outbound = {
  firstName: string;
  lastName: string;
  title: string;
  dateOfBirth: string;
  address: InternationalAddress$Outbound;
  ssn: string;
};

/** @internal */
export const CreateVerifiedBusinessCustomerWithControllerController$outboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithControllerController$Outbound,
    z.ZodTypeDef,
    CreateVerifiedBusinessCustomerWithControllerController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: InternationalAddress$outboundSchema,
    ssn: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithControllerController$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithControllerController$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithControllerController$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithControllerController$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithControllerController$outboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithControllerController$Outbound` instead. */
  export type Outbound =
    CreateVerifiedBusinessCustomerWithControllerController$Outbound;
}

export function createVerifiedBusinessCustomerWithControllerControllerToJSON(
  createVerifiedBusinessCustomerWithControllerController:
    CreateVerifiedBusinessCustomerWithControllerController,
): string {
  return JSON.stringify(
    CreateVerifiedBusinessCustomerWithControllerController$outboundSchema.parse(
      createVerifiedBusinessCustomerWithControllerController,
    ),
  );
}

export function createVerifiedBusinessCustomerWithControllerControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateVerifiedBusinessCustomerWithControllerController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateVerifiedBusinessCustomerWithControllerController$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedBusinessCustomerWithControllerController' from JSON`,
  );
}

/** @internal */
export const CreateVerifiedBusinessCustomerWithControllerBusinessType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateVerifiedBusinessCustomerWithControllerBusinessType
  > = z.nativeEnum(CreateVerifiedBusinessCustomerWithControllerBusinessType);

/** @internal */
export const CreateVerifiedBusinessCustomerWithControllerBusinessType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateVerifiedBusinessCustomerWithControllerBusinessType
  > = CreateVerifiedBusinessCustomerWithControllerBusinessType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithControllerBusinessType$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithControllerBusinessType$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithControllerBusinessType$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithControllerBusinessType$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithControllerBusinessType$outboundSchema;
}

/** @internal */
export const CreateVerifiedBusinessCustomerWithController$inboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    phone: z.string().optional(),
    correlationId: z.string().optional(),
    type: z.literal("business").default("business").optional(),
    address1: z.string(),
    address2: z.string().optional(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    businessClassification: z.string(),
    businessName: z.string(),
    doingBusinessAs: z.string().optional(),
    ein: z.string(),
    website: z.string().optional(),
    controller: z.lazy(() =>
      CreateVerifiedBusinessCustomerWithControllerController$inboundSchema
    ),
    businessType:
      CreateVerifiedBusinessCustomerWithControllerBusinessType$inboundSchema,
  });

/** @internal */
export type CreateVerifiedBusinessCustomerWithController$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  type: "business";
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  businessClassification: string;
  businessName: string;
  doingBusinessAs?: string | undefined;
  ein: string;
  website?: string | undefined;
  controller: CreateVerifiedBusinessCustomerWithControllerController$Outbound;
  businessType: string;
};

/** @internal */
export const CreateVerifiedBusinessCustomerWithController$outboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithController$Outbound,
    z.ZodTypeDef,
    CreateVerifiedBusinessCustomerWithController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    phone: z.string().optional(),
    correlationId: z.string().optional(),
    type: z.literal("business"),
    address1: z.string(),
    address2: z.string().optional(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    businessClassification: z.string(),
    businessName: z.string(),
    doingBusinessAs: z.string().optional(),
    ein: z.string(),
    website: z.string().optional(),
    controller: z.lazy(() =>
      CreateVerifiedBusinessCustomerWithControllerController$outboundSchema
    ),
    businessType:
      CreateVerifiedBusinessCustomerWithControllerBusinessType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithController$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithController$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithController$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithController$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithController$outboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithController$Outbound` instead. */
  export type Outbound = CreateVerifiedBusinessCustomerWithController$Outbound;
}

export function createVerifiedBusinessCustomerWithControllerToJSON(
  createVerifiedBusinessCustomerWithController:
    CreateVerifiedBusinessCustomerWithController,
): string {
  return JSON.stringify(
    CreateVerifiedBusinessCustomerWithController$outboundSchema.parse(
      createVerifiedBusinessCustomerWithController,
    ),
  );
}

export function createVerifiedBusinessCustomerWithControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateVerifiedBusinessCustomerWithController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateVerifiedBusinessCustomerWithController$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateVerifiedBusinessCustomerWithController' from JSON`,
  );
}
