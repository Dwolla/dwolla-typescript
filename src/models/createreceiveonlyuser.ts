/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Create a Receive Only User
 */
export type CreateReceiveOnlyUser = {
  firstName: string;
  lastName: string;
  email: string;
  type?: "receive-only" | undefined;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateReceiveOnlyUser$inboundSchema: z.ZodType<
  CreateReceiveOnlyUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  type: z.literal("receive-only").default("receive-only").optional(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/** @internal */
export type CreateReceiveOnlyUser$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  type: "receive-only";
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateReceiveOnlyUser$outboundSchema: z.ZodType<
  CreateReceiveOnlyUser$Outbound,
  z.ZodTypeDef,
  CreateReceiveOnlyUser
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  type: z.literal("receive-only"),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReceiveOnlyUser$ {
  /** @deprecated use `CreateReceiveOnlyUser$inboundSchema` instead. */
  export const inboundSchema = CreateReceiveOnlyUser$inboundSchema;
  /** @deprecated use `CreateReceiveOnlyUser$outboundSchema` instead. */
  export const outboundSchema = CreateReceiveOnlyUser$outboundSchema;
  /** @deprecated use `CreateReceiveOnlyUser$Outbound` instead. */
  export type Outbound = CreateReceiveOnlyUser$Outbound;
}

export function createReceiveOnlyUserToJSON(
  createReceiveOnlyUser: CreateReceiveOnlyUser,
): string {
  return JSON.stringify(
    CreateReceiveOnlyUser$outboundSchema.parse(createReceiveOnlyUser),
  );
}

export function createReceiveOnlyUserFromJSON(
  jsonString: string,
): SafeParseResult<CreateReceiveOnlyUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReceiveOnlyUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReceiveOnlyUser' from JSON`,
  );
}
