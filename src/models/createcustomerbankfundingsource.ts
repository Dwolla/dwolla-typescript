/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of bank account
 */
export const CreateCustomerBankFundingSourceBankAccountType = {
  Checking: "checking",
  Savings: "savings",
  GeneralLedger: "general-ledger",
  Loan: "loan",
} as const;
/**
 * Type of bank account
 */
export type CreateCustomerBankFundingSourceBankAccountType = ClosedEnum<
  typeof CreateCustomerBankFundingSourceBankAccountType
>;

export const CreateCustomerBankFundingSourceChannel = {
  Wire: "wire",
} as const;
export type CreateCustomerBankFundingSourceChannel = ClosedEnum<
  typeof CreateCustomerBankFundingSourceChannel
>;

export type CreateCustomerBankFundingSourceOnDemandAuthorization = {
  href: string;
};

export type CreateCustomerBankFundingSourceLinks = {
  onDemandAuthorization?:
    | CreateCustomerBankFundingSourceOnDemandAuthorization
    | undefined;
};

/**
 * Schema for creating a basic bank funding source using routing and account numbers. This is the traditional method of adding a bank account.
 */
export type CreateCustomerBankFundingSource = {
  /**
   * A bank routing number that identifies a bank or credit union in the U.S.
   */
  routingNumber: string;
  /**
   * The bank account number
   */
  accountNumber: string;
  /**
   * Type of bank account
   */
  bankAccountType: CreateCustomerBankFundingSourceBankAccountType;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * Use when creating an unverified bank account.
   */
  verified?: false | undefined;
  /**
   * A processor token obtained from Plaid for adding and verifying a bank
   */
  plaidToken?: string | undefined;
  /**
   * An array containing a list of processing channels. ACH is the default processing channel for bank transfers.
   */
  channels?: Array<CreateCustomerBankFundingSourceChannel> | undefined;
  links?: CreateCustomerBankFundingSourceLinks | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceBankAccountType$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceBankAccountType> = z
    .nativeEnum(CreateCustomerBankFundingSourceBankAccountType);

/** @internal */
export const CreateCustomerBankFundingSourceBankAccountType$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceBankAccountType> =
    CreateCustomerBankFundingSourceBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceBankAccountType$ {
  /** @deprecated use `CreateCustomerBankFundingSourceBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceBankAccountType$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceBankAccountType$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceChannel$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceChannel> = z.nativeEnum(
    CreateCustomerBankFundingSourceChannel,
  );

/** @internal */
export const CreateCustomerBankFundingSourceChannel$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceChannel> =
    CreateCustomerBankFundingSourceChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceChannel$ {
  /** @deprecated use `CreateCustomerBankFundingSourceChannel$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceChannel$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceChannel$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceChannel$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceOnDemandAuthorization$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceOnDemandAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerBankFundingSourceOnDemandAuthorization$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerBankFundingSourceOnDemandAuthorization$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceOnDemandAuthorization$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceOnDemandAuthorization
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceOnDemandAuthorization$ {
  /** @deprecated use `CreateCustomerBankFundingSourceOnDemandAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceOnDemandAuthorization$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceOnDemandAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceOnDemandAuthorization$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceOnDemandAuthorization$Outbound` instead. */
  export type Outbound =
    CreateCustomerBankFundingSourceOnDemandAuthorization$Outbound;
}

export function createCustomerBankFundingSourceOnDemandAuthorizationToJSON(
  createCustomerBankFundingSourceOnDemandAuthorization:
    CreateCustomerBankFundingSourceOnDemandAuthorization,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceOnDemandAuthorization$outboundSchema.parse(
      createCustomerBankFundingSourceOnDemandAuthorization,
    ),
  );
}

export function createCustomerBankFundingSourceOnDemandAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceOnDemandAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceOnDemandAuthorization$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerBankFundingSourceOnDemandAuthorization' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSourceLinks$inboundSchema: z.ZodType<
  CreateCustomerBankFundingSourceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  "on-demand-authorization": z.lazy(() =>
    CreateCustomerBankFundingSourceOnDemandAuthorization$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "on-demand-authorization": "onDemandAuthorization",
  });
});

/** @internal */
export type CreateCustomerBankFundingSourceLinks$Outbound = {
  "on-demand-authorization"?:
    | CreateCustomerBankFundingSourceOnDemandAuthorization$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceLinks$outboundSchema: z.ZodType<
  CreateCustomerBankFundingSourceLinks$Outbound,
  z.ZodTypeDef,
  CreateCustomerBankFundingSourceLinks
> = z.object({
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerBankFundingSourceOnDemandAuthorization$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    onDemandAuthorization: "on-demand-authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceLinks$ {
  /** @deprecated use `CreateCustomerBankFundingSourceLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceLinks$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceLinks$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceLinks$Outbound` instead. */
  export type Outbound = CreateCustomerBankFundingSourceLinks$Outbound;
}

export function createCustomerBankFundingSourceLinksToJSON(
  createCustomerBankFundingSourceLinks: CreateCustomerBankFundingSourceLinks,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceLinks$outboundSchema.parse(
      createCustomerBankFundingSourceLinks,
    ),
  );
}

export function createCustomerBankFundingSourceLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerBankFundingSourceLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerBankFundingSourceLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSource$inboundSchema: z.ZodType<
  CreateCustomerBankFundingSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  routingNumber: z.string(),
  accountNumber: z.string(),
  bankAccountType: CreateCustomerBankFundingSourceBankAccountType$inboundSchema,
  name: z.string(),
  verified: z.literal(false).default(false).optional(),
  plaidToken: z.string().optional(),
  channels: z.array(CreateCustomerBankFundingSourceChannel$inboundSchema)
    .optional(),
  _links: z.lazy(() => CreateCustomerBankFundingSourceLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerBankFundingSource$Outbound = {
  routingNumber: string;
  accountNumber: string;
  bankAccountType: string;
  name: string;
  verified: false;
  plaidToken?: string | undefined;
  channels?: Array<string> | undefined;
  _links?: CreateCustomerBankFundingSourceLinks$Outbound | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSource$outboundSchema: z.ZodType<
  CreateCustomerBankFundingSource$Outbound,
  z.ZodTypeDef,
  CreateCustomerBankFundingSource
> = z.object({
  routingNumber: z.string(),
  accountNumber: z.string(),
  bankAccountType:
    CreateCustomerBankFundingSourceBankAccountType$outboundSchema,
  name: z.string(),
  verified: z.literal(false).default(false as const),
  plaidToken: z.string().optional(),
  channels: z.array(CreateCustomerBankFundingSourceChannel$outboundSchema)
    .optional(),
  links: z.lazy(() => CreateCustomerBankFundingSourceLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSource$ {
  /** @deprecated use `CreateCustomerBankFundingSource$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerBankFundingSource$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSource$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerBankFundingSource$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSource$Outbound` instead. */
  export type Outbound = CreateCustomerBankFundingSource$Outbound;
}

export function createCustomerBankFundingSourceToJSON(
  createCustomerBankFundingSource: CreateCustomerBankFundingSource,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSource$outboundSchema.parse(
      createCustomerBankFundingSource,
    ),
  );
}

export function createCustomerBankFundingSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerBankFundingSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerBankFundingSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerBankFundingSource' from JSON`,
  );
}
