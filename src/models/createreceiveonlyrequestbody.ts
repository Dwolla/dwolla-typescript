/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Create a Receive Only User
 */
export type CreateReceiveOnlyRequestBody = {
  firstName: string;
  lastName: string;
  email: string;
  type: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateReceiveOnlyRequestBody$inboundSchema: z.ZodType<
  CreateReceiveOnlyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  type: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/** @internal */
export type CreateReceiveOnlyRequestBody$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  type: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName?: string | undefined;
};

/** @internal */
export const CreateReceiveOnlyRequestBody$outboundSchema: z.ZodType<
  CreateReceiveOnlyRequestBody$Outbound,
  z.ZodTypeDef,
  CreateReceiveOnlyRequestBody
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  type: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReceiveOnlyRequestBody$ {
  /** @deprecated use `CreateReceiveOnlyRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateReceiveOnlyRequestBody$inboundSchema;
  /** @deprecated use `CreateReceiveOnlyRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateReceiveOnlyRequestBody$outboundSchema;
  /** @deprecated use `CreateReceiveOnlyRequestBody$Outbound` instead. */
  export type Outbound = CreateReceiveOnlyRequestBody$Outbound;
}

export function createReceiveOnlyRequestBodyToJSON(
  createReceiveOnlyRequestBody: CreateReceiveOnlyRequestBody,
): string {
  return JSON.stringify(
    CreateReceiveOnlyRequestBody$outboundSchema.parse(
      createReceiveOnlyRequestBody,
    ),
  );
}

export function createReceiveOnlyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateReceiveOnlyRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReceiveOnlyRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReceiveOnlyRequestBody' from JSON`,
  );
}
