/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of funding source. Must be set to "virtual" for VAN creation.
 */
export const Type = {
  Virtual: "virtual",
} as const;
/**
 * Type of funding source. Must be set to "virtual" for VAN creation.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * Type of bank account. Must be "checking" for Virtual Account Numbers.
 */
export const BankAccountTypeChecking = {
  Checking: "checking",
} as const;
/**
 * Type of bank account. Must be "checking" for Virtual Account Numbers.
 */
export type BankAccountTypeChecking = ClosedEnum<
  typeof BankAccountTypeChecking
>;

/**
 * Schema for creating a Virtual Account Number (VAN) . VANs are unique account numbers for receiving external transactions into a Dwolla Balance.
 */
export type CreateCustomerFundingSourceChecking = {
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * Type of funding source. Must be set to "virtual" for VAN creation.
   */
  type: Type;
  /**
   * Type of bank account. Must be "checking" for Virtual Account Numbers.
   */
  bankAccountType: BankAccountTypeChecking;
};

export type CreateCustomerFundingSourceExchange = {
  href: string;
};

export type CreateCustomerFundingSourceOnDemandAuthorization2 = {
  href: string;
};

export type CreateCustomerFundingSourceLinks2 = {
  exchange: CreateCustomerFundingSourceExchange;
  onDemandAuthorization?:
    | CreateCustomerFundingSourceOnDemandAuthorization2
    | undefined;
};

/**
 * Type of bank account
 */
export const CreateCustomerFundingSourceBankAccountType2 = {
  Checking: "checking",
  Savings: "savings",
  GeneralLedger: "general-ledger",
  Loan: "loan",
} as const;
/**
 * Type of bank account
 */
export type CreateCustomerFundingSourceBankAccountType2 = ClosedEnum<
  typeof CreateCustomerFundingSourceBankAccountType2
>;

/**
 * Schema for creating a funding source using an exchange resource. This method is used when the bank account information is obtained via Instant Account Verification (IAV) through an exchange partner (like Plaid, Visa, MX, or Finicity).
 */
export type CreateCustomerFundingSource2 = {
  links: CreateCustomerFundingSourceLinks2;
  /**
   * Type of bank account
   */
  bankAccountType: CreateCustomerFundingSourceBankAccountType2;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
};

/**
 * Type of bank account
 */
export const CreateCustomerFundingSourceBankAccountType1 = {
  Checking: "checking",
  Savings: "savings",
  GeneralLedger: "general-ledger",
  Loan: "loan",
} as const;
/**
 * Type of bank account
 */
export type CreateCustomerFundingSourceBankAccountType1 = ClosedEnum<
  typeof CreateCustomerFundingSourceBankAccountType1
>;

export const Channel = {
  Wire: "wire",
} as const;
export type Channel = ClosedEnum<typeof Channel>;

export type CreateCustomerFundingSourceOnDemandAuthorization1 = {
  href: string;
};

export type CreateCustomerFundingSourceLinks1 = {
  onDemandAuthorization?:
    | CreateCustomerFundingSourceOnDemandAuthorization1
    | undefined;
};

/**
 * Schema for creating a basic bank funding source using routing and account numbers. This is the traditional method of adding a bank account.
 */
export type CreateCustomerFundingSource1 = {
  /**
   * A bank routing number that identifies a bank or credit union in the U.S.
   */
  routingNumber: string;
  /**
   * The bank account number
   */
  accountNumber: string;
  /**
   * Type of bank account
   */
  bankAccountType: CreateCustomerFundingSourceBankAccountType1;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * A processor token obtained from Plaid for adding and verifying a bank
   */
  plaidToken?: string | undefined;
  /**
   * An array containing a list of processing channels. ACH is the default processing channel for bank transfers.
   */
  channels?: Array<Channel> | undefined;
  links?: CreateCustomerFundingSourceLinks1 | undefined;
};

export type CreateCustomerFundingSourceUnion =
  | CreateCustomerFundingSource2
  | CreateCustomerFundingSourceChecking
  | CreateCustomerFundingSource1;

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const BankAccountTypeChecking$inboundSchema: z.ZodNativeEnum<
  typeof BankAccountTypeChecking
> = z.nativeEnum(BankAccountTypeChecking);

/** @internal */
export const BankAccountTypeChecking$outboundSchema: z.ZodNativeEnum<
  typeof BankAccountTypeChecking
> = BankAccountTypeChecking$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BankAccountTypeChecking$ {
  /** @deprecated use `BankAccountTypeChecking$inboundSchema` instead. */
  export const inboundSchema = BankAccountTypeChecking$inboundSchema;
  /** @deprecated use `BankAccountTypeChecking$outboundSchema` instead. */
  export const outboundSchema = BankAccountTypeChecking$outboundSchema;
}

/** @internal */
export const CreateCustomerFundingSourceChecking$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceChecking,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  type: Type$inboundSchema,
  bankAccountType: BankAccountTypeChecking$inboundSchema,
});

/** @internal */
export type CreateCustomerFundingSourceChecking$Outbound = {
  name: string;
  type: string;
  bankAccountType: string;
};

/** @internal */
export const CreateCustomerFundingSourceChecking$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceChecking$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceChecking
> = z.object({
  name: z.string(),
  type: Type$outboundSchema,
  bankAccountType: BankAccountTypeChecking$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceChecking$ {
  /** @deprecated use `CreateCustomerFundingSourceChecking$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceChecking$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceChecking$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceChecking$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceChecking$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceChecking$Outbound;
}

export function createCustomerFundingSourceCheckingToJSON(
  createCustomerFundingSourceChecking: CreateCustomerFundingSourceChecking,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceChecking$outboundSchema.parse(
      createCustomerFundingSourceChecking,
    ),
  );
}

export function createCustomerFundingSourceCheckingFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceChecking, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceChecking$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceChecking' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceExchange$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceExchange,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
});

/** @internal */
export type CreateCustomerFundingSourceExchange$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerFundingSourceExchange$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceExchange$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceExchange
> = z.object({
  href: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceExchange$ {
  /** @deprecated use `CreateCustomerFundingSourceExchange$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceExchange$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceExchange$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceExchange$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceExchange$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceExchange$Outbound;
}

export function createCustomerFundingSourceExchangeToJSON(
  createCustomerFundingSourceExchange: CreateCustomerFundingSourceExchange,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceExchange$outboundSchema.parse(
      createCustomerFundingSourceExchange,
    ),
  );
}

export function createCustomerFundingSourceExchangeFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceExchange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceExchange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceExchange' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceOnDemandAuthorization2$inboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerFundingSourceOnDemandAuthorization2$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerFundingSourceOnDemandAuthorization2$outboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization2$Outbound,
    z.ZodTypeDef,
    CreateCustomerFundingSourceOnDemandAuthorization2
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceOnDemandAuthorization2$ {
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceOnDemandAuthorization2$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceOnDemandAuthorization2$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization2$Outbound` instead. */
  export type Outbound =
    CreateCustomerFundingSourceOnDemandAuthorization2$Outbound;
}

export function createCustomerFundingSourceOnDemandAuthorization2ToJSON(
  createCustomerFundingSourceOnDemandAuthorization2:
    CreateCustomerFundingSourceOnDemandAuthorization2,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceOnDemandAuthorization2$outboundSchema.parse(
      createCustomerFundingSourceOnDemandAuthorization2,
    ),
  );
}

export function createCustomerFundingSourceOnDemandAuthorization2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceOnDemandAuthorization2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceOnDemandAuthorization2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceOnDemandAuthorization2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceLinks2$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceLinks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  exchange: z.lazy(() => CreateCustomerFundingSourceExchange$inboundSchema),
  "on-demand-authorization": z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization2$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "on-demand-authorization": "onDemandAuthorization",
  });
});

/** @internal */
export type CreateCustomerFundingSourceLinks2$Outbound = {
  exchange: CreateCustomerFundingSourceExchange$Outbound;
  "on-demand-authorization"?:
    | CreateCustomerFundingSourceOnDemandAuthorization2$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerFundingSourceLinks2$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceLinks2$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceLinks2
> = z.object({
  exchange: z.lazy(() => CreateCustomerFundingSourceExchange$outboundSchema),
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization2$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    onDemandAuthorization: "on-demand-authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceLinks2$ {
  /** @deprecated use `CreateCustomerFundingSourceLinks2$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSourceLinks2$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceLinks2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceLinks2$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceLinks2$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceLinks2$Outbound;
}

export function createCustomerFundingSourceLinks2ToJSON(
  createCustomerFundingSourceLinks2: CreateCustomerFundingSourceLinks2,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceLinks2$outboundSchema.parse(
      createCustomerFundingSourceLinks2,
    ),
  );
}

export function createCustomerFundingSourceLinks2FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceLinks2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSourceLinks2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceLinks2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceBankAccountType2$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerFundingSourceBankAccountType2> = z
    .nativeEnum(CreateCustomerFundingSourceBankAccountType2);

/** @internal */
export const CreateCustomerFundingSourceBankAccountType2$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerFundingSourceBankAccountType2> =
    CreateCustomerFundingSourceBankAccountType2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceBankAccountType2$ {
  /** @deprecated use `CreateCustomerFundingSourceBankAccountType2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceBankAccountType2$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceBankAccountType2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceBankAccountType2$outboundSchema;
}

/** @internal */
export const CreateCustomerFundingSource2$inboundSchema: z.ZodType<
  CreateCustomerFundingSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerFundingSourceLinks2$inboundSchema),
  bankAccountType: CreateCustomerFundingSourceBankAccountType2$inboundSchema,
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerFundingSource2$Outbound = {
  _links: CreateCustomerFundingSourceLinks2$Outbound;
  bankAccountType: string;
  name: string;
};

/** @internal */
export const CreateCustomerFundingSource2$outboundSchema: z.ZodType<
  CreateCustomerFundingSource2$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSource2
> = z.object({
  links: z.lazy(() => CreateCustomerFundingSourceLinks2$outboundSchema),
  bankAccountType: CreateCustomerFundingSourceBankAccountType2$outboundSchema,
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSource2$ {
  /** @deprecated use `CreateCustomerFundingSource2$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSource2$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSource2$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerFundingSource2$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSource2$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSource2$Outbound;
}

export function createCustomerFundingSource2ToJSON(
  createCustomerFundingSource2: CreateCustomerFundingSource2,
): string {
  return JSON.stringify(
    CreateCustomerFundingSource2$outboundSchema.parse(
      createCustomerFundingSource2,
    ),
  );
}

export function createCustomerFundingSource2FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSource2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceBankAccountType1$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerFundingSourceBankAccountType1> = z
    .nativeEnum(CreateCustomerFundingSourceBankAccountType1);

/** @internal */
export const CreateCustomerFundingSourceBankAccountType1$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerFundingSourceBankAccountType1> =
    CreateCustomerFundingSourceBankAccountType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceBankAccountType1$ {
  /** @deprecated use `CreateCustomerFundingSourceBankAccountType1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceBankAccountType1$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceBankAccountType1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceBankAccountType1$outboundSchema;
}

/** @internal */
export const Channel$inboundSchema: z.ZodNativeEnum<typeof Channel> = z
  .nativeEnum(Channel);

/** @internal */
export const Channel$outboundSchema: z.ZodNativeEnum<typeof Channel> =
  Channel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Channel$ {
  /** @deprecated use `Channel$inboundSchema` instead. */
  export const inboundSchema = Channel$inboundSchema;
  /** @deprecated use `Channel$outboundSchema` instead. */
  export const outboundSchema = Channel$outboundSchema;
}

/** @internal */
export const CreateCustomerFundingSourceOnDemandAuthorization1$inboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerFundingSourceOnDemandAuthorization1$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerFundingSourceOnDemandAuthorization1$outboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization1$Outbound,
    z.ZodTypeDef,
    CreateCustomerFundingSourceOnDemandAuthorization1
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceOnDemandAuthorization1$ {
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceOnDemandAuthorization1$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceOnDemandAuthorization1$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceOnDemandAuthorization1$Outbound` instead. */
  export type Outbound =
    CreateCustomerFundingSourceOnDemandAuthorization1$Outbound;
}

export function createCustomerFundingSourceOnDemandAuthorization1ToJSON(
  createCustomerFundingSourceOnDemandAuthorization1:
    CreateCustomerFundingSourceOnDemandAuthorization1,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceOnDemandAuthorization1$outboundSchema.parse(
      createCustomerFundingSourceOnDemandAuthorization1,
    ),
  );
}

export function createCustomerFundingSourceOnDemandAuthorization1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceOnDemandAuthorization1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceOnDemandAuthorization1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceOnDemandAuthorization1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceLinks1$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceLinks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "on-demand-authorization": z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization1$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "on-demand-authorization": "onDemandAuthorization",
  });
});

/** @internal */
export type CreateCustomerFundingSourceLinks1$Outbound = {
  "on-demand-authorization"?:
    | CreateCustomerFundingSourceOnDemandAuthorization1$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerFundingSourceLinks1$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceLinks1$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceLinks1
> = z.object({
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization1$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    onDemandAuthorization: "on-demand-authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceLinks1$ {
  /** @deprecated use `CreateCustomerFundingSourceLinks1$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSourceLinks1$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceLinks1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceLinks1$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceLinks1$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceLinks1$Outbound;
}

export function createCustomerFundingSourceLinks1ToJSON(
  createCustomerFundingSourceLinks1: CreateCustomerFundingSourceLinks1,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceLinks1$outboundSchema.parse(
      createCustomerFundingSourceLinks1,
    ),
  );
}

export function createCustomerFundingSourceLinks1FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceLinks1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSourceLinks1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceLinks1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSource1$inboundSchema: z.ZodType<
  CreateCustomerFundingSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  routingNumber: z.string(),
  accountNumber: z.string(),
  bankAccountType: CreateCustomerFundingSourceBankAccountType1$inboundSchema,
  name: z.string(),
  plaidToken: z.string().optional(),
  channels: z.array(Channel$inboundSchema).optional(),
  _links: z.lazy(() => CreateCustomerFundingSourceLinks1$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerFundingSource1$Outbound = {
  routingNumber: string;
  accountNumber: string;
  bankAccountType: string;
  name: string;
  plaidToken?: string | undefined;
  channels?: Array<string> | undefined;
  _links?: CreateCustomerFundingSourceLinks1$Outbound | undefined;
};

/** @internal */
export const CreateCustomerFundingSource1$outboundSchema: z.ZodType<
  CreateCustomerFundingSource1$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSource1
> = z.object({
  routingNumber: z.string(),
  accountNumber: z.string(),
  bankAccountType: CreateCustomerFundingSourceBankAccountType1$outboundSchema,
  name: z.string(),
  plaidToken: z.string().optional(),
  channels: z.array(Channel$outboundSchema).optional(),
  links: z.lazy(() => CreateCustomerFundingSourceLinks1$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSource1$ {
  /** @deprecated use `CreateCustomerFundingSource1$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSource1$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSource1$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerFundingSource1$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSource1$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSource1$Outbound;
}

export function createCustomerFundingSource1ToJSON(
  createCustomerFundingSource1: CreateCustomerFundingSource1,
): string {
  return JSON.stringify(
    CreateCustomerFundingSource1$outboundSchema.parse(
      createCustomerFundingSource1,
    ),
  );
}

export function createCustomerFundingSource1FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSource1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerFundingSourceUnion$inboundSchema: z.ZodType<
  CreateCustomerFundingSourceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCustomerFundingSource2$inboundSchema),
  z.lazy(() => CreateCustomerFundingSourceChecking$inboundSchema),
  z.lazy(() => CreateCustomerFundingSource1$inboundSchema),
]);

/** @internal */
export type CreateCustomerFundingSourceUnion$Outbound =
  | CreateCustomerFundingSource2$Outbound
  | CreateCustomerFundingSourceChecking$Outbound
  | CreateCustomerFundingSource1$Outbound;

/** @internal */
export const CreateCustomerFundingSourceUnion$outboundSchema: z.ZodType<
  CreateCustomerFundingSourceUnion$Outbound,
  z.ZodTypeDef,
  CreateCustomerFundingSourceUnion
> = z.union([
  z.lazy(() => CreateCustomerFundingSource2$outboundSchema),
  z.lazy(() => CreateCustomerFundingSourceChecking$outboundSchema),
  z.lazy(() => CreateCustomerFundingSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceUnion$ {
  /** @deprecated use `CreateCustomerFundingSourceUnion$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerFundingSourceUnion$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceUnion$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerFundingSourceUnion$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceUnion$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceUnion$Outbound;
}

export function createCustomerFundingSourceUnionToJSON(
  createCustomerFundingSourceUnion: CreateCustomerFundingSourceUnion,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceUnion$outboundSchema.parse(
      createCustomerFundingSourceUnion,
    ),
  );
}

export function createCustomerFundingSourceUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerFundingSourceUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerFundingSourceUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerFundingSourceUnion' from JSON`,
  );
}
