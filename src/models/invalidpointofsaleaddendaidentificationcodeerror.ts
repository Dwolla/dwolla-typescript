/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidPointOfSaleAddendaIdentificationCodeErrorLinks = {};

export type InvalidPointOfSaleAddendaIdentificationCodeErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidPointOfSaleAddendaIdentificationCodeErrorLinks | undefined;
};

export type InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded = {
  errors?:
    | Array<InvalidPointOfSaleAddendaIdentificationCodeErrorError>
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$Outbound = {};

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$ {
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$Outbound;
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorLinksToJSON(
  invalidPointOfSaleAddendaIdentificationCodeErrorLinks:
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$outboundSchema.parse(
      invalidPointOfSaleAddendaIdentificationCodeErrorLinks,
    ),
  );
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaIdentificationCodeErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaIdentificationCodeErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorError$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type InvalidPointOfSaleAddendaIdentificationCodeErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorError$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorError$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaIdentificationCodeErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidPointOfSaleAddendaIdentificationCodeErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaIdentificationCodeErrorError$ {
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorError$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorError$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorError$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaIdentificationCodeErrorError$Outbound;
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorErrorToJSON(
  invalidPointOfSaleAddendaIdentificationCodeErrorError:
    InvalidPointOfSaleAddendaIdentificationCodeErrorError,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaIdentificationCodeErrorError$outboundSchema.parse(
      invalidPointOfSaleAddendaIdentificationCodeErrorError,
    ),
  );
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaIdentificationCodeErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaIdentificationCodeErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidPointOfSaleAddendaIdentificationCodeErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidPointOfSaleAddendaIdentificationCodeErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$Outbound =
  {
    errors?:
      | Array<InvalidPointOfSaleAddendaIdentificationCodeErrorError$Outbound>
      | undefined;
  };

/** @internal */
export const InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        InvalidPointOfSaleAddendaIdentificationCodeErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$ {
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$Outbound` instead. */
  export type Outbound =
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$Outbound;
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorEmbeddedToJSON(
  invalidPointOfSaleAddendaIdentificationCodeErrorEmbedded:
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$outboundSchema
      .parse(invalidPointOfSaleAddendaIdentificationCodeErrorEmbedded),
  );
}

export function invalidPointOfSaleAddendaIdentificationCodeErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'InvalidPointOfSaleAddendaIdentificationCodeErrorEmbedded' from JSON`,
  );
}
