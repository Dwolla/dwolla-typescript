/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Suspend a Customer
 */
export type SuspendCustomer = {
  status: string;
};

/** @internal */
export const SuspendCustomer$inboundSchema: z.ZodType<
  SuspendCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
});

/** @internal */
export type SuspendCustomer$Outbound = {
  status: string;
};

/** @internal */
export const SuspendCustomer$outboundSchema: z.ZodType<
  SuspendCustomer$Outbound,
  z.ZodTypeDef,
  SuspendCustomer
> = z.object({
  status: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SuspendCustomer$ {
  /** @deprecated use `SuspendCustomer$inboundSchema` instead. */
  export const inboundSchema = SuspendCustomer$inboundSchema;
  /** @deprecated use `SuspendCustomer$outboundSchema` instead. */
  export const outboundSchema = SuspendCustomer$outboundSchema;
  /** @deprecated use `SuspendCustomer$Outbound` instead. */
  export type Outbound = SuspendCustomer$Outbound;
}

export function suspendCustomerToJSON(
  suspendCustomer: SuspendCustomer,
): string {
  return JSON.stringify(SuspendCustomer$outboundSchema.parse(suspendCustomer));
}

export function suspendCustomerFromJSON(
  jsonString: string,
): SafeParseResult<SuspendCustomer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SuspendCustomer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SuspendCustomer' from JSON`,
  );
}
