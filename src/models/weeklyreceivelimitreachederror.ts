/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WeeklyReceiveLimitReachedErrorLinks = {};

export type WeeklyReceiveLimitReachedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WeeklyReceiveLimitReachedErrorLinks | undefined;
};

export type WeeklyReceiveLimitReachedErrorEmbedded = {
  errors?: Array<WeeklyReceiveLimitReachedErrorError> | undefined;
};

export type WeeklyReceiveLimitReachedError = {
  code: string;
  message: string;
  embedded?: WeeklyReceiveLimitReachedErrorEmbedded | undefined;
};

/** @internal */
export const WeeklyReceiveLimitReachedErrorLinks$inboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WeeklyReceiveLimitReachedErrorLinks$Outbound = {};

/** @internal */
export const WeeklyReceiveLimitReachedErrorLinks$outboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorLinks$Outbound,
  z.ZodTypeDef,
  WeeklyReceiveLimitReachedErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklyReceiveLimitReachedErrorLinks$ {
  /** @deprecated use `WeeklyReceiveLimitReachedErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WeeklyReceiveLimitReachedErrorLinks$inboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WeeklyReceiveLimitReachedErrorLinks$outboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorLinks$Outbound` instead. */
  export type Outbound = WeeklyReceiveLimitReachedErrorLinks$Outbound;
}

export function weeklyReceiveLimitReachedErrorLinksToJSON(
  weeklyReceiveLimitReachedErrorLinks: WeeklyReceiveLimitReachedErrorLinks,
): string {
  return JSON.stringify(
    WeeklyReceiveLimitReachedErrorLinks$outboundSchema.parse(
      weeklyReceiveLimitReachedErrorLinks,
    ),
  );
}

export function weeklyReceiveLimitReachedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<WeeklyReceiveLimitReachedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WeeklyReceiveLimitReachedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklyReceiveLimitReachedErrorLinks' from JSON`,
  );
}

/** @internal */
export const WeeklyReceiveLimitReachedErrorError$inboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => WeeklyReceiveLimitReachedErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type WeeklyReceiveLimitReachedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WeeklyReceiveLimitReachedErrorLinks$Outbound | undefined;
};

/** @internal */
export const WeeklyReceiveLimitReachedErrorError$outboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorError$Outbound,
  z.ZodTypeDef,
  WeeklyReceiveLimitReachedErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => WeeklyReceiveLimitReachedErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklyReceiveLimitReachedErrorError$ {
  /** @deprecated use `WeeklyReceiveLimitReachedErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WeeklyReceiveLimitReachedErrorError$inboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WeeklyReceiveLimitReachedErrorError$outboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorError$Outbound` instead. */
  export type Outbound = WeeklyReceiveLimitReachedErrorError$Outbound;
}

export function weeklyReceiveLimitReachedErrorErrorToJSON(
  weeklyReceiveLimitReachedErrorError: WeeklyReceiveLimitReachedErrorError,
): string {
  return JSON.stringify(
    WeeklyReceiveLimitReachedErrorError$outboundSchema.parse(
      weeklyReceiveLimitReachedErrorError,
    ),
  );
}

export function weeklyReceiveLimitReachedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<WeeklyReceiveLimitReachedErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WeeklyReceiveLimitReachedErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklyReceiveLimitReachedErrorError' from JSON`,
  );
}

/** @internal */
export const WeeklyReceiveLimitReachedErrorEmbedded$inboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => WeeklyReceiveLimitReachedErrorError$inboundSchema),
  ).optional(),
});

/** @internal */
export type WeeklyReceiveLimitReachedErrorEmbedded$Outbound = {
  errors?: Array<WeeklyReceiveLimitReachedErrorError$Outbound> | undefined;
};

/** @internal */
export const WeeklyReceiveLimitReachedErrorEmbedded$outboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedErrorEmbedded$Outbound,
  z.ZodTypeDef,
  WeeklyReceiveLimitReachedErrorEmbedded
> = z.object({
  errors: z.array(
    z.lazy(() => WeeklyReceiveLimitReachedErrorError$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklyReceiveLimitReachedErrorEmbedded$ {
  /** @deprecated use `WeeklyReceiveLimitReachedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WeeklyReceiveLimitReachedErrorEmbedded$inboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WeeklyReceiveLimitReachedErrorEmbedded$outboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedErrorEmbedded$Outbound` instead. */
  export type Outbound = WeeklyReceiveLimitReachedErrorEmbedded$Outbound;
}

export function weeklyReceiveLimitReachedErrorEmbeddedToJSON(
  weeklyReceiveLimitReachedErrorEmbedded:
    WeeklyReceiveLimitReachedErrorEmbedded,
): string {
  return JSON.stringify(
    WeeklyReceiveLimitReachedErrorEmbedded$outboundSchema.parse(
      weeklyReceiveLimitReachedErrorEmbedded,
    ),
  );
}

export function weeklyReceiveLimitReachedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<WeeklyReceiveLimitReachedErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WeeklyReceiveLimitReachedErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklyReceiveLimitReachedErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const WeeklyReceiveLimitReachedError$inboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => WeeklyReceiveLimitReachedErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type WeeklyReceiveLimitReachedError$Outbound = {
  code: string;
  message: string;
  _embedded?: WeeklyReceiveLimitReachedErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const WeeklyReceiveLimitReachedError$outboundSchema: z.ZodType<
  WeeklyReceiveLimitReachedError$Outbound,
  z.ZodTypeDef,
  WeeklyReceiveLimitReachedError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => WeeklyReceiveLimitReachedErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklyReceiveLimitReachedError$ {
  /** @deprecated use `WeeklyReceiveLimitReachedError$inboundSchema` instead. */
  export const inboundSchema = WeeklyReceiveLimitReachedError$inboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedError$outboundSchema` instead. */
  export const outboundSchema = WeeklyReceiveLimitReachedError$outboundSchema;
  /** @deprecated use `WeeklyReceiveLimitReachedError$Outbound` instead. */
  export type Outbound = WeeklyReceiveLimitReachedError$Outbound;
}

export function weeklyReceiveLimitReachedErrorToJSON(
  weeklyReceiveLimitReachedError: WeeklyReceiveLimitReachedError,
): string {
  return JSON.stringify(
    WeeklyReceiveLimitReachedError$outboundSchema.parse(
      weeklyReceiveLimitReachedError,
    ),
  );
}

export function weeklyReceiveLimitReachedErrorFromJSON(
  jsonString: string,
): SafeParseResult<WeeklyReceiveLimitReachedError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklyReceiveLimitReachedError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklyReceiveLimitReachedError' from JSON`,
  );
}
