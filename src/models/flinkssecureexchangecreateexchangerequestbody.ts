/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner = {
  href: string;
};

export type FlinksSecureExchangeCreateExchangeRequestBodyLinks = {
  exchangePartner: FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner;
};

export type FlinksSecureExchangeCreateExchangeRequestBody = {
  links: FlinksSecureExchangeCreateExchangeRequestBodyLinks;
  /**
   * The Flinks connection token
   */
  token: string;
};

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound =
  {
    href: string;
  };

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound,
    z.ZodTypeDef,
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$ {
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema` instead. */
  export const inboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema` instead. */
  export const outboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound` instead. */
  export type Outbound =
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound;
}

export function flinksSecureExchangeCreateExchangeRequestBodyExchangePartnerToJSON(
  flinksSecureExchangeCreateExchangeRequestBodyExchangePartner:
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner,
): string {
  return JSON.stringify(
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
      .parse(flinksSecureExchangeCreateExchangeRequestBodyExchangePartner),
  );
}

export function flinksSecureExchangeCreateExchangeRequestBodyExchangePartnerFromJSON(
  jsonString: string,
): SafeParseResult<
  FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner' from JSON`,
  );
}

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBodyLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "exchange-partner": z.lazy(() =>
      FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "exchange-partner": "exchangePartner",
    });
  });

/** @internal */
export type FlinksSecureExchangeCreateExchangeRequestBodyLinks$Outbound = {
  "exchange-partner":
    FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$Outbound;
};

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBodyLinks$Outbound,
    z.ZodTypeDef,
    FlinksSecureExchangeCreateExchangeRequestBodyLinks
  > = z.object({
    exchangePartner: z.lazy(() =>
      FlinksSecureExchangeCreateExchangeRequestBodyExchangePartner$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      exchangePartner: "exchange-partner",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlinksSecureExchangeCreateExchangeRequestBodyLinks$ {
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema` instead. */
  export const inboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema` instead. */
  export const outboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBodyLinks$Outbound` instead. */
  export type Outbound =
    FlinksSecureExchangeCreateExchangeRequestBodyLinks$Outbound;
}

export function flinksSecureExchangeCreateExchangeRequestBodyLinksToJSON(
  flinksSecureExchangeCreateExchangeRequestBodyLinks:
    FlinksSecureExchangeCreateExchangeRequestBodyLinks,
): string {
  return JSON.stringify(
    FlinksSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema.parse(
      flinksSecureExchangeCreateExchangeRequestBodyLinks,
    ),
  );
}

export function flinksSecureExchangeCreateExchangeRequestBodyLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  FlinksSecureExchangeCreateExchangeRequestBodyLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FlinksSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FlinksSecureExchangeCreateExchangeRequestBodyLinks' from JSON`,
  );
}

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _links: z.lazy(() =>
      FlinksSecureExchangeCreateExchangeRequestBodyLinks$inboundSchema
    ),
    token: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type FlinksSecureExchangeCreateExchangeRequestBody$Outbound = {
  _links: FlinksSecureExchangeCreateExchangeRequestBodyLinks$Outbound;
  token: string;
};

/** @internal */
export const FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema:
  z.ZodType<
    FlinksSecureExchangeCreateExchangeRequestBody$Outbound,
    z.ZodTypeDef,
    FlinksSecureExchangeCreateExchangeRequestBody
  > = z.object({
    links: z.lazy(() =>
      FlinksSecureExchangeCreateExchangeRequestBodyLinks$outboundSchema
    ),
    token: z.string(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlinksSecureExchangeCreateExchangeRequestBody$ {
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema;
  /** @deprecated use `FlinksSecureExchangeCreateExchangeRequestBody$Outbound` instead. */
  export type Outbound = FlinksSecureExchangeCreateExchangeRequestBody$Outbound;
}

export function flinksSecureExchangeCreateExchangeRequestBodyToJSON(
  flinksSecureExchangeCreateExchangeRequestBody:
    FlinksSecureExchangeCreateExchangeRequestBody,
): string {
  return JSON.stringify(
    FlinksSecureExchangeCreateExchangeRequestBody$outboundSchema.parse(
      flinksSecureExchangeCreateExchangeRequestBody,
    ),
  );
}

export function flinksSecureExchangeCreateExchangeRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  FlinksSecureExchangeCreateExchangeRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FlinksSecureExchangeCreateExchangeRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FlinksSecureExchangeCreateExchangeRequestBody' from JSON`,
  );
}
