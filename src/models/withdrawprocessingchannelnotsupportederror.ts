/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawProcessingChannelNotSupportedErrorLinks = {};

export type WithdrawProcessingChannelNotSupportedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawProcessingChannelNotSupportedErrorLinks | undefined;
};

export type WithdrawProcessingChannelNotSupportedErrorEmbedded = {
  errors?: Array<WithdrawProcessingChannelNotSupportedErrorError> | undefined;
};

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorLinks$inboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WithdrawProcessingChannelNotSupportedErrorLinks$Outbound = {};

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorLinks$outboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorLinks$Outbound,
    z.ZodTypeDef,
    WithdrawProcessingChannelNotSupportedErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawProcessingChannelNotSupportedErrorLinks$ {
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawProcessingChannelNotSupportedErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawProcessingChannelNotSupportedErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorLinks$Outbound` instead. */
  export type Outbound =
    WithdrawProcessingChannelNotSupportedErrorLinks$Outbound;
}

export function withdrawProcessingChannelNotSupportedErrorLinksToJSON(
  withdrawProcessingChannelNotSupportedErrorLinks:
    WithdrawProcessingChannelNotSupportedErrorLinks,
): string {
  return JSON.stringify(
    WithdrawProcessingChannelNotSupportedErrorLinks$outboundSchema.parse(
      withdrawProcessingChannelNotSupportedErrorLinks,
    ),
  );
}

export function withdrawProcessingChannelNotSupportedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawProcessingChannelNotSupportedErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawProcessingChannelNotSupportedErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawProcessingChannelNotSupportedErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorError$inboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      WithdrawProcessingChannelNotSupportedErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type WithdrawProcessingChannelNotSupportedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WithdrawProcessingChannelNotSupportedErrorLinks$Outbound | undefined;
};

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorError$outboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorError$Outbound,
    z.ZodTypeDef,
    WithdrawProcessingChannelNotSupportedErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      WithdrawProcessingChannelNotSupportedErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawProcessingChannelNotSupportedErrorError$ {
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawProcessingChannelNotSupportedErrorError$inboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawProcessingChannelNotSupportedErrorError$outboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorError$Outbound` instead. */
  export type Outbound =
    WithdrawProcessingChannelNotSupportedErrorError$Outbound;
}

export function withdrawProcessingChannelNotSupportedErrorErrorToJSON(
  withdrawProcessingChannelNotSupportedErrorError:
    WithdrawProcessingChannelNotSupportedErrorError,
): string {
  return JSON.stringify(
    WithdrawProcessingChannelNotSupportedErrorError$outboundSchema.parse(
      withdrawProcessingChannelNotSupportedErrorError,
    ),
  );
}

export function withdrawProcessingChannelNotSupportedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawProcessingChannelNotSupportedErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawProcessingChannelNotSupportedErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawProcessingChannelNotSupportedErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorEmbedded$inboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawProcessingChannelNotSupportedErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type WithdrawProcessingChannelNotSupportedErrorEmbedded$Outbound = {
  errors?:
    | Array<WithdrawProcessingChannelNotSupportedErrorError$Outbound>
    | undefined;
};

/** @internal */
export const WithdrawProcessingChannelNotSupportedErrorEmbedded$outboundSchema:
  z.ZodType<
    WithdrawProcessingChannelNotSupportedErrorEmbedded$Outbound,
    z.ZodTypeDef,
    WithdrawProcessingChannelNotSupportedErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawProcessingChannelNotSupportedErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawProcessingChannelNotSupportedErrorEmbedded$ {
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawProcessingChannelNotSupportedErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawProcessingChannelNotSupportedErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawProcessingChannelNotSupportedErrorEmbedded$Outbound` instead. */
  export type Outbound =
    WithdrawProcessingChannelNotSupportedErrorEmbedded$Outbound;
}

export function withdrawProcessingChannelNotSupportedErrorEmbeddedToJSON(
  withdrawProcessingChannelNotSupportedErrorEmbedded:
    WithdrawProcessingChannelNotSupportedErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawProcessingChannelNotSupportedErrorEmbedded$outboundSchema.parse(
      withdrawProcessingChannelNotSupportedErrorEmbedded,
    ),
  );
}

export function withdrawProcessingChannelNotSupportedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawProcessingChannelNotSupportedErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawProcessingChannelNotSupportedErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawProcessingChannelNotSupportedErrorEmbedded' from JSON`,
  );
}
