/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Empty object for Plaid Web sessions where request body is optional
 */
export type CreateReAuthExchangeSession2 = {};

export type CreateReAuthExchangeSessionRedirectUrl = {
  /**
   * Required for Visa and Plaid mobile sessions
   */
  href: string;
};

export type CreateReAuthExchangeSessionLinks = {
  redirectUrl: CreateReAuthExchangeSessionRedirectUrl;
};

export type CreateReAuthExchangeSession1 = {
  links: CreateReAuthExchangeSessionLinks;
};

export type CreateReAuthExchangeSessionUnion =
  | CreateReAuthExchangeSession1
  | CreateReAuthExchangeSession2;

/** @internal */
export const CreateReAuthExchangeSession2$inboundSchema: z.ZodType<
  CreateReAuthExchangeSession2,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateReAuthExchangeSession2$Outbound = {};

/** @internal */
export const CreateReAuthExchangeSession2$outboundSchema: z.ZodType<
  CreateReAuthExchangeSession2$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSession2
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSession2$ {
  /** @deprecated use `CreateReAuthExchangeSession2$inboundSchema` instead. */
  export const inboundSchema = CreateReAuthExchangeSession2$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSession2$outboundSchema` instead. */
  export const outboundSchema = CreateReAuthExchangeSession2$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSession2$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSession2$Outbound;
}

export function createReAuthExchangeSession2ToJSON(
  createReAuthExchangeSession2: CreateReAuthExchangeSession2,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSession2$outboundSchema.parse(
      createReAuthExchangeSession2,
    ),
  );
}

export function createReAuthExchangeSession2FromJSON(
  jsonString: string,
): SafeParseResult<CreateReAuthExchangeSession2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReAuthExchangeSession2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReAuthExchangeSession2' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSessionRedirectUrl$inboundSchema: z.ZodType<
  CreateReAuthExchangeSessionRedirectUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
});

/** @internal */
export type CreateReAuthExchangeSessionRedirectUrl$Outbound = {
  href: string;
};

/** @internal */
export const CreateReAuthExchangeSessionRedirectUrl$outboundSchema: z.ZodType<
  CreateReAuthExchangeSessionRedirectUrl$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSessionRedirectUrl
> = z.object({
  href: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionRedirectUrl$ {
  /** @deprecated use `CreateReAuthExchangeSessionRedirectUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreateReAuthExchangeSessionRedirectUrl$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionRedirectUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateReAuthExchangeSessionRedirectUrl$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionRedirectUrl$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSessionRedirectUrl$Outbound;
}

export function createReAuthExchangeSessionRedirectUrlToJSON(
  createReAuthExchangeSessionRedirectUrl:
    CreateReAuthExchangeSessionRedirectUrl,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionRedirectUrl$outboundSchema.parse(
      createReAuthExchangeSessionRedirectUrl,
    ),
  );
}

export function createReAuthExchangeSessionRedirectUrlFromJSON(
  jsonString: string,
): SafeParseResult<CreateReAuthExchangeSessionRedirectUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateReAuthExchangeSessionRedirectUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReAuthExchangeSessionRedirectUrl' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSessionLinks$inboundSchema: z.ZodType<
  CreateReAuthExchangeSessionLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  "redirect-url": z.lazy(() =>
    CreateReAuthExchangeSessionRedirectUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "redirect-url": "redirectUrl",
  });
});

/** @internal */
export type CreateReAuthExchangeSessionLinks$Outbound = {
  "redirect-url": CreateReAuthExchangeSessionRedirectUrl$Outbound;
};

/** @internal */
export const CreateReAuthExchangeSessionLinks$outboundSchema: z.ZodType<
  CreateReAuthExchangeSessionLinks$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSessionLinks
> = z.object({
  redirectUrl: z.lazy(() =>
    CreateReAuthExchangeSessionRedirectUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    redirectUrl: "redirect-url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionLinks$ {
  /** @deprecated use `CreateReAuthExchangeSessionLinks$inboundSchema` instead. */
  export const inboundSchema = CreateReAuthExchangeSessionLinks$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionLinks$outboundSchema` instead. */
  export const outboundSchema = CreateReAuthExchangeSessionLinks$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionLinks$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSessionLinks$Outbound;
}

export function createReAuthExchangeSessionLinksToJSON(
  createReAuthExchangeSessionLinks: CreateReAuthExchangeSessionLinks,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionLinks$outboundSchema.parse(
      createReAuthExchangeSessionLinks,
    ),
  );
}

export function createReAuthExchangeSessionLinksFromJSON(
  jsonString: string,
): SafeParseResult<CreateReAuthExchangeSessionLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReAuthExchangeSessionLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReAuthExchangeSessionLinks' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSession1$inboundSchema: z.ZodType<
  CreateReAuthExchangeSession1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateReAuthExchangeSessionLinks$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateReAuthExchangeSession1$Outbound = {
  _links: CreateReAuthExchangeSessionLinks$Outbound;
};

/** @internal */
export const CreateReAuthExchangeSession1$outboundSchema: z.ZodType<
  CreateReAuthExchangeSession1$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSession1
> = z.object({
  links: z.lazy(() => CreateReAuthExchangeSessionLinks$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSession1$ {
  /** @deprecated use `CreateReAuthExchangeSession1$inboundSchema` instead. */
  export const inboundSchema = CreateReAuthExchangeSession1$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSession1$outboundSchema` instead. */
  export const outboundSchema = CreateReAuthExchangeSession1$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSession1$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSession1$Outbound;
}

export function createReAuthExchangeSession1ToJSON(
  createReAuthExchangeSession1: CreateReAuthExchangeSession1,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSession1$outboundSchema.parse(
      createReAuthExchangeSession1,
    ),
  );
}

export function createReAuthExchangeSession1FromJSON(
  jsonString: string,
): SafeParseResult<CreateReAuthExchangeSession1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReAuthExchangeSession1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReAuthExchangeSession1' from JSON`,
  );
}

/** @internal */
export const CreateReAuthExchangeSessionUnion$inboundSchema: z.ZodType<
  CreateReAuthExchangeSessionUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateReAuthExchangeSession1$inboundSchema),
  z.lazy(() => CreateReAuthExchangeSession2$inboundSchema),
]);

/** @internal */
export type CreateReAuthExchangeSessionUnion$Outbound =
  | CreateReAuthExchangeSession1$Outbound
  | CreateReAuthExchangeSession2$Outbound;

/** @internal */
export const CreateReAuthExchangeSessionUnion$outboundSchema: z.ZodType<
  CreateReAuthExchangeSessionUnion$Outbound,
  z.ZodTypeDef,
  CreateReAuthExchangeSessionUnion
> = z.union([
  z.lazy(() => CreateReAuthExchangeSession1$outboundSchema),
  z.lazy(() => CreateReAuthExchangeSession2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReAuthExchangeSessionUnion$ {
  /** @deprecated use `CreateReAuthExchangeSessionUnion$inboundSchema` instead. */
  export const inboundSchema = CreateReAuthExchangeSessionUnion$inboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionUnion$outboundSchema` instead. */
  export const outboundSchema = CreateReAuthExchangeSessionUnion$outboundSchema;
  /** @deprecated use `CreateReAuthExchangeSessionUnion$Outbound` instead. */
  export type Outbound = CreateReAuthExchangeSessionUnion$Outbound;
}

export function createReAuthExchangeSessionUnionToJSON(
  createReAuthExchangeSessionUnion: CreateReAuthExchangeSessionUnion,
): string {
  return JSON.stringify(
    CreateReAuthExchangeSessionUnion$outboundSchema.parse(
      createReAuthExchangeSessionUnion,
    ),
  );
}

export function createReAuthExchangeSessionUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateReAuthExchangeSessionUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReAuthExchangeSessionUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReAuthExchangeSessionUnion' from JSON`,
  );
}
