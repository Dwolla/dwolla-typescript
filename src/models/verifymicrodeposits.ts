/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type Amount1 = {
  value: string;
  currency: string;
};

export type Amount2 = {
  value: string;
  currency: string;
};

/**
 * Request body for verifying micro-deposits
 */
export type VerifyMicroDeposits = {
  amount1: Amount1;
  amount2: Amount2;
};

/** @internal */
export const Amount1$inboundSchema: z.ZodType<Amount1, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string(),
    currency: z.string(),
  });

/** @internal */
export type Amount1$Outbound = {
  value: string;
  currency: string;
};

/** @internal */
export const Amount1$outboundSchema: z.ZodType<
  Amount1$Outbound,
  z.ZodTypeDef,
  Amount1
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount1$ {
  /** @deprecated use `Amount1$inboundSchema` instead. */
  export const inboundSchema = Amount1$inboundSchema;
  /** @deprecated use `Amount1$outboundSchema` instead. */
  export const outboundSchema = Amount1$outboundSchema;
  /** @deprecated use `Amount1$Outbound` instead. */
  export type Outbound = Amount1$Outbound;
}

export function amount1ToJSON(amount1: Amount1): string {
  return JSON.stringify(Amount1$outboundSchema.parse(amount1));
}

export function amount1FromJSON(
  jsonString: string,
): SafeParseResult<Amount1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount1' from JSON`,
  );
}

/** @internal */
export const Amount2$inboundSchema: z.ZodType<Amount2, z.ZodTypeDef, unknown> =
  z.object({
    value: z.string(),
    currency: z.string(),
  });

/** @internal */
export type Amount2$Outbound = {
  value: string;
  currency: string;
};

/** @internal */
export const Amount2$outboundSchema: z.ZodType<
  Amount2$Outbound,
  z.ZodTypeDef,
  Amount2
> = z.object({
  value: z.string(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Amount2$ {
  /** @deprecated use `Amount2$inboundSchema` instead. */
  export const inboundSchema = Amount2$inboundSchema;
  /** @deprecated use `Amount2$outboundSchema` instead. */
  export const outboundSchema = Amount2$outboundSchema;
  /** @deprecated use `Amount2$Outbound` instead. */
  export type Outbound = Amount2$Outbound;
}

export function amount2ToJSON(amount2: Amount2): string {
  return JSON.stringify(Amount2$outboundSchema.parse(amount2));
}

export function amount2FromJSON(
  jsonString: string,
): SafeParseResult<Amount2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Amount2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Amount2' from JSON`,
  );
}

/** @internal */
export const VerifyMicroDeposits$inboundSchema: z.ZodType<
  VerifyMicroDeposits,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount1: z.lazy(() => Amount1$inboundSchema),
  amount2: z.lazy(() => Amount2$inboundSchema),
});

/** @internal */
export type VerifyMicroDeposits$Outbound = {
  amount1: Amount1$Outbound;
  amount2: Amount2$Outbound;
};

/** @internal */
export const VerifyMicroDeposits$outboundSchema: z.ZodType<
  VerifyMicroDeposits$Outbound,
  z.ZodTypeDef,
  VerifyMicroDeposits
> = z.object({
  amount1: z.lazy(() => Amount1$outboundSchema),
  amount2: z.lazy(() => Amount2$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDeposits$ {
  /** @deprecated use `VerifyMicroDeposits$inboundSchema` instead. */
  export const inboundSchema = VerifyMicroDeposits$inboundSchema;
  /** @deprecated use `VerifyMicroDeposits$outboundSchema` instead. */
  export const outboundSchema = VerifyMicroDeposits$outboundSchema;
  /** @deprecated use `VerifyMicroDeposits$Outbound` instead. */
  export type Outbound = VerifyMicroDeposits$Outbound;
}

export function verifyMicroDepositsToJSON(
  verifyMicroDeposits: VerifyMicroDeposits,
): string {
  return JSON.stringify(
    VerifyMicroDeposits$outboundSchema.parse(verifyMicroDeposits),
  );
}

export function verifyMicroDepositsFromJSON(
  jsonString: string,
): SafeParseResult<VerifyMicroDeposits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyMicroDeposits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyMicroDeposits' from JSON`,
  );
}
