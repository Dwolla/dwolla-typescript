/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Type of bank account
 */
export const CreateCustomerBankFundingSourceWithPlaidBankAccountType = {
  Checking: "checking",
  Savings: "savings",
} as const;
/**
 * Type of bank account
 */
export type CreateCustomerBankFundingSourceWithPlaidBankAccountType =
  ClosedEnum<typeof CreateCustomerBankFundingSourceWithPlaidBankAccountType>;

export const CreateCustomerBankFundingSourceWithPlaidChannel = {
  Wire: "wire",
} as const;
export type CreateCustomerBankFundingSourceWithPlaidChannel = ClosedEnum<
  typeof CreateCustomerBankFundingSourceWithPlaidChannel
>;

export type CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization = {
  href: string;
};

export type CreateCustomerBankFundingSourceWithPlaidLinks = {
  onDemandAuthorization?:
    | CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization
    | undefined;
};

/**
 * Schema for creating a bank funding source using a Plaid processor token.
 */
export type CreateCustomerBankFundingSourceWithPlaid = {
  /**
   * A processor token obtained from Plaid for adding and verifying a bank
   */
  plaidToken: string;
  /**
   * Type of bank account
   */
  bankAccountType: CreateCustomerBankFundingSourceWithPlaidBankAccountType;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
  /**
   * An array containing a list of processing channels. ACH is the default processing channel for bank transfers.
   */
  channels?: Array<CreateCustomerBankFundingSourceWithPlaidChannel> | undefined;
  links?: CreateCustomerBankFundingSourceWithPlaidLinks | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidBankAccountType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithPlaidBankAccountType
  > = z.nativeEnum(CreateCustomerBankFundingSourceWithPlaidBankAccountType);

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidBankAccountType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateCustomerBankFundingSourceWithPlaidBankAccountType
  > = CreateCustomerBankFundingSourceWithPlaidBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithPlaidBankAccountType$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithPlaidBankAccountType$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithPlaidBankAccountType$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidChannel$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceWithPlaidChannel> = z
    .nativeEnum(CreateCustomerBankFundingSourceWithPlaidChannel);

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidChannel$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerBankFundingSourceWithPlaidChannel> =
    CreateCustomerBankFundingSourceWithPlaidChannel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithPlaidChannel$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidChannel$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithPlaidChannel$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidChannel$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithPlaidChannel$outboundSchema;
}

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$Outbound =
  {
    href: string;
  };

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$Outbound` instead. */
  export type Outbound =
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$Outbound;
}

export function createCustomerBankFundingSourceWithPlaidOnDemandAuthorizationToJSON(
  createCustomerBankFundingSourceWithPlaidOnDemandAuthorization:
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$outboundSchema
      .parse(createCustomerBankFundingSourceWithPlaidOnDemandAuthorization),
  );
}

export function createCustomerBankFundingSourceWithPlaidOnDemandAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidLinks$inboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithPlaidLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "on-demand-authorization": z.lazy(() =>
      CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "on-demand-authorization": "onDemandAuthorization",
    });
  });

/** @internal */
export type CreateCustomerBankFundingSourceWithPlaidLinks$Outbound = {
  "on-demand-authorization"?:
    | CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaidLinks$outboundSchema:
  z.ZodType<
    CreateCustomerBankFundingSourceWithPlaidLinks$Outbound,
    z.ZodTypeDef,
    CreateCustomerBankFundingSourceWithPlaidLinks
  > = z.object({
    onDemandAuthorization: z.lazy(() =>
      CreateCustomerBankFundingSourceWithPlaidOnDemandAuthorization$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      onDemandAuthorization: "on-demand-authorization",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithPlaidLinks$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithPlaidLinks$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithPlaidLinks$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaidLinks$Outbound` instead. */
  export type Outbound = CreateCustomerBankFundingSourceWithPlaidLinks$Outbound;
}

export function createCustomerBankFundingSourceWithPlaidLinksToJSON(
  createCustomerBankFundingSourceWithPlaidLinks:
    CreateCustomerBankFundingSourceWithPlaidLinks,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithPlaidLinks$outboundSchema.parse(
      createCustomerBankFundingSourceWithPlaidLinks,
    ),
  );
}

export function createCustomerBankFundingSourceWithPlaidLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithPlaidLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithPlaidLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerBankFundingSourceWithPlaidLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaid$inboundSchema: z.ZodType<
  CreateCustomerBankFundingSourceWithPlaid,
  z.ZodTypeDef,
  unknown
> = z.object({
  plaidToken: z.string(),
  bankAccountType:
    CreateCustomerBankFundingSourceWithPlaidBankAccountType$inboundSchema,
  name: z.string(),
  channels: z.array(
    CreateCustomerBankFundingSourceWithPlaidChannel$inboundSchema,
  ).optional(),
  _links: z.lazy(() =>
    CreateCustomerBankFundingSourceWithPlaidLinks$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerBankFundingSourceWithPlaid$Outbound = {
  plaidToken: string;
  bankAccountType: string;
  name: string;
  channels?: Array<string> | undefined;
  _links?: CreateCustomerBankFundingSourceWithPlaidLinks$Outbound | undefined;
};

/** @internal */
export const CreateCustomerBankFundingSourceWithPlaid$outboundSchema: z.ZodType<
  CreateCustomerBankFundingSourceWithPlaid$Outbound,
  z.ZodTypeDef,
  CreateCustomerBankFundingSourceWithPlaid
> = z.object({
  plaidToken: z.string(),
  bankAccountType:
    CreateCustomerBankFundingSourceWithPlaidBankAccountType$outboundSchema,
  name: z.string(),
  channels: z.array(
    CreateCustomerBankFundingSourceWithPlaidChannel$outboundSchema,
  ).optional(),
  links: z.lazy(() =>
    CreateCustomerBankFundingSourceWithPlaidLinks$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerBankFundingSourceWithPlaid$ {
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaid$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerBankFundingSourceWithPlaid$inboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaid$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerBankFundingSourceWithPlaid$outboundSchema;
  /** @deprecated use `CreateCustomerBankFundingSourceWithPlaid$Outbound` instead. */
  export type Outbound = CreateCustomerBankFundingSourceWithPlaid$Outbound;
}

export function createCustomerBankFundingSourceWithPlaidToJSON(
  createCustomerBankFundingSourceWithPlaid:
    CreateCustomerBankFundingSourceWithPlaid,
): string {
  return JSON.stringify(
    CreateCustomerBankFundingSourceWithPlaid$outboundSchema.parse(
      createCustomerBankFundingSourceWithPlaid,
    ),
  );
}

export function createCustomerBankFundingSourceWithPlaidFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerBankFundingSourceWithPlaid,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerBankFundingSourceWithPlaid$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerBankFundingSourceWithPlaid' from JSON`,
  );
}
