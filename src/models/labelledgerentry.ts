/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type LabelLedgerEntryAmount = {
  value?: string | undefined;
  currency?: string | undefined;
};

export type LabelLedgerEntry = {
  links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  amount?: LabelLedgerEntryAmount | undefined;
  created?: Date | undefined;
};

/** @internal */
export const LabelLedgerEntryAmount$inboundSchema: z.ZodType<
  LabelLedgerEntryAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/** @internal */
export type LabelLedgerEntryAmount$Outbound = {
  value?: string | undefined;
  currency?: string | undefined;
};

/** @internal */
export const LabelLedgerEntryAmount$outboundSchema: z.ZodType<
  LabelLedgerEntryAmount$Outbound,
  z.ZodTypeDef,
  LabelLedgerEntryAmount
> = z.object({
  value: z.string().optional(),
  currency: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LabelLedgerEntryAmount$ {
  /** @deprecated use `LabelLedgerEntryAmount$inboundSchema` instead. */
  export const inboundSchema = LabelLedgerEntryAmount$inboundSchema;
  /** @deprecated use `LabelLedgerEntryAmount$outboundSchema` instead. */
  export const outboundSchema = LabelLedgerEntryAmount$outboundSchema;
  /** @deprecated use `LabelLedgerEntryAmount$Outbound` instead. */
  export type Outbound = LabelLedgerEntryAmount$Outbound;
}

export function labelLedgerEntryAmountToJSON(
  labelLedgerEntryAmount: LabelLedgerEntryAmount,
): string {
  return JSON.stringify(
    LabelLedgerEntryAmount$outboundSchema.parse(labelLedgerEntryAmount),
  );
}

export function labelLedgerEntryAmountFromJSON(
  jsonString: string,
): SafeParseResult<LabelLedgerEntryAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LabelLedgerEntryAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LabelLedgerEntryAmount' from JSON`,
  );
}

/** @internal */
export const LabelLedgerEntry$inboundSchema: z.ZodType<
  LabelLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  id: z.string().optional(),
  amount: z.lazy(() => LabelLedgerEntryAmount$inboundSchema).optional(),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type LabelLedgerEntry$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  id?: string | undefined;
  amount?: LabelLedgerEntryAmount$Outbound | undefined;
  created?: string | undefined;
};

/** @internal */
export const LabelLedgerEntry$outboundSchema: z.ZodType<
  LabelLedgerEntry$Outbound,
  z.ZodTypeDef,
  LabelLedgerEntry
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  id: z.string().optional(),
  amount: z.lazy(() => LabelLedgerEntryAmount$outboundSchema).optional(),
  created: z.date().transform(v => v.toISOString()).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LabelLedgerEntry$ {
  /** @deprecated use `LabelLedgerEntry$inboundSchema` instead. */
  export const inboundSchema = LabelLedgerEntry$inboundSchema;
  /** @deprecated use `LabelLedgerEntry$outboundSchema` instead. */
  export const outboundSchema = LabelLedgerEntry$outboundSchema;
  /** @deprecated use `LabelLedgerEntry$Outbound` instead. */
  export type Outbound = LabelLedgerEntry$Outbound;
}

export function labelLedgerEntryToJSON(
  labelLedgerEntry: LabelLedgerEntry,
): string {
  return JSON.stringify(
    LabelLedgerEntry$outboundSchema.parse(labelLedgerEntry),
  );
}

export function labelLedgerEntryFromJSON(
  jsonString: string,
): SafeParseResult<LabelLedgerEntry, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LabelLedgerEntry$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LabelLedgerEntry' from JSON`,
  );
}
