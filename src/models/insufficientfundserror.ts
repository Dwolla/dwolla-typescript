/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InsufficientFundsErrorLinks = {};

export type InsufficientFundsErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InsufficientFundsErrorLinks | undefined;
};

export type InsufficientFundsErrorEmbedded = {
  errors?: Array<InsufficientFundsErrorError> | undefined;
};

export type InsufficientFundsError = {
  code: string;
  message: string;
  embedded?: InsufficientFundsErrorEmbedded | undefined;
};

/** @internal */
export const InsufficientFundsErrorLinks$inboundSchema: z.ZodType<
  InsufficientFundsErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InsufficientFundsErrorLinks$Outbound = {};

/** @internal */
export const InsufficientFundsErrorLinks$outboundSchema: z.ZodType<
  InsufficientFundsErrorLinks$Outbound,
  z.ZodTypeDef,
  InsufficientFundsErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsufficientFundsErrorLinks$ {
  /** @deprecated use `InsufficientFundsErrorLinks$inboundSchema` instead. */
  export const inboundSchema = InsufficientFundsErrorLinks$inboundSchema;
  /** @deprecated use `InsufficientFundsErrorLinks$outboundSchema` instead. */
  export const outboundSchema = InsufficientFundsErrorLinks$outboundSchema;
  /** @deprecated use `InsufficientFundsErrorLinks$Outbound` instead. */
  export type Outbound = InsufficientFundsErrorLinks$Outbound;
}

export function insufficientFundsErrorLinksToJSON(
  insufficientFundsErrorLinks: InsufficientFundsErrorLinks,
): string {
  return JSON.stringify(
    InsufficientFundsErrorLinks$outboundSchema.parse(
      insufficientFundsErrorLinks,
    ),
  );
}

export function insufficientFundsErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InsufficientFundsErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsufficientFundsErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsufficientFundsErrorLinks' from JSON`,
  );
}

/** @internal */
export const InsufficientFundsErrorError$inboundSchema: z.ZodType<
  InsufficientFundsErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InsufficientFundsErrorLinks$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InsufficientFundsErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InsufficientFundsErrorLinks$Outbound | undefined;
};

/** @internal */
export const InsufficientFundsErrorError$outboundSchema: z.ZodType<
  InsufficientFundsErrorError$Outbound,
  z.ZodTypeDef,
  InsufficientFundsErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InsufficientFundsErrorLinks$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsufficientFundsErrorError$ {
  /** @deprecated use `InsufficientFundsErrorError$inboundSchema` instead. */
  export const inboundSchema = InsufficientFundsErrorError$inboundSchema;
  /** @deprecated use `InsufficientFundsErrorError$outboundSchema` instead. */
  export const outboundSchema = InsufficientFundsErrorError$outboundSchema;
  /** @deprecated use `InsufficientFundsErrorError$Outbound` instead. */
  export type Outbound = InsufficientFundsErrorError$Outbound;
}

export function insufficientFundsErrorErrorToJSON(
  insufficientFundsErrorError: InsufficientFundsErrorError,
): string {
  return JSON.stringify(
    InsufficientFundsErrorError$outboundSchema.parse(
      insufficientFundsErrorError,
    ),
  );
}

export function insufficientFundsErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InsufficientFundsErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsufficientFundsErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsufficientFundsErrorError' from JSON`,
  );
}

/** @internal */
export const InsufficientFundsErrorEmbedded$inboundSchema: z.ZodType<
  InsufficientFundsErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InsufficientFundsErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type InsufficientFundsErrorEmbedded$Outbound = {
  errors?: Array<InsufficientFundsErrorError$Outbound> | undefined;
};

/** @internal */
export const InsufficientFundsErrorEmbedded$outboundSchema: z.ZodType<
  InsufficientFundsErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InsufficientFundsErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => InsufficientFundsErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsufficientFundsErrorEmbedded$ {
  /** @deprecated use `InsufficientFundsErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = InsufficientFundsErrorEmbedded$inboundSchema;
  /** @deprecated use `InsufficientFundsErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema = InsufficientFundsErrorEmbedded$outboundSchema;
  /** @deprecated use `InsufficientFundsErrorEmbedded$Outbound` instead. */
  export type Outbound = InsufficientFundsErrorEmbedded$Outbound;
}

export function insufficientFundsErrorEmbeddedToJSON(
  insufficientFundsErrorEmbedded: InsufficientFundsErrorEmbedded,
): string {
  return JSON.stringify(
    InsufficientFundsErrorEmbedded$outboundSchema.parse(
      insufficientFundsErrorEmbedded,
    ),
  );
}

export function insufficientFundsErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<InsufficientFundsErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsufficientFundsErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsufficientFundsErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const InsufficientFundsError$inboundSchema: z.ZodType<
  InsufficientFundsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => InsufficientFundsErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type InsufficientFundsError$Outbound = {
  code: string;
  message: string;
  _embedded?: InsufficientFundsErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const InsufficientFundsError$outboundSchema: z.ZodType<
  InsufficientFundsError$Outbound,
  z.ZodTypeDef,
  InsufficientFundsError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => InsufficientFundsErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsufficientFundsError$ {
  /** @deprecated use `InsufficientFundsError$inboundSchema` instead. */
  export const inboundSchema = InsufficientFundsError$inboundSchema;
  /** @deprecated use `InsufficientFundsError$outboundSchema` instead. */
  export const outboundSchema = InsufficientFundsError$outboundSchema;
  /** @deprecated use `InsufficientFundsError$Outbound` instead. */
  export type Outbound = InsufficientFundsError$Outbound;
}

export function insufficientFundsErrorToJSON(
  insufficientFundsError: InsufficientFundsError,
): string {
  return JSON.stringify(
    InsufficientFundsError$outboundSchema.parse(insufficientFundsError),
  );
}

export function insufficientFundsErrorFromJSON(
  jsonString: string,
): SafeParseResult<InsufficientFundsError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InsufficientFundsError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InsufficientFundsError' from JSON`,
  );
}
