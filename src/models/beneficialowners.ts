/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BeneficialOwner,
  BeneficialOwner$inboundSchema,
  BeneficialOwner$Outbound,
  BeneficialOwner$outboundSchema,
} from "./beneficialowner.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type BeneficialOwnersEmbedded = {
  beneficialOwners?: Array<BeneficialOwner> | undefined;
};

/**
 * Request model for list beneficial owners
 */
export type BeneficialOwners = {
  links?: { [k: string]: HalLink } | undefined;
  embedded?: BeneficialOwnersEmbedded | undefined;
};

/** @internal */
export const BeneficialOwnersEmbedded$inboundSchema: z.ZodType<
  BeneficialOwnersEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  "beneficial-owners": z.array(BeneficialOwner$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "beneficial-owners": "beneficialOwners",
  });
});

/** @internal */
export type BeneficialOwnersEmbedded$Outbound = {
  "beneficial-owners"?: Array<BeneficialOwner$Outbound> | undefined;
};

/** @internal */
export const BeneficialOwnersEmbedded$outboundSchema: z.ZodType<
  BeneficialOwnersEmbedded$Outbound,
  z.ZodTypeDef,
  BeneficialOwnersEmbedded
> = z.object({
  beneficialOwners: z.array(BeneficialOwner$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    beneficialOwners: "beneficial-owners",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficialOwnersEmbedded$ {
  /** @deprecated use `BeneficialOwnersEmbedded$inboundSchema` instead. */
  export const inboundSchema = BeneficialOwnersEmbedded$inboundSchema;
  /** @deprecated use `BeneficialOwnersEmbedded$outboundSchema` instead. */
  export const outboundSchema = BeneficialOwnersEmbedded$outboundSchema;
  /** @deprecated use `BeneficialOwnersEmbedded$Outbound` instead. */
  export type Outbound = BeneficialOwnersEmbedded$Outbound;
}

export function beneficialOwnersEmbeddedToJSON(
  beneficialOwnersEmbedded: BeneficialOwnersEmbedded,
): string {
  return JSON.stringify(
    BeneficialOwnersEmbedded$outboundSchema.parse(beneficialOwnersEmbedded),
  );
}

export function beneficialOwnersEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<BeneficialOwnersEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BeneficialOwnersEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BeneficialOwnersEmbedded' from JSON`,
  );
}

/** @internal */
export const BeneficialOwners$inboundSchema: z.ZodType<
  BeneficialOwners,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$inboundSchema).optional(),
  _embedded: z.lazy(() => BeneficialOwnersEmbedded$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
    "_embedded": "embedded",
  });
});

/** @internal */
export type BeneficialOwners$Outbound = {
  _links?: { [k: string]: HalLink$Outbound } | undefined;
  _embedded?: BeneficialOwnersEmbedded$Outbound | undefined;
};

/** @internal */
export const BeneficialOwners$outboundSchema: z.ZodType<
  BeneficialOwners$Outbound,
  z.ZodTypeDef,
  BeneficialOwners
> = z.object({
  links: z.record(HalLink$outboundSchema).optional(),
  embedded: z.lazy(() => BeneficialOwnersEmbedded$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficialOwners$ {
  /** @deprecated use `BeneficialOwners$inboundSchema` instead. */
  export const inboundSchema = BeneficialOwners$inboundSchema;
  /** @deprecated use `BeneficialOwners$outboundSchema` instead. */
  export const outboundSchema = BeneficialOwners$outboundSchema;
  /** @deprecated use `BeneficialOwners$Outbound` instead. */
  export type Outbound = BeneficialOwners$Outbound;
}

export function beneficialOwnersToJSON(
  beneficialOwners: BeneficialOwners,
): string {
  return JSON.stringify(
    BeneficialOwners$outboundSchema.parse(beneficialOwners),
  );
}

export function beneficialOwnersFromJSON(
  jsonString: string,
): SafeParseResult<BeneficialOwners, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BeneficialOwners$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BeneficialOwners' from JSON`,
  );
}
