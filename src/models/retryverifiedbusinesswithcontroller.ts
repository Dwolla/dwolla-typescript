/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RetryVerifiedBusinessWithControllerAddress = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

export type RetryVerifiedBusinessWithControllerController = {
  firstName: string;
  lastName: string;
  title: string;
  ssn: string;
  dateOfBirth: string;
  address: RetryVerifiedBusinessWithControllerAddress;
};

/**
 * Retry Verification for Verified Business Customer where Business Details as well as Controller Details need to be retried
 */
export type RetryVerifiedBusinessWithController = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: RetryVerifiedBusinessWithControllerController;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusinessWithControllerAddress$inboundSchema:
  z.ZodType<RetryVerifiedBusinessWithControllerAddress, z.ZodTypeDef, unknown> =
    z.object({
      address1: z.string(),
      address2: z.string().optional(),
      city: z.string(),
      stateProvinceRegion: z.string(),
      postalCode: z.string(),
      country: z.string(),
    });

/** @internal */
export type RetryVerifiedBusinessWithControllerAddress$Outbound = {
  address1: string;
  address2?: string | undefined;
  city: string;
  stateProvinceRegion: string;
  postalCode: string;
  country: string;
};

/** @internal */
export const RetryVerifiedBusinessWithControllerAddress$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithControllerAddress$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithControllerAddress
  > = z.object({
    address1: z.string(),
    address2: z.string().optional(),
    city: z.string(),
    stateProvinceRegion: z.string(),
    postalCode: z.string(),
    country: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithControllerAddress$ {
  /** @deprecated use `RetryVerifiedBusinessWithControllerAddress$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithControllerAddress$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithControllerAddress$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithControllerAddress$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithControllerAddress$Outbound` instead. */
  export type Outbound = RetryVerifiedBusinessWithControllerAddress$Outbound;
}

export function retryVerifiedBusinessWithControllerAddressToJSON(
  retryVerifiedBusinessWithControllerAddress:
    RetryVerifiedBusinessWithControllerAddress,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithControllerAddress$outboundSchema.parse(
      retryVerifiedBusinessWithControllerAddress,
    ),
  );
}

export function retryVerifiedBusinessWithControllerAddressFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithControllerAddress,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithControllerAddress$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RetryVerifiedBusinessWithControllerAddress' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessWithControllerController$inboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithControllerController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    ssn: z.string(),
    dateOfBirth: z.string(),
    address: z.lazy(() =>
      RetryVerifiedBusinessWithControllerAddress$inboundSchema
    ),
  });

/** @internal */
export type RetryVerifiedBusinessWithControllerController$Outbound = {
  firstName: string;
  lastName: string;
  title: string;
  ssn: string;
  dateOfBirth: string;
  address: RetryVerifiedBusinessWithControllerAddress$Outbound;
};

/** @internal */
export const RetryVerifiedBusinessWithControllerController$outboundSchema:
  z.ZodType<
    RetryVerifiedBusinessWithControllerController$Outbound,
    z.ZodTypeDef,
    RetryVerifiedBusinessWithControllerController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    ssn: z.string(),
    dateOfBirth: z.string(),
    address: z.lazy(() =>
      RetryVerifiedBusinessWithControllerAddress$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithControllerController$ {
  /** @deprecated use `RetryVerifiedBusinessWithControllerController$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithControllerController$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithControllerController$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithControllerController$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithControllerController$Outbound` instead. */
  export type Outbound = RetryVerifiedBusinessWithControllerController$Outbound;
}

export function retryVerifiedBusinessWithControllerControllerToJSON(
  retryVerifiedBusinessWithControllerController:
    RetryVerifiedBusinessWithControllerController,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithControllerController$outboundSchema.parse(
      retryVerifiedBusinessWithControllerController,
    ),
  );
}

export function retryVerifiedBusinessWithControllerControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  RetryVerifiedBusinessWithControllerController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithControllerController$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RetryVerifiedBusinessWithControllerController' from JSON`,
  );
}

/** @internal */
export const RetryVerifiedBusinessWithController$inboundSchema: z.ZodType<
  RetryVerifiedBusinessWithController,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() =>
    RetryVerifiedBusinessWithControllerController$inboundSchema
  ),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/** @internal */
export type RetryVerifiedBusinessWithController$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  controller: RetryVerifiedBusinessWithControllerController$Outbound;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const RetryVerifiedBusinessWithController$outboundSchema: z.ZodType<
  RetryVerifiedBusinessWithController$Outbound,
  z.ZodTypeDef,
  RetryVerifiedBusinessWithController
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  controller: z.lazy(() =>
    RetryVerifiedBusinessWithControllerController$outboundSchema
  ),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryVerifiedBusinessWithController$ {
  /** @deprecated use `RetryVerifiedBusinessWithController$inboundSchema` instead. */
  export const inboundSchema =
    RetryVerifiedBusinessWithController$inboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithController$outboundSchema` instead. */
  export const outboundSchema =
    RetryVerifiedBusinessWithController$outboundSchema;
  /** @deprecated use `RetryVerifiedBusinessWithController$Outbound` instead. */
  export type Outbound = RetryVerifiedBusinessWithController$Outbound;
}

export function retryVerifiedBusinessWithControllerToJSON(
  retryVerifiedBusinessWithController: RetryVerifiedBusinessWithController,
): string {
  return JSON.stringify(
    RetryVerifiedBusinessWithController$outboundSchema.parse(
      retryVerifiedBusinessWithController,
    ),
  );
}

export function retryVerifiedBusinessWithControllerFromJSON(
  jsonString: string,
): SafeParseResult<RetryVerifiedBusinessWithController, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      RetryVerifiedBusinessWithController$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryVerifiedBusinessWithController' from JSON`,
  );
}
