/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks = {};

export type WithdrawInvalidWireOriginatorToBeneficiaryErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks | undefined;
};

export type WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded = {
  errors?:
    | Array<WithdrawInvalidWireOriginatorToBeneficiaryErrorError>
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$Outbound = {};

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$ {
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$Outbound;
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorLinksToJSON(
  withdrawInvalidWireOriginatorToBeneficiaryErrorLinks:
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks,
): string {
  return JSON.stringify(
    WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$outboundSchema.parse(
      withdrawInvalidWireOriginatorToBeneficiaryErrorLinks,
    ),
  );
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorError$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type WithdrawInvalidWireOriginatorToBeneficiaryErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorError$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      WithdrawInvalidWireOriginatorToBeneficiaryErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireOriginatorToBeneficiaryErrorError$ {
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorError$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError$Outbound;
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorErrorToJSON(
  withdrawInvalidWireOriginatorToBeneficiaryErrorError:
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError,
): string {
  return JSON.stringify(
    WithdrawInvalidWireOriginatorToBeneficiaryErrorError$outboundSchema.parse(
      withdrawInvalidWireOriginatorToBeneficiaryErrorError,
    ),
  );
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireOriginatorToBeneficiaryErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireOriginatorToBeneficiaryErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawInvalidWireOriginatorToBeneficiaryErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$inboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireOriginatorToBeneficiaryErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$Outbound = {
  errors?:
    | Array<WithdrawInvalidWireOriginatorToBeneficiaryErrorError$Outbound>
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawInvalidWireOriginatorToBeneficiaryErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$ {
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$Outbound` instead. */
  export type Outbound =
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$Outbound;
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorEmbeddedToJSON(
  withdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded:
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$outboundSchema
      .parse(withdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded),
  );
}

export function withdrawInvalidWireOriginatorToBeneficiaryErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'WithdrawInvalidWireOriginatorToBeneficiaryErrorEmbedded' from JSON`,
  );
}
