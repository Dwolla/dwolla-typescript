/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateCustomerExchangeSessionExchangePartner2 = {
  href: string;
};

export type CreateCustomerExchangeSessionLinks2 = {
  exchangePartner: CreateCustomerExchangeSessionExchangePartner2;
};

/**
 * For MX and Plaid web sessions where redirect-url is not required
 */
export type CreateCustomerExchangeSession2 = {
  links: CreateCustomerExchangeSessionLinks2;
};

export type CreateCustomerExchangeSessionExchangePartner1 = {
  href: string;
};

export type CreateCustomerExchangeSessionRedirectUrl = {
  /**
   * Required for Visa and Plaid mobile sessions
   */
  href: string;
};

export type CreateCustomerExchangeSessionLinks1 = {
  exchangePartner: CreateCustomerExchangeSessionExchangePartner1;
  redirectUrl: CreateCustomerExchangeSessionRedirectUrl;
};

export type CreateCustomerExchangeSession1 = {
  links: CreateCustomerExchangeSessionLinks1;
};

export type CreateCustomerExchangeSessionUnion =
  | CreateCustomerExchangeSession1
  | CreateCustomerExchangeSession2;

/** @internal */
export const CreateCustomerExchangeSessionExchangePartner2$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionExchangePartner2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeSessionExchangePartner2$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerExchangeSessionExchangePartner2$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionExchangePartner2$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionExchangePartner2
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionExchangePartner2$ {
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionExchangePartner2$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionExchangePartner2$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner2$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionExchangePartner2$Outbound;
}

export function createCustomerExchangeSessionExchangePartner2ToJSON(
  createCustomerExchangeSessionExchangePartner2:
    CreateCustomerExchangeSessionExchangePartner2,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionExchangePartner2$outboundSchema.parse(
      createCustomerExchangeSessionExchangePartner2,
    ),
  );
}

export function createCustomerExchangeSessionExchangePartner2FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionExchangePartner2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionExchangePartner2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionExchangePartner2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionLinks2$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionLinks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  "exchange-partner": z.lazy(() =>
    CreateCustomerExchangeSessionExchangePartner2$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "exchange-partner": "exchangePartner",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionLinks2$Outbound = {
  "exchange-partner": CreateCustomerExchangeSessionExchangePartner2$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSessionLinks2$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionLinks2$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionLinks2
> = z.object({
  exchangePartner: z.lazy(() =>
    CreateCustomerExchangeSessionExchangePartner2$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    exchangePartner: "exchange-partner",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionLinks2$ {
  /** @deprecated use `CreateCustomerExchangeSessionLinks2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionLinks2$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionLinks2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionLinks2$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionLinks2$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionLinks2$Outbound;
}

export function createCustomerExchangeSessionLinks2ToJSON(
  createCustomerExchangeSessionLinks2: CreateCustomerExchangeSessionLinks2,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionLinks2$outboundSchema.parse(
      createCustomerExchangeSessionLinks2,
    ),
  );
}

export function createCustomerExchangeSessionLinks2FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionLinks2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionLinks2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionLinks2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSession2$inboundSchema: z.ZodType<
  CreateCustomerExchangeSession2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerExchangeSessionLinks2$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerExchangeSession2$Outbound = {
  _links: CreateCustomerExchangeSessionLinks2$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSession2$outboundSchema: z.ZodType<
  CreateCustomerExchangeSession2$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSession2
> = z.object({
  links: z.lazy(() => CreateCustomerExchangeSessionLinks2$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSession2$ {
  /** @deprecated use `CreateCustomerExchangeSession2$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeSession2$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSession2$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerExchangeSession2$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSession2$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSession2$Outbound;
}

export function createCustomerExchangeSession2ToJSON(
  createCustomerExchangeSession2: CreateCustomerExchangeSession2,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSession2$outboundSchema.parse(
      createCustomerExchangeSession2,
    ),
  );
}

export function createCustomerExchangeSession2FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSession2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerExchangeSession2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSession2' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionExchangePartner1$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionExchangePartner1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeSessionExchangePartner1$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerExchangeSessionExchangePartner1$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionExchangePartner1$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionExchangePartner1
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionExchangePartner1$ {
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionExchangePartner1$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionExchangePartner1$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionExchangePartner1$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionExchangePartner1$Outbound;
}

export function createCustomerExchangeSessionExchangePartner1ToJSON(
  createCustomerExchangeSessionExchangePartner1:
    CreateCustomerExchangeSessionExchangePartner1,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionExchangePartner1$outboundSchema.parse(
      createCustomerExchangeSessionExchangePartner1,
    ),
  );
}

export function createCustomerExchangeSessionExchangePartner1FromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionExchangePartner1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionExchangePartner1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionExchangePartner1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionRedirectUrl$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRedirectUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
});

/** @internal */
export type CreateCustomerExchangeSessionRedirectUrl$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerExchangeSessionRedirectUrl$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionRedirectUrl$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionRedirectUrl
> = z.object({
  href: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionRedirectUrl$ {
  /** @deprecated use `CreateCustomerExchangeSessionRedirectUrl$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionRedirectUrl$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRedirectUrl$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionRedirectUrl$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionRedirectUrl$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionRedirectUrl$Outbound;
}

export function createCustomerExchangeSessionRedirectUrlToJSON(
  createCustomerExchangeSessionRedirectUrl:
    CreateCustomerExchangeSessionRedirectUrl,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionRedirectUrl$outboundSchema.parse(
      createCustomerExchangeSessionRedirectUrl,
    ),
  );
}

export function createCustomerExchangeSessionRedirectUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionRedirectUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionRedirectUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionRedirectUrl' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionLinks1$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionLinks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  "exchange-partner": z.lazy(() =>
    CreateCustomerExchangeSessionExchangePartner1$inboundSchema
  ),
  "redirect-url": z.lazy(() =>
    CreateCustomerExchangeSessionRedirectUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "exchange-partner": "exchangePartner",
    "redirect-url": "redirectUrl",
  });
});

/** @internal */
export type CreateCustomerExchangeSessionLinks1$Outbound = {
  "exchange-partner": CreateCustomerExchangeSessionExchangePartner1$Outbound;
  "redirect-url": CreateCustomerExchangeSessionRedirectUrl$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSessionLinks1$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionLinks1$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionLinks1
> = z.object({
  exchangePartner: z.lazy(() =>
    CreateCustomerExchangeSessionExchangePartner1$outboundSchema
  ),
  redirectUrl: z.lazy(() =>
    CreateCustomerExchangeSessionRedirectUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    exchangePartner: "exchange-partner",
    redirectUrl: "redirect-url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionLinks1$ {
  /** @deprecated use `CreateCustomerExchangeSessionLinks1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionLinks1$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionLinks1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionLinks1$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionLinks1$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionLinks1$Outbound;
}

export function createCustomerExchangeSessionLinks1ToJSON(
  createCustomerExchangeSessionLinks1: CreateCustomerExchangeSessionLinks1,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionLinks1$outboundSchema.parse(
      createCustomerExchangeSessionLinks1,
    ),
  );
}

export function createCustomerExchangeSessionLinks1FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionLinks1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionLinks1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionLinks1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSession1$inboundSchema: z.ZodType<
  CreateCustomerExchangeSession1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerExchangeSessionLinks1$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerExchangeSession1$Outbound = {
  _links: CreateCustomerExchangeSessionLinks1$Outbound;
};

/** @internal */
export const CreateCustomerExchangeSession1$outboundSchema: z.ZodType<
  CreateCustomerExchangeSession1$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSession1
> = z.object({
  links: z.lazy(() => CreateCustomerExchangeSessionLinks1$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSession1$ {
  /** @deprecated use `CreateCustomerExchangeSession1$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeSession1$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSession1$outboundSchema` instead. */
  export const outboundSchema = CreateCustomerExchangeSession1$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSession1$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSession1$Outbound;
}

export function createCustomerExchangeSession1ToJSON(
  createCustomerExchangeSession1: CreateCustomerExchangeSession1,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSession1$outboundSchema.parse(
      createCustomerExchangeSession1,
    ),
  );
}

export function createCustomerExchangeSession1FromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSession1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCustomerExchangeSession1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSession1' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionUnion$inboundSchema: z.ZodType<
  CreateCustomerExchangeSessionUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCustomerExchangeSession1$inboundSchema),
  z.lazy(() => CreateCustomerExchangeSession2$inboundSchema),
]);

/** @internal */
export type CreateCustomerExchangeSessionUnion$Outbound =
  | CreateCustomerExchangeSession1$Outbound
  | CreateCustomerExchangeSession2$Outbound;

/** @internal */
export const CreateCustomerExchangeSessionUnion$outboundSchema: z.ZodType<
  CreateCustomerExchangeSessionUnion$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeSessionUnion
> = z.union([
  z.lazy(() => CreateCustomerExchangeSession1$outboundSchema),
  z.lazy(() => CreateCustomerExchangeSession2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionUnion$ {
  /** @deprecated use `CreateCustomerExchangeSessionUnion$inboundSchema` instead. */
  export const inboundSchema = CreateCustomerExchangeSessionUnion$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionUnion$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionUnion$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionUnion$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeSessionUnion$Outbound;
}

export function createCustomerExchangeSessionUnionToJSON(
  createCustomerExchangeSessionUnion: CreateCustomerExchangeSessionUnion,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionUnion$outboundSchema.parse(
      createCustomerExchangeSessionUnion,
    ),
  );
}

export function createCustomerExchangeSessionUnionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeSessionUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionUnion' from JSON`,
  );
}
