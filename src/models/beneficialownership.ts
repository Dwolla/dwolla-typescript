/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  HalLink,
  HalLink$inboundSchema,
  HalLink$Outbound,
  HalLink$outboundSchema,
} from "./hallink.js";

export type BeneficialOwnershipLinks = {
  self?: HalLink | undefined;
};

export type BeneficialOwnership = {
  links?: BeneficialOwnershipLinks | undefined;
  status?: string | undefined;
};

/** @internal */
export const BeneficialOwnershipLinks$inboundSchema: z.ZodType<
  BeneficialOwnershipLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: HalLink$inboundSchema.optional(),
});

/** @internal */
export type BeneficialOwnershipLinks$Outbound = {
  self?: HalLink$Outbound | undefined;
};

/** @internal */
export const BeneficialOwnershipLinks$outboundSchema: z.ZodType<
  BeneficialOwnershipLinks$Outbound,
  z.ZodTypeDef,
  BeneficialOwnershipLinks
> = z.object({
  self: HalLink$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficialOwnershipLinks$ {
  /** @deprecated use `BeneficialOwnershipLinks$inboundSchema` instead. */
  export const inboundSchema = BeneficialOwnershipLinks$inboundSchema;
  /** @deprecated use `BeneficialOwnershipLinks$outboundSchema` instead. */
  export const outboundSchema = BeneficialOwnershipLinks$outboundSchema;
  /** @deprecated use `BeneficialOwnershipLinks$Outbound` instead. */
  export type Outbound = BeneficialOwnershipLinks$Outbound;
}

export function beneficialOwnershipLinksToJSON(
  beneficialOwnershipLinks: BeneficialOwnershipLinks,
): string {
  return JSON.stringify(
    BeneficialOwnershipLinks$outboundSchema.parse(beneficialOwnershipLinks),
  );
}

export function beneficialOwnershipLinksFromJSON(
  jsonString: string,
): SafeParseResult<BeneficialOwnershipLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BeneficialOwnershipLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BeneficialOwnershipLinks' from JSON`,
  );
}

/** @internal */
export const BeneficialOwnership$inboundSchema: z.ZodType<
  BeneficialOwnership,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => BeneficialOwnershipLinks$inboundSchema).optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type BeneficialOwnership$Outbound = {
  _links?: BeneficialOwnershipLinks$Outbound | undefined;
  status?: string | undefined;
};

/** @internal */
export const BeneficialOwnership$outboundSchema: z.ZodType<
  BeneficialOwnership$Outbound,
  z.ZodTypeDef,
  BeneficialOwnership
> = z.object({
  links: z.lazy(() => BeneficialOwnershipLinks$outboundSchema).optional(),
  status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BeneficialOwnership$ {
  /** @deprecated use `BeneficialOwnership$inboundSchema` instead. */
  export const inboundSchema = BeneficialOwnership$inboundSchema;
  /** @deprecated use `BeneficialOwnership$outboundSchema` instead. */
  export const outboundSchema = BeneficialOwnership$outboundSchema;
  /** @deprecated use `BeneficialOwnership$Outbound` instead. */
  export type Outbound = BeneficialOwnership$Outbound;
}

export function beneficialOwnershipToJSON(
  beneficialOwnership: BeneficialOwnership,
): string {
  return JSON.stringify(
    BeneficialOwnership$outboundSchema.parse(beneficialOwnership),
  );
}

export function beneficialOwnershipFromJSON(
  jsonString: string,
): SafeParseResult<BeneficialOwnership, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BeneficialOwnership$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BeneficialOwnership' from JSON`,
  );
}
