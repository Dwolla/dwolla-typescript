/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  InternationalAddress,
  InternationalAddress$inboundSchema,
  InternationalAddress$Outbound,
  InternationalAddress$outboundSchema,
} from "./internationaladdress.js";
import {
  Passport,
  Passport$inboundSchema,
  Passport$Outbound,
  Passport$outboundSchema,
} from "./passport.js";

export type CreateVerifiedBusinessCustomerWithInternationalControllerController =
  {
    firstName: string;
    lastName: string;
    title: string;
    dateOfBirth: string;
    address: InternationalAddress;
    passport: Passport;
  };

export const CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType =
  {
    Llc: "llc",
    Corporation: "corporation",
    Partnership: "partnership",
  } as const;
export type CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType =
  ClosedEnum<
    typeof CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType
  >;

/**
 * Create a Verified Business customer with an international (non US) controller
 */
export type CreateVerifiedBusinessCustomerWithInternationalController = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  type?: "business" | undefined;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  businessClassification: string;
  businessName: string;
  doingBusinessAs?: string | undefined;
  ein: string;
  website?: string | undefined;
  controller:
    CreateVerifiedBusinessCustomerWithInternationalControllerController;
  businessType:
    CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType;
};

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalControllerController$inboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithInternationalControllerController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: InternationalAddress$inboundSchema,
    passport: Passport$inboundSchema,
  });

/** @internal */
export type CreateVerifiedBusinessCustomerWithInternationalControllerController$Outbound =
  {
    firstName: string;
    lastName: string;
    title: string;
    dateOfBirth: string;
    address: InternationalAddress$Outbound;
    passport: Passport$Outbound;
  };

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalControllerController$outboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithInternationalControllerController$Outbound,
    z.ZodTypeDef,
    CreateVerifiedBusinessCustomerWithInternationalControllerController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    title: z.string(),
    dateOfBirth: z.string(),
    address: InternationalAddress$outboundSchema,
    passport: Passport$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithInternationalControllerController$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalControllerController$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalControllerController$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalControllerController$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalControllerController$outboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalControllerController$Outbound` instead. */
  export type Outbound =
    CreateVerifiedBusinessCustomerWithInternationalControllerController$Outbound;
}

export function createVerifiedBusinessCustomerWithInternationalControllerControllerToJSON(
  createVerifiedBusinessCustomerWithInternationalControllerController:
    CreateVerifiedBusinessCustomerWithInternationalControllerController,
): string {
  return JSON.stringify(
    CreateVerifiedBusinessCustomerWithInternationalControllerController$outboundSchema
      .parse(
        createVerifiedBusinessCustomerWithInternationalControllerController,
      ),
  );
}

export function createVerifiedBusinessCustomerWithInternationalControllerControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateVerifiedBusinessCustomerWithInternationalControllerController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateVerifiedBusinessCustomerWithInternationalControllerController$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedBusinessCustomerWithInternationalControllerController' from JSON`,
  );
}

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType
  > = z.nativeEnum(
    CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType,
  );

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType
  > =
    CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$outboundSchema;
}

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalController$inboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithInternationalController,
    z.ZodTypeDef,
    unknown
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    phone: z.string().optional(),
    correlationId: z.string().optional(),
    type: z.literal("business").default("business").optional(),
    address1: z.string(),
    address2: z.string().optional(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    businessClassification: z.string(),
    businessName: z.string(),
    doingBusinessAs: z.string().optional(),
    ein: z.string(),
    website: z.string().optional(),
    controller: z.lazy(() =>
      CreateVerifiedBusinessCustomerWithInternationalControllerController$inboundSchema
    ),
    businessType:
      CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$inboundSchema,
  });

/** @internal */
export type CreateVerifiedBusinessCustomerWithInternationalController$Outbound =
  {
    firstName: string;
    lastName: string;
    email: string;
    ipAddress?: string | undefined;
    phone?: string | undefined;
    correlationId?: string | undefined;
    type: "business";
    address1: string;
    address2?: string | undefined;
    city: string;
    state: string;
    postalCode: string;
    businessClassification: string;
    businessName: string;
    doingBusinessAs?: string | undefined;
    ein: string;
    website?: string | undefined;
    controller:
      CreateVerifiedBusinessCustomerWithInternationalControllerController$Outbound;
    businessType: string;
  };

/** @internal */
export const CreateVerifiedBusinessCustomerWithInternationalController$outboundSchema:
  z.ZodType<
    CreateVerifiedBusinessCustomerWithInternationalController$Outbound,
    z.ZodTypeDef,
    CreateVerifiedBusinessCustomerWithInternationalController
  > = z.object({
    firstName: z.string(),
    lastName: z.string(),
    email: z.string(),
    ipAddress: z.string().optional(),
    phone: z.string().optional(),
    correlationId: z.string().optional(),
    type: z.literal("business").default("business" as const),
    address1: z.string(),
    address2: z.string().optional(),
    city: z.string(),
    state: z.string(),
    postalCode: z.string(),
    businessClassification: z.string(),
    businessName: z.string(),
    doingBusinessAs: z.string().optional(),
    ein: z.string(),
    website: z.string().optional(),
    controller: z.lazy(() =>
      CreateVerifiedBusinessCustomerWithInternationalControllerController$outboundSchema
    ),
    businessType:
      CreateVerifiedBusinessCustomerWithInternationalControllerBusinessType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedBusinessCustomerWithInternationalController$ {
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalController$inboundSchema` instead. */
  export const inboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalController$inboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalController$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedBusinessCustomerWithInternationalController$outboundSchema;
  /** @deprecated use `CreateVerifiedBusinessCustomerWithInternationalController$Outbound` instead. */
  export type Outbound =
    CreateVerifiedBusinessCustomerWithInternationalController$Outbound;
}

export function createVerifiedBusinessCustomerWithInternationalControllerToJSON(
  createVerifiedBusinessCustomerWithInternationalController:
    CreateVerifiedBusinessCustomerWithInternationalController,
): string {
  return JSON.stringify(
    CreateVerifiedBusinessCustomerWithInternationalController$outboundSchema
      .parse(createVerifiedBusinessCustomerWithInternationalController),
  );
}

export function createVerifiedBusinessCustomerWithInternationalControllerFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateVerifiedBusinessCustomerWithInternationalController,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateVerifiedBusinessCustomerWithInternationalController$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedBusinessCustomerWithInternationalController' from JSON`,
  );
}
