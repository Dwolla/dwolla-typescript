/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Upgrade Unverified Customer to Verified Business Customer (Sole Proprietorship)
 */
export type UpgradeToVerifiedSoleProp = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  dateOfBirth: string;
  ssn: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const UpgradeToVerifiedSoleProp$inboundSchema: z.ZodType<
  UpgradeToVerifiedSoleProp,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  dateOfBirth: z.string(),
  ssn: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/** @internal */
export type UpgradeToVerifiedSoleProp$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  type: string;
  dateOfBirth: string;
  ssn: string;
  address1: string;
  city: string;
  state: string;
  postalCode: string;
  businessClassification: string;
  businessType: string;
  businessName: string;
  ein: string;
};

/** @internal */
export const UpgradeToVerifiedSoleProp$outboundSchema: z.ZodType<
  UpgradeToVerifiedSoleProp$Outbound,
  z.ZodTypeDef,
  UpgradeToVerifiedSoleProp
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  type: z.string(),
  dateOfBirth: z.string(),
  ssn: z.string(),
  address1: z.string(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  businessClassification: z.string(),
  businessType: z.string(),
  businessName: z.string(),
  ein: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpgradeToVerifiedSoleProp$ {
  /** @deprecated use `UpgradeToVerifiedSoleProp$inboundSchema` instead. */
  export const inboundSchema = UpgradeToVerifiedSoleProp$inboundSchema;
  /** @deprecated use `UpgradeToVerifiedSoleProp$outboundSchema` instead. */
  export const outboundSchema = UpgradeToVerifiedSoleProp$outboundSchema;
  /** @deprecated use `UpgradeToVerifiedSoleProp$Outbound` instead. */
  export type Outbound = UpgradeToVerifiedSoleProp$Outbound;
}

export function upgradeToVerifiedSolePropToJSON(
  upgradeToVerifiedSoleProp: UpgradeToVerifiedSoleProp,
): string {
  return JSON.stringify(
    UpgradeToVerifiedSoleProp$outboundSchema.parse(upgradeToVerifiedSoleProp),
  );
}

export function upgradeToVerifiedSolePropFromJSON(
  jsonString: string,
): SafeParseResult<UpgradeToVerifiedSoleProp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpgradeToVerifiedSoleProp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpgradeToVerifiedSoleProp' from JSON`,
  );
}
