/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidSourceFundingSourceErrorLinks = {};

export type InvalidSourceFundingSourceErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidSourceFundingSourceErrorLinks | undefined;
};

export type InvalidSourceFundingSourceErrorEmbedded = {
  errors?: Array<InvalidSourceFundingSourceErrorError> | undefined;
};

/** @internal */
export const InvalidSourceFundingSourceErrorLinks$inboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidSourceFundingSourceErrorLinks$Outbound = {};

/** @internal */
export const InvalidSourceFundingSourceErrorLinks$outboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorLinks$Outbound,
  z.ZodTypeDef,
  InvalidSourceFundingSourceErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceFundingSourceErrorLinks$ {
  /** @deprecated use `InvalidSourceFundingSourceErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceFundingSourceErrorLinks$inboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceFundingSourceErrorLinks$outboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorLinks$Outbound` instead. */
  export type Outbound = InvalidSourceFundingSourceErrorLinks$Outbound;
}

export function invalidSourceFundingSourceErrorLinksToJSON(
  invalidSourceFundingSourceErrorLinks: InvalidSourceFundingSourceErrorLinks,
): string {
  return JSON.stringify(
    InvalidSourceFundingSourceErrorLinks$outboundSchema.parse(
      invalidSourceFundingSourceErrorLinks,
    ),
  );
}

export function invalidSourceFundingSourceErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<InvalidSourceFundingSourceErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceFundingSourceErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidSourceFundingSourceErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidSourceFundingSourceErrorError$inboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidSourceFundingSourceErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidSourceFundingSourceErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidSourceFundingSourceErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidSourceFundingSourceErrorError$outboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorError$Outbound,
  z.ZodTypeDef,
  InvalidSourceFundingSourceErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => InvalidSourceFundingSourceErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceFundingSourceErrorError$ {
  /** @deprecated use `InvalidSourceFundingSourceErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceFundingSourceErrorError$inboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceFundingSourceErrorError$outboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorError$Outbound` instead. */
  export type Outbound = InvalidSourceFundingSourceErrorError$Outbound;
}

export function invalidSourceFundingSourceErrorErrorToJSON(
  invalidSourceFundingSourceErrorError: InvalidSourceFundingSourceErrorError,
): string {
  return JSON.stringify(
    InvalidSourceFundingSourceErrorError$outboundSchema.parse(
      invalidSourceFundingSourceErrorError,
    ),
  );
}

export function invalidSourceFundingSourceErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<InvalidSourceFundingSourceErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceFundingSourceErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidSourceFundingSourceErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidSourceFundingSourceErrorEmbedded$inboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => InvalidSourceFundingSourceErrorError$inboundSchema),
  ).optional(),
});

/** @internal */
export type InvalidSourceFundingSourceErrorEmbedded$Outbound = {
  errors?: Array<InvalidSourceFundingSourceErrorError$Outbound> | undefined;
};

/** @internal */
export const InvalidSourceFundingSourceErrorEmbedded$outboundSchema: z.ZodType<
  InvalidSourceFundingSourceErrorEmbedded$Outbound,
  z.ZodTypeDef,
  InvalidSourceFundingSourceErrorEmbedded
> = z.object({
  errors: z.array(
    z.lazy(() => InvalidSourceFundingSourceErrorError$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidSourceFundingSourceErrorEmbedded$ {
  /** @deprecated use `InvalidSourceFundingSourceErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidSourceFundingSourceErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidSourceFundingSourceErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidSourceFundingSourceErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidSourceFundingSourceErrorEmbedded$Outbound;
}

export function invalidSourceFundingSourceErrorEmbeddedToJSON(
  invalidSourceFundingSourceErrorEmbedded:
    InvalidSourceFundingSourceErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidSourceFundingSourceErrorEmbedded$outboundSchema.parse(
      invalidSourceFundingSourceErrorEmbedded,
    ),
  );
}

export function invalidSourceFundingSourceErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidSourceFundingSourceErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidSourceFundingSourceErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidSourceFundingSourceErrorEmbedded' from JSON`,
  );
}
