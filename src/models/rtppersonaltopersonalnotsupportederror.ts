/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type RtpPersonalToPersonalNotSupportedErrorLinks = {};

export type RtpPersonalToPersonalNotSupportedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: RtpPersonalToPersonalNotSupportedErrorLinks | undefined;
};

export type RtpPersonalToPersonalNotSupportedErrorEmbedded = {
  errors?: Array<RtpPersonalToPersonalNotSupportedErrorError> | undefined;
};

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorLinks$inboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type RtpPersonalToPersonalNotSupportedErrorLinks$Outbound = {};

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorLinks$outboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorLinks$Outbound,
    z.ZodTypeDef,
    RtpPersonalToPersonalNotSupportedErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpPersonalToPersonalNotSupportedErrorLinks$ {
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    RtpPersonalToPersonalNotSupportedErrorLinks$inboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    RtpPersonalToPersonalNotSupportedErrorLinks$outboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorLinks$Outbound` instead. */
  export type Outbound = RtpPersonalToPersonalNotSupportedErrorLinks$Outbound;
}

export function rtpPersonalToPersonalNotSupportedErrorLinksToJSON(
  rtpPersonalToPersonalNotSupportedErrorLinks:
    RtpPersonalToPersonalNotSupportedErrorLinks,
): string {
  return JSON.stringify(
    RtpPersonalToPersonalNotSupportedErrorLinks$outboundSchema.parse(
      rtpPersonalToPersonalNotSupportedErrorLinks,
    ),
  );
}

export function rtpPersonalToPersonalNotSupportedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  RtpPersonalToPersonalNotSupportedErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RtpPersonalToPersonalNotSupportedErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RtpPersonalToPersonalNotSupportedErrorLinks' from JSON`,
  );
}

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorError$inboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      RtpPersonalToPersonalNotSupportedErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type RtpPersonalToPersonalNotSupportedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: RtpPersonalToPersonalNotSupportedErrorLinks$Outbound | undefined;
};

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorError$outboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorError$Outbound,
    z.ZodTypeDef,
    RtpPersonalToPersonalNotSupportedErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      RtpPersonalToPersonalNotSupportedErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpPersonalToPersonalNotSupportedErrorError$ {
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorError$inboundSchema` instead. */
  export const inboundSchema =
    RtpPersonalToPersonalNotSupportedErrorError$inboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    RtpPersonalToPersonalNotSupportedErrorError$outboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorError$Outbound` instead. */
  export type Outbound = RtpPersonalToPersonalNotSupportedErrorError$Outbound;
}

export function rtpPersonalToPersonalNotSupportedErrorErrorToJSON(
  rtpPersonalToPersonalNotSupportedErrorError:
    RtpPersonalToPersonalNotSupportedErrorError,
): string {
  return JSON.stringify(
    RtpPersonalToPersonalNotSupportedErrorError$outboundSchema.parse(
      rtpPersonalToPersonalNotSupportedErrorError,
    ),
  );
}

export function rtpPersonalToPersonalNotSupportedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  RtpPersonalToPersonalNotSupportedErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RtpPersonalToPersonalNotSupportedErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RtpPersonalToPersonalNotSupportedErrorError' from JSON`,
  );
}

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorEmbedded$inboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => RtpPersonalToPersonalNotSupportedErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type RtpPersonalToPersonalNotSupportedErrorEmbedded$Outbound = {
  errors?:
    | Array<RtpPersonalToPersonalNotSupportedErrorError$Outbound>
    | undefined;
};

/** @internal */
export const RtpPersonalToPersonalNotSupportedErrorEmbedded$outboundSchema:
  z.ZodType<
    RtpPersonalToPersonalNotSupportedErrorEmbedded$Outbound,
    z.ZodTypeDef,
    RtpPersonalToPersonalNotSupportedErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => RtpPersonalToPersonalNotSupportedErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RtpPersonalToPersonalNotSupportedErrorEmbedded$ {
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    RtpPersonalToPersonalNotSupportedErrorEmbedded$inboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    RtpPersonalToPersonalNotSupportedErrorEmbedded$outboundSchema;
  /** @deprecated use `RtpPersonalToPersonalNotSupportedErrorEmbedded$Outbound` instead. */
  export type Outbound =
    RtpPersonalToPersonalNotSupportedErrorEmbedded$Outbound;
}

export function rtpPersonalToPersonalNotSupportedErrorEmbeddedToJSON(
  rtpPersonalToPersonalNotSupportedErrorEmbedded:
    RtpPersonalToPersonalNotSupportedErrorEmbedded,
): string {
  return JSON.stringify(
    RtpPersonalToPersonalNotSupportedErrorEmbedded$outboundSchema.parse(
      rtpPersonalToPersonalNotSupportedErrorEmbedded,
    ),
  );
}

export function rtpPersonalToPersonalNotSupportedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  RtpPersonalToPersonalNotSupportedErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RtpPersonalToPersonalNotSupportedErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RtpPersonalToPersonalNotSupportedErrorEmbedded' from JSON`,
  );
}
