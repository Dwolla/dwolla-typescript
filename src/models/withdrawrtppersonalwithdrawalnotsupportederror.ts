/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks = {};

export type WithdrawRtpPersonalWithdrawalNotSupportedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks | undefined;
};

export type WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded = {
  errors?:
    | Array<WithdrawRtpPersonalWithdrawalNotSupportedErrorError>
    | undefined;
};

export type WithdrawRtpPersonalWithdrawalNotSupportedError = {
  code: string;
  message: string;
  embedded?: WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded | undefined;
};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$inboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$Outbound = {};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$outboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$Outbound,
    z.ZodTypeDef,
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$ {
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$inboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$outboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$Outbound` instead. */
  export type Outbound =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$Outbound;
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorLinksToJSON(
  withdrawRtpPersonalWithdrawalNotSupportedErrorLinks:
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks,
): string {
  return JSON.stringify(
    WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$outboundSchema.parse(
      withdrawRtpPersonalWithdrawalNotSupportedErrorLinks,
    ),
  );
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks' from JSON`,
  );
}

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorError$inboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    _links: z.lazy(() =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_links": "links",
    });
  });

/** @internal */
export type WithdrawRtpPersonalWithdrawalNotSupportedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?:
    | WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$Outbound
    | undefined;
};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorError$outboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError$Outbound,
    z.ZodTypeDef,
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawRtpPersonalWithdrawalNotSupportedErrorError$ {
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError$inboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError$outboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorError$Outbound` instead. */
  export type Outbound =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError$Outbound;
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorErrorToJSON(
  withdrawRtpPersonalWithdrawalNotSupportedErrorError:
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError,
): string {
  return JSON.stringify(
    WithdrawRtpPersonalWithdrawalNotSupportedErrorError$outboundSchema.parse(
      withdrawRtpPersonalWithdrawalNotSupportedErrorError,
    ),
  );
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawRtpPersonalWithdrawalNotSupportedErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawRtpPersonalWithdrawalNotSupportedErrorError' from JSON`,
  );
}

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawRtpPersonalWithdrawalNotSupportedErrorError$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound = {
  errors?:
    | Array<WithdrawRtpPersonalWithdrawalNotSupportedErrorError$Outbound>
    | undefined;
};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound,
    z.ZodTypeDef,
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() =>
        WithdrawRtpPersonalWithdrawalNotSupportedErrorError$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$ {
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound` instead. */
  export type Outbound =
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound;
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorEmbeddedToJSON(
  withdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded:
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded,
): string {
  return JSON.stringify(
    WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema.parse(
      withdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded,
    ),
  );
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
    _embedded: z.lazy(() =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "_embedded": "embedded",
    });
  });

/** @internal */
export type WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound,
    z.ZodTypeDef,
    WithdrawRtpPersonalWithdrawalNotSupportedError
  > = z.object({
    code: z.string(),
    message: z.string(),
    embedded: z.lazy(() =>
      WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      embedded: "_embedded",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawRtpPersonalWithdrawalNotSupportedError$ {
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound` instead. */
  export type Outbound =
    WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound;
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorToJSON(
  withdrawRtpPersonalWithdrawalNotSupportedError:
    WithdrawRtpPersonalWithdrawalNotSupportedError,
): string {
  return JSON.stringify(
    WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema.parse(
      withdrawRtpPersonalWithdrawalNotSupportedError,
    ),
  );
}

export function withdrawRtpPersonalWithdrawalNotSupportedErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  WithdrawRtpPersonalWithdrawalNotSupportedError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WithdrawRtpPersonalWithdrawalNotSupportedError' from JSON`,
  );
}
