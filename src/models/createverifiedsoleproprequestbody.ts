/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Create a Verified Business customer (Sole Proprietorship)
 */
export type CreateVerifiedSolePropRequestBody = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName: string;
  type: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  ssn: string;
  dateOfBirth: string;
  businessClassification: string;
  doingBusinessAs?: string | undefined;
  ein?: string | undefined;
  website?: string | undefined;
  businessType: string;
};

/** @internal */
export const CreateVerifiedSolePropRequestBody$inboundSchema: z.ZodType<
  CreateVerifiedSolePropRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string(),
  type: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  ssn: z.string(),
  dateOfBirth: z.string(),
  businessClassification: z.string(),
  doingBusinessAs: z.string().optional(),
  ein: z.string().optional(),
  website: z.string().optional(),
  businessType: z.string(),
});

/** @internal */
export type CreateVerifiedSolePropRequestBody$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  ipAddress?: string | undefined;
  phone?: string | undefined;
  correlationId?: string | undefined;
  businessName: string;
  type: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  postalCode: string;
  ssn: string;
  dateOfBirth: string;
  businessClassification: string;
  doingBusinessAs?: string | undefined;
  ein?: string | undefined;
  website?: string | undefined;
  businessType: string;
};

/** @internal */
export const CreateVerifiedSolePropRequestBody$outboundSchema: z.ZodType<
  CreateVerifiedSolePropRequestBody$Outbound,
  z.ZodTypeDef,
  CreateVerifiedSolePropRequestBody
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  ipAddress: z.string().optional(),
  phone: z.string().optional(),
  correlationId: z.string().optional(),
  businessName: z.string(),
  type: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  postalCode: z.string(),
  ssn: z.string(),
  dateOfBirth: z.string(),
  businessClassification: z.string(),
  doingBusinessAs: z.string().optional(),
  ein: z.string().optional(),
  website: z.string().optional(),
  businessType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateVerifiedSolePropRequestBody$ {
  /** @deprecated use `CreateVerifiedSolePropRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateVerifiedSolePropRequestBody$inboundSchema;
  /** @deprecated use `CreateVerifiedSolePropRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateVerifiedSolePropRequestBody$outboundSchema;
  /** @deprecated use `CreateVerifiedSolePropRequestBody$Outbound` instead. */
  export type Outbound = CreateVerifiedSolePropRequestBody$Outbound;
}

export function createVerifiedSolePropRequestBodyToJSON(
  createVerifiedSolePropRequestBody: CreateVerifiedSolePropRequestBody,
): string {
  return JSON.stringify(
    CreateVerifiedSolePropRequestBody$outboundSchema.parse(
      createVerifiedSolePropRequestBody,
    ),
  );
}

export function createVerifiedSolePropRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateVerifiedSolePropRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateVerifiedSolePropRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateVerifiedSolePropRequestBody' from JSON`,
  );
}
