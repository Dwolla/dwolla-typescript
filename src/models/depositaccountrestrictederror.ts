/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type DepositAccountRestrictedErrorLinks = {};

export type DepositAccountRestrictedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: DepositAccountRestrictedErrorLinks | undefined;
};

export type DepositAccountRestrictedErrorEmbedded = {
  errors?: Array<DepositAccountRestrictedErrorError> | undefined;
};

export type DepositAccountRestrictedError = {
  code: string;
  message: string;
  embedded?: DepositAccountRestrictedErrorEmbedded | undefined;
};

/** @internal */
export const DepositAccountRestrictedErrorLinks$inboundSchema: z.ZodType<
  DepositAccountRestrictedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DepositAccountRestrictedErrorLinks$Outbound = {};

/** @internal */
export const DepositAccountRestrictedErrorLinks$outboundSchema: z.ZodType<
  DepositAccountRestrictedErrorLinks$Outbound,
  z.ZodTypeDef,
  DepositAccountRestrictedErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositAccountRestrictedErrorLinks$ {
  /** @deprecated use `DepositAccountRestrictedErrorLinks$inboundSchema` instead. */
  export const inboundSchema = DepositAccountRestrictedErrorLinks$inboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    DepositAccountRestrictedErrorLinks$outboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorLinks$Outbound` instead. */
  export type Outbound = DepositAccountRestrictedErrorLinks$Outbound;
}

export function depositAccountRestrictedErrorLinksToJSON(
  depositAccountRestrictedErrorLinks: DepositAccountRestrictedErrorLinks,
): string {
  return JSON.stringify(
    DepositAccountRestrictedErrorLinks$outboundSchema.parse(
      depositAccountRestrictedErrorLinks,
    ),
  );
}

export function depositAccountRestrictedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<DepositAccountRestrictedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DepositAccountRestrictedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositAccountRestrictedErrorLinks' from JSON`,
  );
}

/** @internal */
export const DepositAccountRestrictedErrorError$inboundSchema: z.ZodType<
  DepositAccountRestrictedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => DepositAccountRestrictedErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type DepositAccountRestrictedErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: DepositAccountRestrictedErrorLinks$Outbound | undefined;
};

/** @internal */
export const DepositAccountRestrictedErrorError$outboundSchema: z.ZodType<
  DepositAccountRestrictedErrorError$Outbound,
  z.ZodTypeDef,
  DepositAccountRestrictedErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => DepositAccountRestrictedErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositAccountRestrictedErrorError$ {
  /** @deprecated use `DepositAccountRestrictedErrorError$inboundSchema` instead. */
  export const inboundSchema = DepositAccountRestrictedErrorError$inboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorError$outboundSchema` instead. */
  export const outboundSchema =
    DepositAccountRestrictedErrorError$outboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorError$Outbound` instead. */
  export type Outbound = DepositAccountRestrictedErrorError$Outbound;
}

export function depositAccountRestrictedErrorErrorToJSON(
  depositAccountRestrictedErrorError: DepositAccountRestrictedErrorError,
): string {
  return JSON.stringify(
    DepositAccountRestrictedErrorError$outboundSchema.parse(
      depositAccountRestrictedErrorError,
    ),
  );
}

export function depositAccountRestrictedErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<DepositAccountRestrictedErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DepositAccountRestrictedErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositAccountRestrictedErrorError' from JSON`,
  );
}

/** @internal */
export const DepositAccountRestrictedErrorEmbedded$inboundSchema: z.ZodType<
  DepositAccountRestrictedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => DepositAccountRestrictedErrorError$inboundSchema),
  ).optional(),
});

/** @internal */
export type DepositAccountRestrictedErrorEmbedded$Outbound = {
  errors?: Array<DepositAccountRestrictedErrorError$Outbound> | undefined;
};

/** @internal */
export const DepositAccountRestrictedErrorEmbedded$outboundSchema: z.ZodType<
  DepositAccountRestrictedErrorEmbedded$Outbound,
  z.ZodTypeDef,
  DepositAccountRestrictedErrorEmbedded
> = z.object({
  errors: z.array(
    z.lazy(() => DepositAccountRestrictedErrorError$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositAccountRestrictedErrorEmbedded$ {
  /** @deprecated use `DepositAccountRestrictedErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    DepositAccountRestrictedErrorEmbedded$inboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    DepositAccountRestrictedErrorEmbedded$outboundSchema;
  /** @deprecated use `DepositAccountRestrictedErrorEmbedded$Outbound` instead. */
  export type Outbound = DepositAccountRestrictedErrorEmbedded$Outbound;
}

export function depositAccountRestrictedErrorEmbeddedToJSON(
  depositAccountRestrictedErrorEmbedded: DepositAccountRestrictedErrorEmbedded,
): string {
  return JSON.stringify(
    DepositAccountRestrictedErrorEmbedded$outboundSchema.parse(
      depositAccountRestrictedErrorEmbedded,
    ),
  );
}

export function depositAccountRestrictedErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<DepositAccountRestrictedErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DepositAccountRestrictedErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositAccountRestrictedErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const DepositAccountRestrictedError$inboundSchema: z.ZodType<
  DepositAccountRestrictedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => DepositAccountRestrictedErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type DepositAccountRestrictedError$Outbound = {
  code: string;
  message: string;
  _embedded?: DepositAccountRestrictedErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const DepositAccountRestrictedError$outboundSchema: z.ZodType<
  DepositAccountRestrictedError$Outbound,
  z.ZodTypeDef,
  DepositAccountRestrictedError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => DepositAccountRestrictedErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositAccountRestrictedError$ {
  /** @deprecated use `DepositAccountRestrictedError$inboundSchema` instead. */
  export const inboundSchema = DepositAccountRestrictedError$inboundSchema;
  /** @deprecated use `DepositAccountRestrictedError$outboundSchema` instead. */
  export const outboundSchema = DepositAccountRestrictedError$outboundSchema;
  /** @deprecated use `DepositAccountRestrictedError$Outbound` instead. */
  export type Outbound = DepositAccountRestrictedError$Outbound;
}

export function depositAccountRestrictedErrorToJSON(
  depositAccountRestrictedError: DepositAccountRestrictedError,
): string {
  return JSON.stringify(
    DepositAccountRestrictedError$outboundSchema.parse(
      depositAccountRestrictedError,
    ),
  );
}

export function depositAccountRestrictedErrorFromJSON(
  jsonString: string,
): SafeParseResult<DepositAccountRestrictedError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DepositAccountRestrictedError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositAccountRestrictedError' from JSON`,
  );
}
