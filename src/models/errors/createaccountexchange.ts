/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as models from "../index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Invalid Scope
 */
export type CreateAccountExchangeDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Invalid Scope
 */
export class CreateAccountExchangeDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateAccountExchangeDwollaV1HalJSONErrorData;

  constructor(err: CreateAccountExchangeDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "CreateAccountExchangeDwollaV1HalJSONError";
  }
}

/**
 * Bad Request
 */
export type CreateAccountExchangeDwollaV1HalJSON =
  | models.InvalidExchangeToken
  | models.InvalidExchange;

/** @internal */
export const CreateAccountExchangeDwollaV1HalJSONError$inboundSchema: z.ZodType<
  CreateAccountExchangeDwollaV1HalJSONError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
})
  .transform((v) => {
    return new CreateAccountExchangeDwollaV1HalJSONError(v);
  });

/** @internal */
export type CreateAccountExchangeDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateAccountExchangeDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateAccountExchangeDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateAccountExchangeDwollaV1HalJSONError
  > = z.instanceof(CreateAccountExchangeDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountExchangeDwollaV1HalJSONError$ {
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateAccountExchangeDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccountExchangeDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = CreateAccountExchangeDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateAccountExchangeDwollaV1HalJSON$inboundSchema: z.ZodType<
  CreateAccountExchangeDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.InvalidExchangeToken$inboundSchema,
  models.InvalidExchange$inboundSchema,
]);

/** @internal */
export type CreateAccountExchangeDwollaV1HalJSON$Outbound =
  | models.InvalidExchangeToken$Outbound
  | models.InvalidExchange$Outbound;

/** @internal */
export const CreateAccountExchangeDwollaV1HalJSON$outboundSchema: z.ZodType<
  CreateAccountExchangeDwollaV1HalJSON$Outbound,
  z.ZodTypeDef,
  CreateAccountExchangeDwollaV1HalJSON
> = z.union([
  models.InvalidExchangeToken$outboundSchema,
  models.InvalidExchange$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAccountExchangeDwollaV1HalJSON$ {
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateAccountExchangeDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateAccountExchangeDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateAccountExchangeDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = CreateAccountExchangeDwollaV1HalJSON$Outbound;
}

export function createAccountExchangeDwollaV1HalJSONToJSON(
  createAccountExchangeDwollaV1HalJSON: CreateAccountExchangeDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateAccountExchangeDwollaV1HalJSON$outboundSchema.parse(
      createAccountExchangeDwollaV1HalJSON,
    ),
  );
}

export function createAccountExchangeDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<CreateAccountExchangeDwollaV1HalJSON, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateAccountExchangeDwollaV1HalJSON$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateAccountExchangeDwollaV1HalJSON' from JSON`,
  );
}
