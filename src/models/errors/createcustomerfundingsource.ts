/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  DuplicateFundingSourceError,
  DuplicateFundingSourceError$inboundSchema,
  DuplicateFundingSourceError$Outbound,
  DuplicateFundingSourceError$outboundSchema,
} from "./duplicatefundingsourceerror.js";
import { DwollaError } from "./dwollaerror.js";
import {
  InactiveExchangeError,
  InactiveExchangeError$inboundSchema,
  InactiveExchangeError$Outbound,
  InactiveExchangeError$outboundSchema,
} from "./inactiveexchangeerror.js";
import {
  InvalidExchangeTokenErrorError,
  InvalidExchangeTokenErrorError$inboundSchema,
  InvalidExchangeTokenErrorError$Outbound,
  InvalidExchangeTokenErrorError$outboundSchema,
} from "./invalidexchangetokenerrorerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * not found
 */
export type CreateCustomerFundingSourceNotFoundDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * not found
 */
export class CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError
  extends DwollaError
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerFundingSourceNotFoundDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerFundingSourceNotFoundDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError";
  }
}

/**
 * forbidden
 */
export type CreateCustomerFundingSourceForbiddenDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * forbidden
 */
export class CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError
  extends DwollaError
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerFundingSourceForbiddenDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerFundingSourceForbiddenDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError";
  }
}

/**
 * validation error
 */
export type CreateCustomerFundingSourceDwollaV1HalJSON =
  | InactiveExchangeError
  | InvalidExchangeTokenErrorError
  | DuplicateFundingSourceError;

/** @internal */
export const CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    CreateCustomerFundingSourceNotFoundDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$Outbound =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/** @internal */
export const CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    CreateCustomerFundingSourceForbiddenDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerFundingSourceDwollaV1HalJSON$inboundSchema:
  z.ZodType<CreateCustomerFundingSourceDwollaV1HalJSON, z.ZodTypeDef, unknown> =
    z.union([
      InactiveExchangeError$inboundSchema,
      InvalidExchangeTokenErrorError$inboundSchema,
      DuplicateFundingSourceError$inboundSchema,
    ]);

/** @internal */
export type CreateCustomerFundingSourceDwollaV1HalJSON$Outbound =
  | InactiveExchangeError$Outbound
  | InvalidExchangeTokenErrorError$Outbound
  | DuplicateFundingSourceError$Outbound;

/** @internal */
export const CreateCustomerFundingSourceDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    CreateCustomerFundingSourceDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    CreateCustomerFundingSourceDwollaV1HalJSON
  > = z.union([
    InactiveExchangeError$outboundSchema,
    InvalidExchangeTokenErrorError$outboundSchema,
    DuplicateFundingSourceError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerFundingSourceDwollaV1HalJSON$ {
  /** @deprecated use `CreateCustomerFundingSourceDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerFundingSourceDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerFundingSourceDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateCustomerFundingSourceDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = CreateCustomerFundingSourceDwollaV1HalJSON$Outbound;
}

export function createCustomerFundingSourceDwollaV1HalJSONToJSON(
  createCustomerFundingSourceDwollaV1HalJSON:
    CreateCustomerFundingSourceDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateCustomerFundingSourceDwollaV1HalJSON$outboundSchema.parse(
      createCustomerFundingSourceDwollaV1HalJSON,
    ),
  );
}

export function createCustomerFundingSourceDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerFundingSourceDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerFundingSourceDwollaV1HalJSON$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerFundingSourceDwollaV1HalJSON' from JSON`,
  );
}
