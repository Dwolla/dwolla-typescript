/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ExpiredKbaSessionError,
  ExpiredKbaSessionError$inboundSchema,
  ExpiredKbaSessionError$Outbound,
  ExpiredKbaSessionError$outboundSchema,
} from "./expiredkbasessionerror.js";
import {
  ForbiddenError,
  ForbiddenError$inboundSchema,
  ForbiddenError$Outbound,
  ForbiddenError$outboundSchema,
} from "./forbiddenerror.js";
import {
  InvalidKbaSessionError,
  InvalidKbaSessionError$inboundSchema,
  InvalidKbaSessionError$Outbound,
  InvalidKbaSessionError$outboundSchema,
} from "./invalidkbasessionerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * 404 Error
 */
export type VerifyDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * 404 Error
 */
export class VerifyDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VerifyDwollaV1HalJSONErrorData;

  constructor(err: VerifyDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "VerifyDwollaV1HalJSONError";
  }
}

/**
 * 403 Error
 */
export type VerifyDwollaV1HalJSON =
  | ForbiddenError
  | InvalidKbaSessionError
  | ExpiredKbaSessionError;

/** @internal */
export const VerifyDwollaV1HalJSONError$inboundSchema: z.ZodType<
  VerifyDwollaV1HalJSONError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
})
  .transform((v) => {
    return new VerifyDwollaV1HalJSONError(v);
  });

/** @internal */
export type VerifyDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const VerifyDwollaV1HalJSONError$outboundSchema: z.ZodType<
  VerifyDwollaV1HalJSONError$Outbound,
  z.ZodTypeDef,
  VerifyDwollaV1HalJSONError
> = z.instanceof(VerifyDwollaV1HalJSONError)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyDwollaV1HalJSONError$ {
  /** @deprecated use `VerifyDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema = VerifyDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `VerifyDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema = VerifyDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `VerifyDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = VerifyDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const VerifyDwollaV1HalJSON$inboundSchema: z.ZodType<
  VerifyDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  ForbiddenError$inboundSchema,
  InvalidKbaSessionError$inboundSchema,
  ExpiredKbaSessionError$inboundSchema,
]);

/** @internal */
export type VerifyDwollaV1HalJSON$Outbound =
  | ForbiddenError$Outbound
  | InvalidKbaSessionError$Outbound
  | ExpiredKbaSessionError$Outbound;

/** @internal */
export const VerifyDwollaV1HalJSON$outboundSchema: z.ZodType<
  VerifyDwollaV1HalJSON$Outbound,
  z.ZodTypeDef,
  VerifyDwollaV1HalJSON
> = z.union([
  ForbiddenError$outboundSchema,
  InvalidKbaSessionError$outboundSchema,
  ExpiredKbaSessionError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyDwollaV1HalJSON$ {
  /** @deprecated use `VerifyDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema = VerifyDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `VerifyDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema = VerifyDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `VerifyDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = VerifyDwollaV1HalJSON$Outbound;
}

export function verifyDwollaV1HalJSONToJSON(
  verifyDwollaV1HalJSON: VerifyDwollaV1HalJSON,
): string {
  return JSON.stringify(
    VerifyDwollaV1HalJSON$outboundSchema.parse(verifyDwollaV1HalJSON),
  );
}

export function verifyDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<VerifyDwollaV1HalJSON, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyDwollaV1HalJSON$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyDwollaV1HalJSON' from JSON`,
  );
}
