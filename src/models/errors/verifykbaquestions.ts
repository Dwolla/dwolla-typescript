/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as models from "../index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * 404 Error
 */
export type VerifyKbaQuestionsDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * 404 Error
 */
export class VerifyKbaQuestionsDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VerifyKbaQuestionsDwollaV1HalJSONErrorData;

  constructor(err: VerifyKbaQuestionsDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "VerifyKbaQuestionsDwollaV1HalJSONError";
  }
}

/**
 * 403 Error
 */
export type VerifyKbaQuestionsDwollaV1HalJSON =
  | models.ForbiddenError
  | models.InvalidKbaSessionError
  | models.ExpiredKbaSessionError;

/** @internal */
export const VerifyKbaQuestionsDwollaV1HalJSONError$inboundSchema: z.ZodType<
  VerifyKbaQuestionsDwollaV1HalJSONError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
})
  .transform((v) => {
    return new VerifyKbaQuestionsDwollaV1HalJSONError(v);
  });

/** @internal */
export type VerifyKbaQuestionsDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const VerifyKbaQuestionsDwollaV1HalJSONError$outboundSchema: z.ZodType<
  VerifyKbaQuestionsDwollaV1HalJSONError$Outbound,
  z.ZodTypeDef,
  VerifyKbaQuestionsDwollaV1HalJSONError
> = z.instanceof(VerifyKbaQuestionsDwollaV1HalJSONError)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyKbaQuestionsDwollaV1HalJSONError$ {
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    VerifyKbaQuestionsDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    VerifyKbaQuestionsDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = VerifyKbaQuestionsDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const VerifyKbaQuestionsDwollaV1HalJSON$inboundSchema: z.ZodType<
  VerifyKbaQuestionsDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.ForbiddenError$inboundSchema,
  models.InvalidKbaSessionError$inboundSchema,
  models.ExpiredKbaSessionError$inboundSchema,
]);

/** @internal */
export type VerifyKbaQuestionsDwollaV1HalJSON$Outbound =
  | models.ForbiddenError$Outbound
  | models.InvalidKbaSessionError$Outbound
  | models.ExpiredKbaSessionError$Outbound;

/** @internal */
export const VerifyKbaQuestionsDwollaV1HalJSON$outboundSchema: z.ZodType<
  VerifyKbaQuestionsDwollaV1HalJSON$Outbound,
  z.ZodTypeDef,
  VerifyKbaQuestionsDwollaV1HalJSON
> = z.union([
  models.ForbiddenError$outboundSchema,
  models.InvalidKbaSessionError$outboundSchema,
  models.ExpiredKbaSessionError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyKbaQuestionsDwollaV1HalJSON$ {
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema = VerifyKbaQuestionsDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    VerifyKbaQuestionsDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `VerifyKbaQuestionsDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = VerifyKbaQuestionsDwollaV1HalJSON$Outbound;
}

export function verifyKbaQuestionsDwollaV1HalJSONToJSON(
  verifyKbaQuestionsDwollaV1HalJSON: VerifyKbaQuestionsDwollaV1HalJSON,
): string {
  return JSON.stringify(
    VerifyKbaQuestionsDwollaV1HalJSON$outboundSchema.parse(
      verifyKbaQuestionsDwollaV1HalJSON,
    ),
  );
}

export function verifyKbaQuestionsDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<VerifyKbaQuestionsDwollaV1HalJSON, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VerifyKbaQuestionsDwollaV1HalJSON$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VerifyKbaQuestionsDwollaV1HalJSON' from JSON`,
  );
}
