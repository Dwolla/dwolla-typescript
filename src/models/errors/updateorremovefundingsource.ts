/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * forbidden
 */
export type UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * forbidden
 */
export class UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError
  extends Error
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONErrorData;

  constructor(
    err: UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError";
  }
}

/**
 * validation error
 */
export type UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * validation error
 */
export class UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError
  extends Error
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONErrorData;

  constructor(
    err: UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError";
  }
}

/** @internal */
export const UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError(v);
    });

/** @internal */
export type UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$Outbound =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/** @internal */
export const UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError
  > = z.instanceof(UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$ {
  /** @deprecated use `UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    UpdateOrRemoveFundingSourceForbiddenDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError(v);
    });

/** @internal */
export type UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$Outbound =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/** @internal */
export const UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError
  > = z.instanceof(UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$ {
  /** @deprecated use `UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    UpdateOrRemoveFundingSourceBadRequestDwollaV1HalJSONError$Outbound;
}
