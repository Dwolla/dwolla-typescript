/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Not Found
 */
export type GetExchangeNotFoundDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Not Found
 */
export class GetExchangeNotFoundDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetExchangeNotFoundDwollaV1HalJSONErrorData;

  constructor(err: GetExchangeNotFoundDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "GetExchangeNotFoundDwollaV1HalJSONError";
  }
}

/**
 * Invalid Scope
 */
export type GetExchangeUnauthorizedDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Invalid Scope
 */
export class GetExchangeUnauthorizedDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: GetExchangeUnauthorizedDwollaV1HalJSONErrorData;

  constructor(err: GetExchangeUnauthorizedDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "GetExchangeUnauthorizedDwollaV1HalJSONError";
  }
}

/** @internal */
export const GetExchangeNotFoundDwollaV1HalJSONError$inboundSchema: z.ZodType<
  GetExchangeNotFoundDwollaV1HalJSONError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
})
  .transform((v) => {
    return new GetExchangeNotFoundDwollaV1HalJSONError(v);
  });

/** @internal */
export type GetExchangeNotFoundDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetExchangeNotFoundDwollaV1HalJSONError$outboundSchema: z.ZodType<
  GetExchangeNotFoundDwollaV1HalJSONError$Outbound,
  z.ZodTypeDef,
  GetExchangeNotFoundDwollaV1HalJSONError
> = z.instanceof(GetExchangeNotFoundDwollaV1HalJSONError)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExchangeNotFoundDwollaV1HalJSONError$ {
  /** @deprecated use `GetExchangeNotFoundDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    GetExchangeNotFoundDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `GetExchangeNotFoundDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    GetExchangeNotFoundDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `GetExchangeNotFoundDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = GetExchangeNotFoundDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const GetExchangeUnauthorizedDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    GetExchangeUnauthorizedDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new GetExchangeUnauthorizedDwollaV1HalJSONError(v);
    });

/** @internal */
export type GetExchangeUnauthorizedDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const GetExchangeUnauthorizedDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    GetExchangeUnauthorizedDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    GetExchangeUnauthorizedDwollaV1HalJSONError
  > = z.instanceof(GetExchangeUnauthorizedDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetExchangeUnauthorizedDwollaV1HalJSONError$ {
  /** @deprecated use `GetExchangeUnauthorizedDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    GetExchangeUnauthorizedDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `GetExchangeUnauthorizedDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    GetExchangeUnauthorizedDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `GetExchangeUnauthorizedDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = GetExchangeUnauthorizedDwollaV1HalJSONError$Outbound;
}
