/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import { DwollaError } from "./dwollaerror.js";

export type StatusNotAllowedErrorData = {
  code: string;
  message: string;
  embedded?: models.StatusNotAllowedErrorEmbedded | undefined;
};

export class StatusNotAllowedError extends DwollaError {
  code: string;
  embedded?: models.StatusNotAllowedErrorEmbedded | undefined;

  /** The original data that was passed to this error instance. */
  data$: StatusNotAllowedErrorData;

  constructor(
    err: StatusNotAllowedErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.embedded != null) this.embedded = err.embedded;

    this.name = "StatusNotAllowedError";
  }
}

/** @internal */
export const StatusNotAllowedError$inboundSchema: z.ZodType<
  StatusNotAllowedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => models.StatusNotAllowedErrorEmbedded$inboundSchema)
    .optional(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_embedded": "embedded",
    });

    return new StatusNotAllowedError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type StatusNotAllowedError$Outbound = {
  code: string;
  message: string;
  _embedded?: models.StatusNotAllowedErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const StatusNotAllowedError$outboundSchema: z.ZodType<
  StatusNotAllowedError$Outbound,
  z.ZodTypeDef,
  StatusNotAllowedError
> = z.instanceof(StatusNotAllowedError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      code: z.string(),
      message: z.string(),
      embedded: z.lazy(() =>
        models.StatusNotAllowedErrorEmbedded$outboundSchema
      ).optional(),
    }).transform((v) => {
      return remap$(v, {
        embedded: "_embedded",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusNotAllowedError$ {
  /** @deprecated use `StatusNotAllowedError$inboundSchema` instead. */
  export const inboundSchema = StatusNotAllowedError$inboundSchema;
  /** @deprecated use `StatusNotAllowedError$outboundSchema` instead. */
  export const outboundSchema = StatusNotAllowedError$outboundSchema;
  /** @deprecated use `StatusNotAllowedError$Outbound` instead. */
  export type Outbound = StatusNotAllowedError$Outbound;
}
