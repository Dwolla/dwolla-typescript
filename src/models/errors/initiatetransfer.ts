/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as models from "../index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Forbidden
 */
export type InitiateTransferForbiddenDwollaV1HalJSON =
  | models.InvalidAttemptToFacilitateFundsError
  | models.InvalidAttemptToPayInFundsError
  | models.InvalidAttemptToPayOutFundsError
  | models.RtpAccountSettingNotEnabledError;

/**
 * Bad Request
 */
export type InitiateTransferBadRequestDwollaV1HalJSON =
  | models.SourceNotFoundError
  | models.ReceiverNotFoundError
  | models.InvalidSourceFundingSourceError
  | models.SenderRestrictedError
  | models.ReceiverRestrictedError
  | models.InvalidMetadataError
  | models.OperationBlockedError
  | models.InvalidAmountLimitError
  | models.CannotParseAmountError
  | models.InsufficientFundsError
  | models.FacilitatorFeeAccountNotFoundError
  | models.FacilitatorFeeSumTooLargeError
  | models.FacilitatorFeeBelowMinimumError
  | models.HighRiskError
  | models.IncompatibleHoldingsError
  | models.DirectAccountWithoutBankError
  | models.SourceSameAsDestinationError
  | models.InvalidFacilitatorError
  | models.InvalidFacilitatorFeeCollectFromError
  | models.InvalidFacilitatorFeeCollectFromCombinationError
  | models.InvalidDestinationFundingSourceError
  | models.InvalidFacilitatorFeeAmountError
  | models.WeeklyReceiveLimitReachedError
  | models.InvalidDestinationClearingTypeError
  | models.InvalidAmountForDestinationClearingTypeError
  | models.InvalidCorrelationIdError
  | models.SourceAddendaMaxLengthError
  | models.DestinationAddendaMaxLengthError
  | models.AchAddendaEntriesNotEnabledForAccountError
  | models.PointOfSaleAddendaEntriesNotEnabledForAccountError
  | models.IncompatibleAddendaEntriesError
  | models.InvalidPointOfSaleAddendaIdentificationCodeError
  | models.InvalidPointOfSaleAddendaSerialNumberError
  | models.InvalidPointOfSaleAddendaDateError
  | models.InvalidPointOfSaleAddendaAddressError
  | models.InvalidPointOfSaleAddendaCityError
  | models.InvalidPointOfSaleAddendaStateError
  | models.TransferExpiredForFeeError
  | models.InvalidFeeOdfiError
  | models.InvalidSourceBankAccountTypeError
  | models.InvalidDestinationBankAccountTypeError
  | models.IncompatibleSourceAndDestinationTypesError
  | models.IncompatibleSourceForRtpDestinationError
  | models.InvalidAmountForDestinationProcessingChannelError
  | models.RtpFacilitatorFeeNotSupportedError
  | models.RtpUnverifiedSenderNotSupportedError
  | models.RtpPersonalToPersonalNotSupportedError
  | models.DestinationProcessingChannelNotSupportedError
  | models.DestinationRemittanceDataMaxLengthError
  | models.WithdrawInvalidAmountError
  | models.WithdrawInvalidFundingSourceError
  | models.WithdrawAccountRestrictedError
  | models.WithdrawInvalidAmountForClearingTypeError
  | models.WithdrawInvalidWireBeneficiaryLocalityError
  | models.WithdrawInvalidWireBeneficiaryRegionError
  | models.WithdrawInvalidWireBeneficiaryCountryError
  | models.WithdrawInvalidWireOriginatorToBeneficiaryError
  | models.WithdrawProcessingChannelNotSupportedError
  | models.WithdrawRtpUnverifiedSenderNotSupportedError
  | models.WithdrawRtpPersonalWithdrawalNotSupportedError
  | models.DepositAccountRestrictedError
  | models.WireInvalidImadError
  | models.WireAccountRestrictedError
  | models.WireNotEnabledError
  | models.WireAccountNotFoundError;

/** @internal */
export const InitiateTransferForbiddenDwollaV1HalJSON$inboundSchema: z.ZodType<
  InitiateTransferForbiddenDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.InvalidAttemptToFacilitateFundsError$inboundSchema,
  models.InvalidAttemptToPayInFundsError$inboundSchema,
  models.InvalidAttemptToPayOutFundsError$inboundSchema,
  models.RtpAccountSettingNotEnabledError$inboundSchema,
]);

/** @internal */
export type InitiateTransferForbiddenDwollaV1HalJSON$Outbound =
  | models.InvalidAttemptToFacilitateFundsError$Outbound
  | models.InvalidAttemptToPayInFundsError$Outbound
  | models.InvalidAttemptToPayOutFundsError$Outbound
  | models.RtpAccountSettingNotEnabledError$Outbound;

/** @internal */
export const InitiateTransferForbiddenDwollaV1HalJSON$outboundSchema: z.ZodType<
  InitiateTransferForbiddenDwollaV1HalJSON$Outbound,
  z.ZodTypeDef,
  InitiateTransferForbiddenDwollaV1HalJSON
> = z.union([
  models.InvalidAttemptToFacilitateFundsError$outboundSchema,
  models.InvalidAttemptToPayInFundsError$outboundSchema,
  models.InvalidAttemptToPayOutFundsError$outboundSchema,
  models.RtpAccountSettingNotEnabledError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferForbiddenDwollaV1HalJSON$ {
  /** @deprecated use `InitiateTransferForbiddenDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    InitiateTransferForbiddenDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `InitiateTransferForbiddenDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    InitiateTransferForbiddenDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `InitiateTransferForbiddenDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = InitiateTransferForbiddenDwollaV1HalJSON$Outbound;
}

export function initiateTransferForbiddenDwollaV1HalJSONToJSON(
  initiateTransferForbiddenDwollaV1HalJSON:
    InitiateTransferForbiddenDwollaV1HalJSON,
): string {
  return JSON.stringify(
    InitiateTransferForbiddenDwollaV1HalJSON$outboundSchema.parse(
      initiateTransferForbiddenDwollaV1HalJSON,
    ),
  );
}

export function initiateTransferForbiddenDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  InitiateTransferForbiddenDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateTransferForbiddenDwollaV1HalJSON$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InitiateTransferForbiddenDwollaV1HalJSON' from JSON`,
  );
}

/** @internal */
export const InitiateTransferBadRequestDwollaV1HalJSON$inboundSchema: z.ZodType<
  InitiateTransferBadRequestDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.SourceNotFoundError$inboundSchema,
  models.ReceiverNotFoundError$inboundSchema,
  models.InvalidSourceFundingSourceError$inboundSchema,
  models.SenderRestrictedError$inboundSchema,
  models.ReceiverRestrictedError$inboundSchema,
  models.InvalidMetadataError$inboundSchema,
  models.OperationBlockedError$inboundSchema,
  models.InvalidAmountLimitError$inboundSchema,
  models.CannotParseAmountError$inboundSchema,
  models.InsufficientFundsError$inboundSchema,
  models.FacilitatorFeeAccountNotFoundError$inboundSchema,
  models.FacilitatorFeeSumTooLargeError$inboundSchema,
  models.FacilitatorFeeBelowMinimumError$inboundSchema,
  models.HighRiskError$inboundSchema,
  models.IncompatibleHoldingsError$inboundSchema,
  models.DirectAccountWithoutBankError$inboundSchema,
  models.SourceSameAsDestinationError$inboundSchema,
  models.InvalidFacilitatorError$inboundSchema,
  models.InvalidFacilitatorFeeCollectFromError$inboundSchema,
  models.InvalidFacilitatorFeeCollectFromCombinationError$inboundSchema,
  models.InvalidDestinationFundingSourceError$inboundSchema,
  models.InvalidFacilitatorFeeAmountError$inboundSchema,
  models.WeeklyReceiveLimitReachedError$inboundSchema,
  models.InvalidDestinationClearingTypeError$inboundSchema,
  models.InvalidAmountForDestinationClearingTypeError$inboundSchema,
  models.InvalidCorrelationIdError$inboundSchema,
  models.SourceAddendaMaxLengthError$inboundSchema,
  models.DestinationAddendaMaxLengthError$inboundSchema,
  models.AchAddendaEntriesNotEnabledForAccountError$inboundSchema,
  models.PointOfSaleAddendaEntriesNotEnabledForAccountError$inboundSchema,
  models.IncompatibleAddendaEntriesError$inboundSchema,
  models.InvalidPointOfSaleAddendaIdentificationCodeError$inboundSchema,
  models.InvalidPointOfSaleAddendaSerialNumberError$inboundSchema,
  models.InvalidPointOfSaleAddendaDateError$inboundSchema,
  models.InvalidPointOfSaleAddendaAddressError$inboundSchema,
  models.InvalidPointOfSaleAddendaCityError$inboundSchema,
  models.InvalidPointOfSaleAddendaStateError$inboundSchema,
  models.TransferExpiredForFeeError$inboundSchema,
  models.InvalidFeeOdfiError$inboundSchema,
  models.InvalidSourceBankAccountTypeError$inboundSchema,
  models.InvalidDestinationBankAccountTypeError$inboundSchema,
  models.IncompatibleSourceAndDestinationTypesError$inboundSchema,
  models.IncompatibleSourceForRtpDestinationError$inboundSchema,
  models.InvalidAmountForDestinationProcessingChannelError$inboundSchema,
  models.RtpFacilitatorFeeNotSupportedError$inboundSchema,
  models.RtpUnverifiedSenderNotSupportedError$inboundSchema,
  models.RtpPersonalToPersonalNotSupportedError$inboundSchema,
  models.DestinationProcessingChannelNotSupportedError$inboundSchema,
  models.DestinationRemittanceDataMaxLengthError$inboundSchema,
  models.WithdrawInvalidAmountError$inboundSchema,
  models.WithdrawInvalidFundingSourceError$inboundSchema,
  models.WithdrawAccountRestrictedError$inboundSchema,
  models.WithdrawInvalidAmountForClearingTypeError$inboundSchema,
  models.WithdrawInvalidWireBeneficiaryLocalityError$inboundSchema,
  models.WithdrawInvalidWireBeneficiaryRegionError$inboundSchema,
  models.WithdrawInvalidWireBeneficiaryCountryError$inboundSchema,
  models.WithdrawInvalidWireOriginatorToBeneficiaryError$inboundSchema,
  models.WithdrawProcessingChannelNotSupportedError$inboundSchema,
  models.WithdrawRtpUnverifiedSenderNotSupportedError$inboundSchema,
  models.WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema,
  models.DepositAccountRestrictedError$inboundSchema,
  models.WireInvalidImadError$inboundSchema,
  models.WireAccountRestrictedError$inboundSchema,
  models.WireNotEnabledError$inboundSchema,
  models.WireAccountNotFoundError$inboundSchema,
]);

/** @internal */
export type InitiateTransferBadRequestDwollaV1HalJSON$Outbound =
  | models.SourceNotFoundError$Outbound
  | models.ReceiverNotFoundError$Outbound
  | models.InvalidSourceFundingSourceError$Outbound
  | models.SenderRestrictedError$Outbound
  | models.ReceiverRestrictedError$Outbound
  | models.InvalidMetadataError$Outbound
  | models.OperationBlockedError$Outbound
  | models.InvalidAmountLimitError$Outbound
  | models.CannotParseAmountError$Outbound
  | models.InsufficientFundsError$Outbound
  | models.FacilitatorFeeAccountNotFoundError$Outbound
  | models.FacilitatorFeeSumTooLargeError$Outbound
  | models.FacilitatorFeeBelowMinimumError$Outbound
  | models.HighRiskError$Outbound
  | models.IncompatibleHoldingsError$Outbound
  | models.DirectAccountWithoutBankError$Outbound
  | models.SourceSameAsDestinationError$Outbound
  | models.InvalidFacilitatorError$Outbound
  | models.InvalidFacilitatorFeeCollectFromError$Outbound
  | models.InvalidFacilitatorFeeCollectFromCombinationError$Outbound
  | models.InvalidDestinationFundingSourceError$Outbound
  | models.InvalidFacilitatorFeeAmountError$Outbound
  | models.WeeklyReceiveLimitReachedError$Outbound
  | models.InvalidDestinationClearingTypeError$Outbound
  | models.InvalidAmountForDestinationClearingTypeError$Outbound
  | models.InvalidCorrelationIdError$Outbound
  | models.SourceAddendaMaxLengthError$Outbound
  | models.DestinationAddendaMaxLengthError$Outbound
  | models.AchAddendaEntriesNotEnabledForAccountError$Outbound
  | models.PointOfSaleAddendaEntriesNotEnabledForAccountError$Outbound
  | models.IncompatibleAddendaEntriesError$Outbound
  | models.InvalidPointOfSaleAddendaIdentificationCodeError$Outbound
  | models.InvalidPointOfSaleAddendaSerialNumberError$Outbound
  | models.InvalidPointOfSaleAddendaDateError$Outbound
  | models.InvalidPointOfSaleAddendaAddressError$Outbound
  | models.InvalidPointOfSaleAddendaCityError$Outbound
  | models.InvalidPointOfSaleAddendaStateError$Outbound
  | models.TransferExpiredForFeeError$Outbound
  | models.InvalidFeeOdfiError$Outbound
  | models.InvalidSourceBankAccountTypeError$Outbound
  | models.InvalidDestinationBankAccountTypeError$Outbound
  | models.IncompatibleSourceAndDestinationTypesError$Outbound
  | models.IncompatibleSourceForRtpDestinationError$Outbound
  | models.InvalidAmountForDestinationProcessingChannelError$Outbound
  | models.RtpFacilitatorFeeNotSupportedError$Outbound
  | models.RtpUnverifiedSenderNotSupportedError$Outbound
  | models.RtpPersonalToPersonalNotSupportedError$Outbound
  | models.DestinationProcessingChannelNotSupportedError$Outbound
  | models.DestinationRemittanceDataMaxLengthError$Outbound
  | models.WithdrawInvalidAmountError$Outbound
  | models.WithdrawInvalidFundingSourceError$Outbound
  | models.WithdrawAccountRestrictedError$Outbound
  | models.WithdrawInvalidAmountForClearingTypeError$Outbound
  | models.WithdrawInvalidWireBeneficiaryLocalityError$Outbound
  | models.WithdrawInvalidWireBeneficiaryRegionError$Outbound
  | models.WithdrawInvalidWireBeneficiaryCountryError$Outbound
  | models.WithdrawInvalidWireOriginatorToBeneficiaryError$Outbound
  | models.WithdrawProcessingChannelNotSupportedError$Outbound
  | models.WithdrawRtpUnverifiedSenderNotSupportedError$Outbound
  | models.WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound
  | models.DepositAccountRestrictedError$Outbound
  | models.WireInvalidImadError$Outbound
  | models.WireAccountRestrictedError$Outbound
  | models.WireNotEnabledError$Outbound
  | models.WireAccountNotFoundError$Outbound;

/** @internal */
export const InitiateTransferBadRequestDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    InitiateTransferBadRequestDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    InitiateTransferBadRequestDwollaV1HalJSON
  > = z.union([
    models.SourceNotFoundError$outboundSchema,
    models.ReceiverNotFoundError$outboundSchema,
    models.InvalidSourceFundingSourceError$outboundSchema,
    models.SenderRestrictedError$outboundSchema,
    models.ReceiverRestrictedError$outboundSchema,
    models.InvalidMetadataError$outboundSchema,
    models.OperationBlockedError$outboundSchema,
    models.InvalidAmountLimitError$outboundSchema,
    models.CannotParseAmountError$outboundSchema,
    models.InsufficientFundsError$outboundSchema,
    models.FacilitatorFeeAccountNotFoundError$outboundSchema,
    models.FacilitatorFeeSumTooLargeError$outboundSchema,
    models.FacilitatorFeeBelowMinimumError$outboundSchema,
    models.HighRiskError$outboundSchema,
    models.IncompatibleHoldingsError$outboundSchema,
    models.DirectAccountWithoutBankError$outboundSchema,
    models.SourceSameAsDestinationError$outboundSchema,
    models.InvalidFacilitatorError$outboundSchema,
    models.InvalidFacilitatorFeeCollectFromError$outboundSchema,
    models.InvalidFacilitatorFeeCollectFromCombinationError$outboundSchema,
    models.InvalidDestinationFundingSourceError$outboundSchema,
    models.InvalidFacilitatorFeeAmountError$outboundSchema,
    models.WeeklyReceiveLimitReachedError$outboundSchema,
    models.InvalidDestinationClearingTypeError$outboundSchema,
    models.InvalidAmountForDestinationClearingTypeError$outboundSchema,
    models.InvalidCorrelationIdError$outboundSchema,
    models.SourceAddendaMaxLengthError$outboundSchema,
    models.DestinationAddendaMaxLengthError$outboundSchema,
    models.AchAddendaEntriesNotEnabledForAccountError$outboundSchema,
    models.PointOfSaleAddendaEntriesNotEnabledForAccountError$outboundSchema,
    models.IncompatibleAddendaEntriesError$outboundSchema,
    models.InvalidPointOfSaleAddendaIdentificationCodeError$outboundSchema,
    models.InvalidPointOfSaleAddendaSerialNumberError$outboundSchema,
    models.InvalidPointOfSaleAddendaDateError$outboundSchema,
    models.InvalidPointOfSaleAddendaAddressError$outboundSchema,
    models.InvalidPointOfSaleAddendaCityError$outboundSchema,
    models.InvalidPointOfSaleAddendaStateError$outboundSchema,
    models.TransferExpiredForFeeError$outboundSchema,
    models.InvalidFeeOdfiError$outboundSchema,
    models.InvalidSourceBankAccountTypeError$outboundSchema,
    models.InvalidDestinationBankAccountTypeError$outboundSchema,
    models.IncompatibleSourceAndDestinationTypesError$outboundSchema,
    models.IncompatibleSourceForRtpDestinationError$outboundSchema,
    models.InvalidAmountForDestinationProcessingChannelError$outboundSchema,
    models.RtpFacilitatorFeeNotSupportedError$outboundSchema,
    models.RtpUnverifiedSenderNotSupportedError$outboundSchema,
    models.RtpPersonalToPersonalNotSupportedError$outboundSchema,
    models.DestinationProcessingChannelNotSupportedError$outboundSchema,
    models.DestinationRemittanceDataMaxLengthError$outboundSchema,
    models.WithdrawInvalidAmountError$outboundSchema,
    models.WithdrawInvalidFundingSourceError$outboundSchema,
    models.WithdrawAccountRestrictedError$outboundSchema,
    models.WithdrawInvalidAmountForClearingTypeError$outboundSchema,
    models.WithdrawInvalidWireBeneficiaryLocalityError$outboundSchema,
    models.WithdrawInvalidWireBeneficiaryRegionError$outboundSchema,
    models.WithdrawInvalidWireBeneficiaryCountryError$outboundSchema,
    models.WithdrawInvalidWireOriginatorToBeneficiaryError$outboundSchema,
    models.WithdrawProcessingChannelNotSupportedError$outboundSchema,
    models.WithdrawRtpUnverifiedSenderNotSupportedError$outboundSchema,
    models.WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema,
    models.DepositAccountRestrictedError$outboundSchema,
    models.WireInvalidImadError$outboundSchema,
    models.WireAccountRestrictedError$outboundSchema,
    models.WireNotEnabledError$outboundSchema,
    models.WireAccountNotFoundError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InitiateTransferBadRequestDwollaV1HalJSON$ {
  /** @deprecated use `InitiateTransferBadRequestDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    InitiateTransferBadRequestDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `InitiateTransferBadRequestDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    InitiateTransferBadRequestDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `InitiateTransferBadRequestDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = InitiateTransferBadRequestDwollaV1HalJSON$Outbound;
}

export function initiateTransferBadRequestDwollaV1HalJSONToJSON(
  initiateTransferBadRequestDwollaV1HalJSON:
    InitiateTransferBadRequestDwollaV1HalJSON,
): string {
  return JSON.stringify(
    InitiateTransferBadRequestDwollaV1HalJSON$outboundSchema.parse(
      initiateTransferBadRequestDwollaV1HalJSON,
    ),
  );
}

export function initiateTransferBadRequestDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  InitiateTransferBadRequestDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InitiateTransferBadRequestDwollaV1HalJSON$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InitiateTransferBadRequestDwollaV1HalJSON' from JSON`,
  );
}
