/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";

export type WithdrawRtpPersonalWithdrawalNotSupportedErrorData = {
  code: string;
  message: string;
  embedded?:
    | models.WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded
    | undefined;
};

export class WithdrawRtpPersonalWithdrawalNotSupportedError extends Error {
  code: string;
  embedded?:
    | models.WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: WithdrawRtpPersonalWithdrawalNotSupportedErrorData;

  constructor(err: WithdrawRtpPersonalWithdrawalNotSupportedErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;
    if (err.embedded != null) this.embedded = err.embedded;

    this.name = "WithdrawRtpPersonalWithdrawalNotSupportedError";
  }
}

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
    _embedded: z.lazy(() =>
      models
        .WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$inboundSchema
    ).optional(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "_embedded": "embedded",
      });

      return new WithdrawRtpPersonalWithdrawalNotSupportedError(remapped);
    });

/** @internal */
export type WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | models.WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema:
  z.ZodType<
    WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound,
    z.ZodTypeDef,
    WithdrawRtpPersonalWithdrawalNotSupportedError
  > = z.instanceof(WithdrawRtpPersonalWithdrawalNotSupportedError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        code: z.string(),
        message: z.string(),
        embedded: z.lazy(() =>
          models
            .WithdrawRtpPersonalWithdrawalNotSupportedErrorEmbedded$outboundSchema
        ).optional(),
      }).transform((v) => {
        return remap$(v, {
          embedded: "_embedded",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawRtpPersonalWithdrawalNotSupportedError$ {
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedError$inboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawRtpPersonalWithdrawalNotSupportedError$outboundSchema;
  /** @deprecated use `WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound` instead. */
  export type Outbound =
    WithdrawRtpPersonalWithdrawalNotSupportedError$Outbound;
}
