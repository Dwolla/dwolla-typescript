/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import * as operations from "../operations/index.js";
import { DwollaError } from "./dwollaerror.js";

/**
 * Funding source not found
 */
export type VerifyMicroDepositsNotFoundDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Funding source not found
 */
export class VerifyMicroDepositsNotFoundDwollaV1HalJSONError
  extends DwollaError
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VerifyMicroDepositsNotFoundDwollaV1HalJSONErrorData;

  constructor(
    err: VerifyMicroDepositsNotFoundDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "VerifyMicroDepositsNotFoundDwollaV1HalJSONError";
  }
}

/**
 * Forbidden - verification not allowed in current state
 */
export type VerifyMicroDepositsForbiddenDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Forbidden - verification not allowed in current state
 */
export class VerifyMicroDepositsForbiddenDwollaV1HalJSONError
  extends DwollaError
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: VerifyMicroDepositsForbiddenDwollaV1HalJSONErrorData;

  constructor(
    err: VerifyMicroDepositsForbiddenDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "VerifyMicroDepositsForbiddenDwollaV1HalJSONError";
  }
}

/**
 * Bad Request - invalid deposit amounts
 */
export type VerifyMicroDepositsBadRequestDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
  embedded?: operations.VerifyMicroDepositsEmbedded | undefined;
};

/**
 * Bad Request - invalid deposit amounts
 */
export class VerifyMicroDepositsBadRequestDwollaV1HalJSONError
  extends DwollaError
{
  code?: string | undefined;
  embedded?: operations.VerifyMicroDepositsEmbedded | undefined;

  /** The original data that was passed to this error instance. */
  data$: VerifyMicroDepositsBadRequestDwollaV1HalJSONErrorData;

  constructor(
    err: VerifyMicroDepositsBadRequestDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;
    if (err.embedded != null) this.embedded = err.embedded;

    this.name = "VerifyMicroDepositsBadRequestDwollaV1HalJSONError";
  }
}

/** @internal */
export const VerifyMicroDepositsNotFoundDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new VerifyMicroDepositsNotFoundDwollaV1HalJSONError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type VerifyMicroDepositsNotFoundDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const VerifyMicroDepositsNotFoundDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError
  > = z.instanceof(VerifyMicroDepositsNotFoundDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsNotFoundDwollaV1HalJSONError$ {
  /** @deprecated use `VerifyMicroDepositsNotFoundDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsNotFoundDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsNotFoundDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    VerifyMicroDepositsNotFoundDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const VerifyMicroDepositsForbiddenDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new VerifyMicroDepositsForbiddenDwollaV1HalJSONError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type VerifyMicroDepositsForbiddenDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const VerifyMicroDepositsForbiddenDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError
  > = z.instanceof(VerifyMicroDepositsForbiddenDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsForbiddenDwollaV1HalJSONError$ {
  /** @deprecated use `VerifyMicroDepositsForbiddenDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsForbiddenDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsForbiddenDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    VerifyMicroDepositsForbiddenDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const VerifyMicroDepositsBadRequestDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    _embedded: z.lazy(() =>
      operations.VerifyMicroDepositsEmbedded$inboundSchema
    ).optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      const remapped = remap$(v, {
        "_embedded": "embedded",
      });

      return new VerifyMicroDepositsBadRequestDwollaV1HalJSONError(remapped, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type VerifyMicroDepositsBadRequestDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  _embedded?: operations.VerifyMicroDepositsEmbedded$Outbound | undefined;
};

/** @internal */
export const VerifyMicroDepositsBadRequestDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError
  > = z.instanceof(VerifyMicroDepositsBadRequestDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        code: z.string().optional(),
        message: z.string().optional(),
        embedded: z.lazy(() =>
          operations.VerifyMicroDepositsEmbedded$outboundSchema
        ).optional(),
      }).transform((v) => {
        return remap$(v, {
          embedded: "_embedded",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerifyMicroDepositsBadRequestDwollaV1HalJSONError$ {
  /** @deprecated use `VerifyMicroDepositsBadRequestDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `VerifyMicroDepositsBadRequestDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `VerifyMicroDepositsBadRequestDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    VerifyMicroDepositsBadRequestDwollaV1HalJSONError$Outbound;
}
