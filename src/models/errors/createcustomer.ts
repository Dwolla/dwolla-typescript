/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DwollaError } from "./dwollaerror.js";

/**
 * not found
 */
export type CreateCustomerNotFoundDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * not found
 */
export class CreateCustomerNotFoundDwollaV1HalJSONError extends DwollaError {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerNotFoundDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerNotFoundDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerNotFoundDwollaV1HalJSONError";
  }
}

/**
 * forbidden
 */
export type CreateCustomerForbiddenDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * forbidden
 */
export class CreateCustomerForbiddenDwollaV1HalJSONError extends DwollaError {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerForbiddenDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerForbiddenDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerForbiddenDwollaV1HalJSONError";
  }
}

/** @internal */
export const CreateCustomerNotFoundDwollaV1HalJSONError$inboundSchema:
  z.ZodType<CreateCustomerNotFoundDwollaV1HalJSONError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string().optional(),
      message: z.string().optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new CreateCustomerNotFoundDwollaV1HalJSONError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type CreateCustomerNotFoundDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateCustomerNotFoundDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerNotFoundDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerNotFoundDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerNotFoundDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerNotFoundDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerNotFoundDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerNotFoundDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerNotFoundDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerNotFoundDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerNotFoundDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = CreateCustomerNotFoundDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerForbiddenDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerForbiddenDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    request$: z.instanceof(Request),
    response$: z.instanceof(Response),
    body$: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerForbiddenDwollaV1HalJSONError(v, {
        request: v.request$,
        response: v.response$,
        body: v.body$,
      });
    });

/** @internal */
export type CreateCustomerForbiddenDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateCustomerForbiddenDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerForbiddenDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerForbiddenDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerForbiddenDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerForbiddenDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerForbiddenDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerForbiddenDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerForbiddenDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerForbiddenDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerForbiddenDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = CreateCustomerForbiddenDwollaV1HalJSONError$Outbound;
}
