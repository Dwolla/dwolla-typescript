/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * not found
 */
export type ListAndSearchTransfersDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * not found
 */
export class ListAndSearchTransfersDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: ListAndSearchTransfersDwollaV1HalJSONErrorData;

  constructor(err: ListAndSearchTransfersDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "ListAndSearchTransfersDwollaV1HalJSONError";
  }
}

/** @internal */
export const ListAndSearchTransfersDwollaV1HalJSONError$inboundSchema:
  z.ZodType<ListAndSearchTransfersDwollaV1HalJSONError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    })
      .transform((v) => {
        return new ListAndSearchTransfersDwollaV1HalJSONError(v);
      });

/** @internal */
export type ListAndSearchTransfersDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const ListAndSearchTransfersDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    ListAndSearchTransfersDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    ListAndSearchTransfersDwollaV1HalJSONError
  > = z.instanceof(ListAndSearchTransfersDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAndSearchTransfersDwollaV1HalJSONError$ {
  /** @deprecated use `ListAndSearchTransfersDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    ListAndSearchTransfersDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `ListAndSearchTransfersDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    ListAndSearchTransfersDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `ListAndSearchTransfersDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = ListAndSearchTransfersDwollaV1HalJSONError$Outbound;
}
