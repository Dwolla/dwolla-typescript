/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { DwollaError } from "./dwollaerror.js";

/**
 * Invalid Scope
 */
export type CreateCustomerExchangeDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * Invalid Scope
 */
export class CreateCustomerExchangeDwollaV1HalJSONError extends DwollaError {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerExchangeDwollaV1HalJSONErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerExchangeDwollaV1HalJSONError";
  }
}

/** @internal */
export const CreateCustomerExchangeDwollaV1HalJSONError$inboundSchema:
  z.ZodType<CreateCustomerExchangeDwollaV1HalJSONError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string().optional(),
      message: z.string().optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        return new CreateCustomerExchangeDwollaV1HalJSONError(v, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type CreateCustomerExchangeDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateCustomerExchangeDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerExchangeDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerExchangeDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeDwollaV1HalJSONError$Outbound;
}
