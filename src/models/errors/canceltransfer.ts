/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as models from "../index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * 400 Bad Request
 */
export type CancelTransferDwollaV1HalJSON =
  | models.StatusInvalidError
  | models.StatusNotAllowedError
  | models.BadRequestError;

/** @internal */
export const CancelTransferDwollaV1HalJSON$inboundSchema: z.ZodType<
  CancelTransferDwollaV1HalJSON,
  z.ZodTypeDef,
  unknown
> = z.union([
  models.StatusInvalidError$inboundSchema,
  models.StatusNotAllowedError$inboundSchema,
  models.BadRequestError$inboundSchema,
]);

/** @internal */
export type CancelTransferDwollaV1HalJSON$Outbound =
  | models.StatusInvalidError$Outbound
  | models.StatusNotAllowedError$Outbound
  | models.BadRequestError$Outbound;

/** @internal */
export const CancelTransferDwollaV1HalJSON$outboundSchema: z.ZodType<
  CancelTransferDwollaV1HalJSON$Outbound,
  z.ZodTypeDef,
  CancelTransferDwollaV1HalJSON
> = z.union([
  models.StatusInvalidError$outboundSchema,
  models.StatusNotAllowedError$outboundSchema,
  models.BadRequestError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CancelTransferDwollaV1HalJSON$ {
  /** @deprecated use `CancelTransferDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema = CancelTransferDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CancelTransferDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema = CancelTransferDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CancelTransferDwollaV1HalJSON$Outbound` instead. */
  export type Outbound = CancelTransferDwollaV1HalJSON$Outbound;
}

export function cancelTransferDwollaV1HalJSONToJSON(
  cancelTransferDwollaV1HalJSON: CancelTransferDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CancelTransferDwollaV1HalJSON$outboundSchema.parse(
      cancelTransferDwollaV1HalJSON,
    ),
  );
}

export function cancelTransferDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<CancelTransferDwollaV1HalJSON, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CancelTransferDwollaV1HalJSON$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CancelTransferDwollaV1HalJSON' from JSON`,
  );
}
