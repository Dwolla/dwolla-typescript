/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import { DwollaError } from "./dwollaerror.js";

export type WithdrawInvalidWireBeneficiaryCountryErrorData = {
  code: string;
  message: string;
  embedded?:
    | models.WithdrawInvalidWireBeneficiaryCountryErrorEmbedded
    | undefined;
};

export class WithdrawInvalidWireBeneficiaryCountryError extends DwollaError {
  code: string;
  embedded?:
    | models.WithdrawInvalidWireBeneficiaryCountryErrorEmbedded
    | undefined;

  /** The original data that was passed to this error instance. */
  data$: WithdrawInvalidWireBeneficiaryCountryErrorData;

  constructor(
    err: WithdrawInvalidWireBeneficiaryCountryErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.code = err.code;
    if (err.embedded != null) this.embedded = err.embedded;

    this.name = "WithdrawInvalidWireBeneficiaryCountryError";
  }
}

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryError$inboundSchema:
  z.ZodType<WithdrawInvalidWireBeneficiaryCountryError, z.ZodTypeDef, unknown> =
    z.object({
      code: z.string(),
      message: z.string(),
      _embedded: z.lazy(() =>
        models.WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$inboundSchema
      ).optional(),
      request$: z.instanceof(Request),
      response$: z.instanceof(Response),
      body$: z.string(),
    })
      .transform((v) => {
        const remapped = remap$(v, {
          "_embedded": "embedded",
        });

        return new WithdrawInvalidWireBeneficiaryCountryError(remapped, {
          request: v.request$,
          response: v.response$,
          body: v.body$,
        });
      });

/** @internal */
export type WithdrawInvalidWireBeneficiaryCountryError$Outbound = {
  code: string;
  message: string;
  _embedded?:
    | models.WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$Outbound
    | undefined;
};

/** @internal */
export const WithdrawInvalidWireBeneficiaryCountryError$outboundSchema:
  z.ZodType<
    WithdrawInvalidWireBeneficiaryCountryError$Outbound,
    z.ZodTypeDef,
    WithdrawInvalidWireBeneficiaryCountryError
  > = z.instanceof(WithdrawInvalidWireBeneficiaryCountryError)
    .transform(v => v.data$)
    .pipe(
      z.object({
        code: z.string(),
        message: z.string(),
        embedded: z.lazy(() =>
          models
            .WithdrawInvalidWireBeneficiaryCountryErrorEmbedded$outboundSchema
        ).optional(),
      }).transform((v) => {
        return remap$(v, {
          embedded: "_embedded",
        });
      }),
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithdrawInvalidWireBeneficiaryCountryError$ {
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryError$inboundSchema` instead. */
  export const inboundSchema =
    WithdrawInvalidWireBeneficiaryCountryError$inboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryError$outboundSchema` instead. */
  export const outboundSchema =
    WithdrawInvalidWireBeneficiaryCountryError$outboundSchema;
  /** @deprecated use `WithdrawInvalidWireBeneficiaryCountryError$Outbound` instead. */
  export type Outbound = WithdrawInvalidWireBeneficiaryCountryError$Outbound;
}
