/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as operations from "../operations/index.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * not found
 */
export type CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * not found
 */
export class CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError
  extends Error
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError";
  }
}

/**
 * forbidden
 */
export type CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON =
  | operations.ResponseBodyForbidden1
  | operations.ResponseBodyForbidden2;

/**
 * unauthorized
 */
export type CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONErrorData =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/**
 * unauthorized
 */
export class CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError
  extends Error
{
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONErrorData;

  constructor(
    err: CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONErrorData,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError";
  }
}

/**
 * validation error
 */
export type CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON =
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest1
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest2
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest3;

/** @internal */
export const CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError(v);
    });

/** @internal */
export type CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$Outbound =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/** @internal */
export const CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionNotFoundDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => operations.ResponseBodyForbidden1$inboundSchema),
    z.lazy(() => operations.ResponseBodyForbidden2$inboundSchema),
  ]);

/** @internal */
export type CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound =
  | operations.ResponseBodyForbidden1$Outbound
  | operations.ResponseBodyForbidden2$Outbound;

/** @internal */
export const CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON
  > = z.union([
    z.lazy(() => operations.ResponseBodyForbidden1$outboundSchema),
    z.lazy(() => operations.ResponseBodyForbidden2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$ {
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound;
}

export function createCustomerExchangeSessionForbiddenDwollaV1HalJSONToJSON(
  createCustomerExchangeSessionForbiddenDwollaV1HalJSON:
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema.parse(
      createCustomerExchangeSessionForbiddenDwollaV1HalJSON,
    ),
  );
}

export function createCustomerExchangeSessionForbiddenDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError(
        v,
      );
    });

/** @internal */
export type CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$Outbound =
  {
    code?: string | undefined;
    message?: string | undefined;
  };

/** @internal */
export const CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError
  > = z.instanceof(
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError,
  )
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionUnauthorizedDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest1$inboundSchema
    ),
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest2$inboundSchema
    ),
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest3$inboundSchema
    ),
  ]);

/** @internal */
export type CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound =
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest1$Outbound
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest2$Outbound
  | operations.CreateCustomerExchangeSessionResponseBodyBadRequest3$Outbound;

/** @internal */
export const CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON
  > = z.union([
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest1$outboundSchema
    ),
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest2$outboundSchema
    ),
    z.lazy(() =>
      operations
        .CreateCustomerExchangeSessionResponseBodyBadRequest3$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$ {
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound;
}

export function createCustomerExchangeSessionBadRequestDwollaV1HalJSONToJSON(
  createCustomerExchangeSessionBadRequestDwollaV1HalJSON:
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema.parse(
      createCustomerExchangeSessionBadRequestDwollaV1HalJSON,
    ),
  );
}

export function createCustomerExchangeSessionBadRequestDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON' from JSON`,
  );
}
