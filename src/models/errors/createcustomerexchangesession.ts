/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ResponseBodyForbiddenError2Data = {
  code: string;
  message: string;
};

export class ResponseBodyForbiddenError2 extends Error {
  code: string;

  /** The original data that was passed to this error instance. */
  data$: ResponseBodyForbiddenError2Data;

  constructor(err: ResponseBodyForbiddenError2Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "ResponseBodyForbiddenError2";
  }
}

export type ResponseBodyForbiddenError1Data = {
  code: string;
  message: string;
};

export class ResponseBodyForbiddenError1 extends Error {
  code: string;

  /** The original data that was passed to this error instance. */
  data$: ResponseBodyForbiddenError1Data;

  constructor(err: ResponseBodyForbiddenError1Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "ResponseBodyForbiddenError1";
  }
}

/**
 * forbidden
 */
export type CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON =
  | ResponseBodyForbiddenError1
  | ResponseBodyForbiddenError2;

/**
 * unauthorized
 */
export type CreateCustomerExchangeSessionDwollaV1HalJSONErrorData = {
  code?: string | undefined;
  message?: string | undefined;
};

/**
 * unauthorized
 */
export class CreateCustomerExchangeSessionDwollaV1HalJSONError extends Error {
  code?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionDwollaV1HalJSONErrorData;

  constructor(err: CreateCustomerExchangeSessionDwollaV1HalJSONErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.code != null) this.code = err.code;

    this.name = "CreateCustomerExchangeSessionDwollaV1HalJSONError";
  }
}

export type CreateCustomerExchangeSessionResponseBodyBadRequestError3Data = {
  code: string;
  message: string;
};

export class CreateCustomerExchangeSessionResponseBodyBadRequestError3
  extends Error
{
  code: string;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionResponseBodyBadRequestError3Data;

  constructor(
    err: CreateCustomerExchangeSessionResponseBodyBadRequestError3Data,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "CreateCustomerExchangeSessionResponseBodyBadRequestError3";
  }
}

export type CreateCustomerExchangeSessionResponseBodyBadRequestError2Data = {
  code: string;
  message: string;
};

export class CreateCustomerExchangeSessionResponseBodyBadRequestError2
  extends Error
{
  code: string;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionResponseBodyBadRequestError2Data;

  constructor(
    err: CreateCustomerExchangeSessionResponseBodyBadRequestError2Data,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "CreateCustomerExchangeSessionResponseBodyBadRequestError2";
  }
}

export type CreateCustomerExchangeSessionResponseBodyBadRequestError1Data = {
  code: string;
  message: string;
};

export class CreateCustomerExchangeSessionResponseBodyBadRequestError1
  extends Error
{
  code: string;

  /** The original data that was passed to this error instance. */
  data$: CreateCustomerExchangeSessionResponseBodyBadRequestError1Data;

  constructor(
    err: CreateCustomerExchangeSessionResponseBodyBadRequestError1Data,
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    this.code = err.code;

    this.name = "CreateCustomerExchangeSessionResponseBodyBadRequestError1";
  }
}

/**
 * validation error
 */
export type CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON =
  | CreateCustomerExchangeSessionResponseBodyBadRequestError1
  | CreateCustomerExchangeSessionResponseBodyBadRequestError2
  | CreateCustomerExchangeSessionResponseBodyBadRequestError3;

/** @internal */
export const ResponseBodyForbiddenError2$inboundSchema: z.ZodType<
  ResponseBodyForbiddenError2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
})
  .transform((v) => {
    return new ResponseBodyForbiddenError2(v);
  });

/** @internal */
export type ResponseBodyForbiddenError2$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponseBodyForbiddenError2$outboundSchema: z.ZodType<
  ResponseBodyForbiddenError2$Outbound,
  z.ZodTypeDef,
  ResponseBodyForbiddenError2
> = z.instanceof(ResponseBodyForbiddenError2)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string(),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyForbiddenError2$ {
  /** @deprecated use `ResponseBodyForbiddenError2$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyForbiddenError2$inboundSchema;
  /** @deprecated use `ResponseBodyForbiddenError2$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyForbiddenError2$outboundSchema;
  /** @deprecated use `ResponseBodyForbiddenError2$Outbound` instead. */
  export type Outbound = ResponseBodyForbiddenError2$Outbound;
}

/** @internal */
export const ResponseBodyForbiddenError1$inboundSchema: z.ZodType<
  ResponseBodyForbiddenError1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
})
  .transform((v) => {
    return new ResponseBodyForbiddenError1(v);
  });

/** @internal */
export type ResponseBodyForbiddenError1$Outbound = {
  code: string;
  message: string;
};

/** @internal */
export const ResponseBodyForbiddenError1$outboundSchema: z.ZodType<
  ResponseBodyForbiddenError1$Outbound,
  z.ZodTypeDef,
  ResponseBodyForbiddenError1
> = z.instanceof(ResponseBodyForbiddenError1)
  .transform(v => v.data$)
  .pipe(z.object({
    code: z.string(),
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyForbiddenError1$ {
  /** @deprecated use `ResponseBodyForbiddenError1$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyForbiddenError1$inboundSchema;
  /** @deprecated use `ResponseBodyForbiddenError1$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyForbiddenError1$outboundSchema;
  /** @deprecated use `ResponseBodyForbiddenError1$Outbound` instead. */
  export type Outbound = ResponseBodyForbiddenError1$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => ResponseBodyForbiddenError1$inboundSchema),
    z.lazy(() => ResponseBodyForbiddenError2$inboundSchema),
  ]);

/** @internal */
export type CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound =
  | ResponseBodyForbiddenError1$Outbound
  | ResponseBodyForbiddenError2$Outbound;

/** @internal */
export const CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON
  > = z.union([
    z.lazy(() => ResponseBodyForbiddenError1$outboundSchema),
    z.lazy(() => ResponseBodyForbiddenError2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$ {
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$Outbound;
}

export function createCustomerExchangeSessionForbiddenDwollaV1HalJSONToJSON(
  createCustomerExchangeSessionForbiddenDwollaV1HalJSON:
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$outboundSchema.parse(
      createCustomerExchangeSessionForbiddenDwollaV1HalJSON,
    ),
  );
}

export function createCustomerExchangeSessionForbiddenDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeSessionForbiddenDwollaV1HalJSON' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeSessionDwollaV1HalJSONError$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionDwollaV1HalJSONError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionDwollaV1HalJSONError(v);
    });

/** @internal */
export type CreateCustomerExchangeSessionDwollaV1HalJSONError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const CreateCustomerExchangeSessionDwollaV1HalJSONError$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionDwollaV1HalJSONError$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionDwollaV1HalJSONError
  > = z.instanceof(CreateCustomerExchangeSessionDwollaV1HalJSONError)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string().optional(),
      message: z.string().optional(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionDwollaV1HalJSONError$ {
  /** @deprecated use `CreateCustomerExchangeSessionDwollaV1HalJSONError$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionDwollaV1HalJSONError$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionDwollaV1HalJSONError$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionDwollaV1HalJSONError$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionDwollaV1HalJSONError$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionDwollaV1HalJSONError$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError3$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionResponseBodyBadRequestError3(v);
    });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequestError3$Outbound =
  {
    code: string;
    message: string;
  };

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError3$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError3$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequestError3
  > = z.instanceof(CreateCustomerExchangeSessionResponseBodyBadRequestError3)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string(),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequestError3$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError3$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError3$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError3$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError3$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError3$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequestError3$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError2$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionResponseBodyBadRequestError2(v);
    });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequestError2$Outbound =
  {
    code: string;
    message: string;
  };

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError2$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError2$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequestError2
  > = z.instanceof(CreateCustomerExchangeSessionResponseBodyBadRequestError2)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string(),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequestError2$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError2$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError2$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError2$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequestError2$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError1$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  })
    .transform((v) => {
      return new CreateCustomerExchangeSessionResponseBodyBadRequestError1(v);
    });

/** @internal */
export type CreateCustomerExchangeSessionResponseBodyBadRequestError1$Outbound =
  {
    code: string;
    message: string;
  };

/** @internal */
export const CreateCustomerExchangeSessionResponseBodyBadRequestError1$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequestError1$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionResponseBodyBadRequestError1
  > = z.instanceof(CreateCustomerExchangeSessionResponseBodyBadRequestError1)
    .transform(v => v.data$)
    .pipe(z.object({
      code: z.string(),
      message: z.string(),
    }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionResponseBodyBadRequestError1$ {
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError1$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionResponseBodyBadRequestError1$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionResponseBodyBadRequestError1$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionResponseBodyBadRequestError1$Outbound;
}

/** @internal */
export const CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError1$inboundSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError2$inboundSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError3$inboundSchema
    ),
  ]);

/** @internal */
export type CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound =
  | CreateCustomerExchangeSessionResponseBodyBadRequestError1$Outbound
  | CreateCustomerExchangeSessionResponseBodyBadRequestError2$Outbound
  | CreateCustomerExchangeSessionResponseBodyBadRequestError3$Outbound;

/** @internal */
export const CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON
  > = z.union([
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError1$outboundSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError2$outboundSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequestError3$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$ {
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$Outbound;
}

export function createCustomerExchangeSessionBadRequestDwollaV1HalJSONToJSON(
  createCustomerExchangeSessionBadRequestDwollaV1HalJSON:
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
): string {
  return JSON.stringify(
    CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$outboundSchema.parse(
      createCustomerExchangeSessionBadRequestDwollaV1HalJSON,
    ),
  );
}

export function createCustomerExchangeSessionBadRequestDwollaV1HalJSONFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeSessionBadRequestDwollaV1HalJSON' from JSON`,
  );
}
