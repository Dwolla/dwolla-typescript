/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TransferExpiredForFeeErrorLinks = {};

export type TransferExpiredForFeeErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: TransferExpiredForFeeErrorLinks | undefined;
};

export type TransferExpiredForFeeErrorEmbedded = {
  errors?: Array<TransferExpiredForFeeErrorError> | undefined;
};

export type TransferExpiredForFeeError = {
  code: string;
  message: string;
  embedded?: TransferExpiredForFeeErrorEmbedded | undefined;
};

/** @internal */
export const TransferExpiredForFeeErrorLinks$inboundSchema: z.ZodType<
  TransferExpiredForFeeErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TransferExpiredForFeeErrorLinks$Outbound = {};

/** @internal */
export const TransferExpiredForFeeErrorLinks$outboundSchema: z.ZodType<
  TransferExpiredForFeeErrorLinks$Outbound,
  z.ZodTypeDef,
  TransferExpiredForFeeErrorLinks
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferExpiredForFeeErrorLinks$ {
  /** @deprecated use `TransferExpiredForFeeErrorLinks$inboundSchema` instead. */
  export const inboundSchema = TransferExpiredForFeeErrorLinks$inboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorLinks$outboundSchema` instead. */
  export const outboundSchema = TransferExpiredForFeeErrorLinks$outboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorLinks$Outbound` instead. */
  export type Outbound = TransferExpiredForFeeErrorLinks$Outbound;
}

export function transferExpiredForFeeErrorLinksToJSON(
  transferExpiredForFeeErrorLinks: TransferExpiredForFeeErrorLinks,
): string {
  return JSON.stringify(
    TransferExpiredForFeeErrorLinks$outboundSchema.parse(
      transferExpiredForFeeErrorLinks,
    ),
  );
}

export function transferExpiredForFeeErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<TransferExpiredForFeeErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferExpiredForFeeErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferExpiredForFeeErrorLinks' from JSON`,
  );
}

/** @internal */
export const TransferExpiredForFeeErrorError$inboundSchema: z.ZodType<
  TransferExpiredForFeeErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => TransferExpiredForFeeErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type TransferExpiredForFeeErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: TransferExpiredForFeeErrorLinks$Outbound | undefined;
};

/** @internal */
export const TransferExpiredForFeeErrorError$outboundSchema: z.ZodType<
  TransferExpiredForFeeErrorError$Outbound,
  z.ZodTypeDef,
  TransferExpiredForFeeErrorError
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  links: z.lazy(() => TransferExpiredForFeeErrorLinks$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferExpiredForFeeErrorError$ {
  /** @deprecated use `TransferExpiredForFeeErrorError$inboundSchema` instead. */
  export const inboundSchema = TransferExpiredForFeeErrorError$inboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorError$outboundSchema` instead. */
  export const outboundSchema = TransferExpiredForFeeErrorError$outboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorError$Outbound` instead. */
  export type Outbound = TransferExpiredForFeeErrorError$Outbound;
}

export function transferExpiredForFeeErrorErrorToJSON(
  transferExpiredForFeeErrorError: TransferExpiredForFeeErrorError,
): string {
  return JSON.stringify(
    TransferExpiredForFeeErrorError$outboundSchema.parse(
      transferExpiredForFeeErrorError,
    ),
  );
}

export function transferExpiredForFeeErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<TransferExpiredForFeeErrorError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferExpiredForFeeErrorError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferExpiredForFeeErrorError' from JSON`,
  );
}

/** @internal */
export const TransferExpiredForFeeErrorEmbedded$inboundSchema: z.ZodType<
  TransferExpiredForFeeErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => TransferExpiredForFeeErrorError$inboundSchema))
    .optional(),
});

/** @internal */
export type TransferExpiredForFeeErrorEmbedded$Outbound = {
  errors?: Array<TransferExpiredForFeeErrorError$Outbound> | undefined;
};

/** @internal */
export const TransferExpiredForFeeErrorEmbedded$outboundSchema: z.ZodType<
  TransferExpiredForFeeErrorEmbedded$Outbound,
  z.ZodTypeDef,
  TransferExpiredForFeeErrorEmbedded
> = z.object({
  errors: z.array(z.lazy(() => TransferExpiredForFeeErrorError$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferExpiredForFeeErrorEmbedded$ {
  /** @deprecated use `TransferExpiredForFeeErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema = TransferExpiredForFeeErrorEmbedded$inboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    TransferExpiredForFeeErrorEmbedded$outboundSchema;
  /** @deprecated use `TransferExpiredForFeeErrorEmbedded$Outbound` instead. */
  export type Outbound = TransferExpiredForFeeErrorEmbedded$Outbound;
}

export function transferExpiredForFeeErrorEmbeddedToJSON(
  transferExpiredForFeeErrorEmbedded: TransferExpiredForFeeErrorEmbedded,
): string {
  return JSON.stringify(
    TransferExpiredForFeeErrorEmbedded$outboundSchema.parse(
      transferExpiredForFeeErrorEmbedded,
    ),
  );
}

export function transferExpiredForFeeErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<TransferExpiredForFeeErrorEmbedded, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransferExpiredForFeeErrorEmbedded$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferExpiredForFeeErrorEmbedded' from JSON`,
  );
}

/** @internal */
export const TransferExpiredForFeeError$inboundSchema: z.ZodType<
  TransferExpiredForFeeError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  _embedded: z.lazy(() => TransferExpiredForFeeErrorEmbedded$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_embedded": "embedded",
  });
});

/** @internal */
export type TransferExpiredForFeeError$Outbound = {
  code: string;
  message: string;
  _embedded?: TransferExpiredForFeeErrorEmbedded$Outbound | undefined;
};

/** @internal */
export const TransferExpiredForFeeError$outboundSchema: z.ZodType<
  TransferExpiredForFeeError$Outbound,
  z.ZodTypeDef,
  TransferExpiredForFeeError
> = z.object({
  code: z.string(),
  message: z.string(),
  embedded: z.lazy(() => TransferExpiredForFeeErrorEmbedded$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    embedded: "_embedded",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferExpiredForFeeError$ {
  /** @deprecated use `TransferExpiredForFeeError$inboundSchema` instead. */
  export const inboundSchema = TransferExpiredForFeeError$inboundSchema;
  /** @deprecated use `TransferExpiredForFeeError$outboundSchema` instead. */
  export const outboundSchema = TransferExpiredForFeeError$outboundSchema;
  /** @deprecated use `TransferExpiredForFeeError$Outbound` instead. */
  export type Outbound = TransferExpiredForFeeError$Outbound;
}

export function transferExpiredForFeeErrorToJSON(
  transferExpiredForFeeError: TransferExpiredForFeeError,
): string {
  return JSON.stringify(
    TransferExpiredForFeeError$outboundSchema.parse(transferExpiredForFeeError),
  );
}

export function transferExpiredForFeeErrorFromJSON(
  jsonString: string,
): SafeParseResult<TransferExpiredForFeeError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferExpiredForFeeError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferExpiredForFeeError' from JSON`,
  );
}
