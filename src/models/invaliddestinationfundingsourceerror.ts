/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type InvalidDestinationFundingSourceErrorLinks = {};

export type InvalidDestinationFundingSourceErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  links?: InvalidDestinationFundingSourceErrorLinks | undefined;
};

export type InvalidDestinationFundingSourceErrorEmbedded = {
  errors?: Array<InvalidDestinationFundingSourceErrorError> | undefined;
};

/** @internal */
export const InvalidDestinationFundingSourceErrorLinks$inboundSchema: z.ZodType<
  InvalidDestinationFundingSourceErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type InvalidDestinationFundingSourceErrorLinks$Outbound = {};

/** @internal */
export const InvalidDestinationFundingSourceErrorLinks$outboundSchema:
  z.ZodType<
    InvalidDestinationFundingSourceErrorLinks$Outbound,
    z.ZodTypeDef,
    InvalidDestinationFundingSourceErrorLinks
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationFundingSourceErrorLinks$ {
  /** @deprecated use `InvalidDestinationFundingSourceErrorLinks$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationFundingSourceErrorLinks$inboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorLinks$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationFundingSourceErrorLinks$outboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorLinks$Outbound` instead. */
  export type Outbound = InvalidDestinationFundingSourceErrorLinks$Outbound;
}

export function invalidDestinationFundingSourceErrorLinksToJSON(
  invalidDestinationFundingSourceErrorLinks:
    InvalidDestinationFundingSourceErrorLinks,
): string {
  return JSON.stringify(
    InvalidDestinationFundingSourceErrorLinks$outboundSchema.parse(
      invalidDestinationFundingSourceErrorLinks,
    ),
  );
}

export function invalidDestinationFundingSourceErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationFundingSourceErrorLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationFundingSourceErrorLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationFundingSourceErrorLinks' from JSON`,
  );
}

/** @internal */
export const InvalidDestinationFundingSourceErrorError$inboundSchema: z.ZodType<
  InvalidDestinationFundingSourceErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
  _links: z.lazy(() => InvalidDestinationFundingSourceErrorLinks$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type InvalidDestinationFundingSourceErrorError$Outbound = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidDestinationFundingSourceErrorLinks$Outbound | undefined;
};

/** @internal */
export const InvalidDestinationFundingSourceErrorError$outboundSchema:
  z.ZodType<
    InvalidDestinationFundingSourceErrorError$Outbound,
    z.ZodTypeDef,
    InvalidDestinationFundingSourceErrorError
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
    links: z.lazy(() =>
      InvalidDestinationFundingSourceErrorLinks$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      links: "_links",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationFundingSourceErrorError$ {
  /** @deprecated use `InvalidDestinationFundingSourceErrorError$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationFundingSourceErrorError$inboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorError$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationFundingSourceErrorError$outboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorError$Outbound` instead. */
  export type Outbound = InvalidDestinationFundingSourceErrorError$Outbound;
}

export function invalidDestinationFundingSourceErrorErrorToJSON(
  invalidDestinationFundingSourceErrorError:
    InvalidDestinationFundingSourceErrorError,
): string {
  return JSON.stringify(
    InvalidDestinationFundingSourceErrorError$outboundSchema.parse(
      invalidDestinationFundingSourceErrorError,
    ),
  );
}

export function invalidDestinationFundingSourceErrorErrorFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationFundingSourceErrorError,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationFundingSourceErrorError$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationFundingSourceErrorError' from JSON`,
  );
}

/** @internal */
export const InvalidDestinationFundingSourceErrorEmbedded$inboundSchema:
  z.ZodType<
    InvalidDestinationFundingSourceErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidDestinationFundingSourceErrorError$inboundSchema),
    ).optional(),
  });

/** @internal */
export type InvalidDestinationFundingSourceErrorEmbedded$Outbound = {
  errors?:
    | Array<InvalidDestinationFundingSourceErrorError$Outbound>
    | undefined;
};

/** @internal */
export const InvalidDestinationFundingSourceErrorEmbedded$outboundSchema:
  z.ZodType<
    InvalidDestinationFundingSourceErrorEmbedded$Outbound,
    z.ZodTypeDef,
    InvalidDestinationFundingSourceErrorEmbedded
  > = z.object({
    errors: z.array(
      z.lazy(() => InvalidDestinationFundingSourceErrorError$outboundSchema),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidDestinationFundingSourceErrorEmbedded$ {
  /** @deprecated use `InvalidDestinationFundingSourceErrorEmbedded$inboundSchema` instead. */
  export const inboundSchema =
    InvalidDestinationFundingSourceErrorEmbedded$inboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorEmbedded$outboundSchema` instead. */
  export const outboundSchema =
    InvalidDestinationFundingSourceErrorEmbedded$outboundSchema;
  /** @deprecated use `InvalidDestinationFundingSourceErrorEmbedded$Outbound` instead. */
  export type Outbound = InvalidDestinationFundingSourceErrorEmbedded$Outbound;
}

export function invalidDestinationFundingSourceErrorEmbeddedToJSON(
  invalidDestinationFundingSourceErrorEmbedded:
    InvalidDestinationFundingSourceErrorEmbedded,
): string {
  return JSON.stringify(
    InvalidDestinationFundingSourceErrorEmbedded$outboundSchema.parse(
      invalidDestinationFundingSourceErrorEmbedded,
    ),
  );
}

export function invalidDestinationFundingSourceErrorEmbeddedFromJSON(
  jsonString: string,
): SafeParseResult<
  InvalidDestinationFundingSourceErrorEmbedded,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      InvalidDestinationFundingSourceErrorEmbedded$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'InvalidDestinationFundingSourceErrorEmbedded' from JSON`,
  );
}
