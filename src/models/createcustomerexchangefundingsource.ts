/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type CreateCustomerExchangeFundingSourceExchange = {
  href: string;
};

export type CreateCustomerExchangeFundingSourceOnDemandAuthorization = {
  href: string;
};

export type CreateCustomerExchangeFundingSourceLinks = {
  exchange: CreateCustomerExchangeFundingSourceExchange;
  onDemandAuthorization?:
    | CreateCustomerExchangeFundingSourceOnDemandAuthorization
    | undefined;
};

/**
 * Type of bank account
 */
export const CreateCustomerExchangeFundingSourceBankAccountType = {
  Checking: "checking",
  Savings: "savings",
} as const;
/**
 * Type of bank account
 */
export type CreateCustomerExchangeFundingSourceBankAccountType = ClosedEnum<
  typeof CreateCustomerExchangeFundingSourceBankAccountType
>;

/**
 * Schema for creating a funding source using an exchange resource. This method is used when the bank account information is obtained via Instant Account Verification (IAV) through an exchange partner (like Plaid, MX, or Finicity).
 */
export type CreateCustomerExchangeFundingSource = {
  links: CreateCustomerExchangeFundingSourceLinks;
  /**
   * Type of bank account
   */
  bankAccountType: CreateCustomerExchangeFundingSourceBankAccountType;
  /**
   * Arbitrary nickname for the funding source. Must be 50 characters or less.
   */
  name: string;
};

/** @internal */
export const CreateCustomerExchangeFundingSourceExchange$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeFundingSourceExchange,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeFundingSourceExchange$Outbound = {
  href: string;
};

/** @internal */
export const CreateCustomerExchangeFundingSourceExchange$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeFundingSourceExchange$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeFundingSourceExchange
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeFundingSourceExchange$ {
  /** @deprecated use `CreateCustomerExchangeFundingSourceExchange$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeFundingSourceExchange$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceExchange$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeFundingSourceExchange$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceExchange$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeFundingSourceExchange$Outbound;
}

export function createCustomerExchangeFundingSourceExchangeToJSON(
  createCustomerExchangeFundingSourceExchange:
    CreateCustomerExchangeFundingSourceExchange,
): string {
  return JSON.stringify(
    CreateCustomerExchangeFundingSourceExchange$outboundSchema.parse(
      createCustomerExchangeFundingSourceExchange,
    ),
  );
}

export function createCustomerExchangeFundingSourceExchangeFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeFundingSourceExchange,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeFundingSourceExchange$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeFundingSourceExchange' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeFundingSourceOnDemandAuthorization$inboundSchema:
  z.ZodType<
    CreateCustomerExchangeFundingSourceOnDemandAuthorization,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

/** @internal */
export type CreateCustomerExchangeFundingSourceOnDemandAuthorization$Outbound =
  {
    href: string;
  };

/** @internal */
export const CreateCustomerExchangeFundingSourceOnDemandAuthorization$outboundSchema:
  z.ZodType<
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$Outbound,
    z.ZodTypeDef,
    CreateCustomerExchangeFundingSourceOnDemandAuthorization
  > = z.object({
    href: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeFundingSourceOnDemandAuthorization$ {
  /** @deprecated use `CreateCustomerExchangeFundingSourceOnDemandAuthorization$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceOnDemandAuthorization$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceOnDemandAuthorization$Outbound` instead. */
  export type Outbound =
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$Outbound;
}

export function createCustomerExchangeFundingSourceOnDemandAuthorizationToJSON(
  createCustomerExchangeFundingSourceOnDemandAuthorization:
    CreateCustomerExchangeFundingSourceOnDemandAuthorization,
): string {
  return JSON.stringify(
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$outboundSchema
      .parse(createCustomerExchangeFundingSourceOnDemandAuthorization),
  );
}

export function createCustomerExchangeFundingSourceOnDemandAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeFundingSourceOnDemandAuthorization,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeFundingSourceOnDemandAuthorization$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeFundingSourceOnDemandAuthorization' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeFundingSourceLinks$inboundSchema: z.ZodType<
  CreateCustomerExchangeFundingSourceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  exchange: z.lazy(() =>
    CreateCustomerExchangeFundingSourceExchange$inboundSchema
  ),
  "on-demand-authorization": z.lazy(() =>
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "on-demand-authorization": "onDemandAuthorization",
  });
});

/** @internal */
export type CreateCustomerExchangeFundingSourceLinks$Outbound = {
  exchange: CreateCustomerExchangeFundingSourceExchange$Outbound;
  "on-demand-authorization"?:
    | CreateCustomerExchangeFundingSourceOnDemandAuthorization$Outbound
    | undefined;
};

/** @internal */
export const CreateCustomerExchangeFundingSourceLinks$outboundSchema: z.ZodType<
  CreateCustomerExchangeFundingSourceLinks$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeFundingSourceLinks
> = z.object({
  exchange: z.lazy(() =>
    CreateCustomerExchangeFundingSourceExchange$outboundSchema
  ),
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerExchangeFundingSourceOnDemandAuthorization$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    onDemandAuthorization: "on-demand-authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeFundingSourceLinks$ {
  /** @deprecated use `CreateCustomerExchangeFundingSourceLinks$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeFundingSourceLinks$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceLinks$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeFundingSourceLinks$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceLinks$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeFundingSourceLinks$Outbound;
}

export function createCustomerExchangeFundingSourceLinksToJSON(
  createCustomerExchangeFundingSourceLinks:
    CreateCustomerExchangeFundingSourceLinks,
): string {
  return JSON.stringify(
    CreateCustomerExchangeFundingSourceLinks$outboundSchema.parse(
      createCustomerExchangeFundingSourceLinks,
    ),
  );
}

export function createCustomerExchangeFundingSourceLinksFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateCustomerExchangeFundingSourceLinks,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeFundingSourceLinks$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateCustomerExchangeFundingSourceLinks' from JSON`,
  );
}

/** @internal */
export const CreateCustomerExchangeFundingSourceBankAccountType$inboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerExchangeFundingSourceBankAccountType> = z
    .nativeEnum(CreateCustomerExchangeFundingSourceBankAccountType);

/** @internal */
export const CreateCustomerExchangeFundingSourceBankAccountType$outboundSchema:
  z.ZodNativeEnum<typeof CreateCustomerExchangeFundingSourceBankAccountType> =
    CreateCustomerExchangeFundingSourceBankAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeFundingSourceBankAccountType$ {
  /** @deprecated use `CreateCustomerExchangeFundingSourceBankAccountType$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeFundingSourceBankAccountType$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSourceBankAccountType$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeFundingSourceBankAccountType$outboundSchema;
}

/** @internal */
export const CreateCustomerExchangeFundingSource$inboundSchema: z.ZodType<
  CreateCustomerExchangeFundingSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerExchangeFundingSourceLinks$inboundSchema),
  bankAccountType:
    CreateCustomerExchangeFundingSourceBankAccountType$inboundSchema,
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type CreateCustomerExchangeFundingSource$Outbound = {
  _links: CreateCustomerExchangeFundingSourceLinks$Outbound;
  bankAccountType: string;
  name: string;
};

/** @internal */
export const CreateCustomerExchangeFundingSource$outboundSchema: z.ZodType<
  CreateCustomerExchangeFundingSource$Outbound,
  z.ZodTypeDef,
  CreateCustomerExchangeFundingSource
> = z.object({
  links: z.lazy(() => CreateCustomerExchangeFundingSourceLinks$outboundSchema),
  bankAccountType:
    CreateCustomerExchangeFundingSourceBankAccountType$outboundSchema,
  name: z.string(),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCustomerExchangeFundingSource$ {
  /** @deprecated use `CreateCustomerExchangeFundingSource$inboundSchema` instead. */
  export const inboundSchema =
    CreateCustomerExchangeFundingSource$inboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSource$outboundSchema` instead. */
  export const outboundSchema =
    CreateCustomerExchangeFundingSource$outboundSchema;
  /** @deprecated use `CreateCustomerExchangeFundingSource$Outbound` instead. */
  export type Outbound = CreateCustomerExchangeFundingSource$Outbound;
}

export function createCustomerExchangeFundingSourceToJSON(
  createCustomerExchangeFundingSource: CreateCustomerExchangeFundingSource,
): string {
  return JSON.stringify(
    CreateCustomerExchangeFundingSource$outboundSchema.parse(
      createCustomerExchangeFundingSource,
    ),
  );
}

export function createCustomerExchangeFundingSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateCustomerExchangeFundingSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCustomerExchangeFundingSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCustomerExchangeFundingSource' from JSON`,
  );
}
