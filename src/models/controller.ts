/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type ControllerAddress = {
  address1?: string | undefined;
  address2?: string | undefined;
  address3?: string | undefined;
  city?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
  stateProvinceRegion?: string | undefined;
};

/**
 * Controller JSON Object for Customer responses
 */
export type Controller = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  title?: string | undefined;
  address?: ControllerAddress | undefined;
};

/** @internal */
export const ControllerAddress$inboundSchema: z.ZodType<
  ControllerAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  address1: z.string().optional(),
  address2: z.string().optional(),
  address3: z.string().optional(),
  city: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
  stateProvinceRegion: z.string().optional(),
});

/** @internal */
export type ControllerAddress$Outbound = {
  address1?: string | undefined;
  address2?: string | undefined;
  address3?: string | undefined;
  city?: string | undefined;
  postalCode?: string | undefined;
  country?: string | undefined;
  stateProvinceRegion?: string | undefined;
};

/** @internal */
export const ControllerAddress$outboundSchema: z.ZodType<
  ControllerAddress$Outbound,
  z.ZodTypeDef,
  ControllerAddress
> = z.object({
  address1: z.string().optional(),
  address2: z.string().optional(),
  address3: z.string().optional(),
  city: z.string().optional(),
  postalCode: z.string().optional(),
  country: z.string().optional(),
  stateProvinceRegion: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ControllerAddress$ {
  /** @deprecated use `ControllerAddress$inboundSchema` instead. */
  export const inboundSchema = ControllerAddress$inboundSchema;
  /** @deprecated use `ControllerAddress$outboundSchema` instead. */
  export const outboundSchema = ControllerAddress$outboundSchema;
  /** @deprecated use `ControllerAddress$Outbound` instead. */
  export type Outbound = ControllerAddress$Outbound;
}

export function controllerAddressToJSON(
  controllerAddress: ControllerAddress,
): string {
  return JSON.stringify(
    ControllerAddress$outboundSchema.parse(controllerAddress),
  );
}

export function controllerAddressFromJSON(
  jsonString: string,
): SafeParseResult<ControllerAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ControllerAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ControllerAddress' from JSON`,
  );
}

/** @internal */
export const Controller$inboundSchema: z.ZodType<
  Controller,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  title: z.string().optional(),
  address: z.lazy(() => ControllerAddress$inboundSchema).optional(),
});

/** @internal */
export type Controller$Outbound = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  title?: string | undefined;
  address?: ControllerAddress$Outbound | undefined;
};

/** @internal */
export const Controller$outboundSchema: z.ZodType<
  Controller$Outbound,
  z.ZodTypeDef,
  Controller
> = z.object({
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  title: z.string().optional(),
  address: z.lazy(() => ControllerAddress$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Controller$ {
  /** @deprecated use `Controller$inboundSchema` instead. */
  export const inboundSchema = Controller$inboundSchema;
  /** @deprecated use `Controller$outboundSchema` instead. */
  export const outboundSchema = Controller$outboundSchema;
  /** @deprecated use `Controller$Outbound` instead. */
  export type Outbound = Controller$Outbound;
}

export function controllerToJSON(controller: Controller): string {
  return JSON.stringify(Controller$outboundSchema.parse(controller));
}

export function controllerFromJSON(
  jsonString: string,
): SafeParseResult<Controller, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Controller$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Controller' from JSON`,
  );
}
