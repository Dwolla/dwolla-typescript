/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  UnverifiedBusinessCustomer,
  UnverifiedBusinessCustomer$inboundSchema,
  UnverifiedBusinessCustomer$Outbound,
  UnverifiedBusinessCustomer$outboundSchema,
} from "./unverifiedbusinesscustomer.js";
import {
  UnverifiedCustomer,
  UnverifiedCustomer$inboundSchema,
  UnverifiedCustomer$Outbound,
  UnverifiedCustomer$outboundSchema,
} from "./unverifiedcustomer.js";
import {
  VerifiedBusinessCustomer,
  VerifiedBusinessCustomer$inboundSchema,
  VerifiedBusinessCustomer$Outbound,
  VerifiedBusinessCustomer$outboundSchema,
} from "./verifiedbusinesscustomer.js";
import {
  VerifiedPersonalCustomer,
  VerifiedPersonalCustomer$inboundSchema,
  VerifiedPersonalCustomer$Outbound,
  VerifiedPersonalCustomer$outboundSchema,
} from "./verifiedpersonalcustomer.js";
import {
  VerifiedSolePropCustomer,
  VerifiedSolePropCustomer$inboundSchema,
  VerifiedSolePropCustomer$Outbound,
  VerifiedSolePropCustomer$outboundSchema,
} from "./verifiedsolepropcustomer.js";

export type Customer =
  | UnverifiedCustomer
  | UnverifiedBusinessCustomer
  | VerifiedPersonalCustomer
  | VerifiedSolePropCustomer
  | VerifiedBusinessCustomer;

/** @internal */
export const Customer$inboundSchema: z.ZodType<
  Customer,
  z.ZodTypeDef,
  unknown
> = z.union([
  UnverifiedCustomer$inboundSchema,
  UnverifiedBusinessCustomer$inboundSchema,
  VerifiedPersonalCustomer$inboundSchema,
  VerifiedSolePropCustomer$inboundSchema,
  VerifiedBusinessCustomer$inboundSchema,
]);

/** @internal */
export type Customer$Outbound =
  | UnverifiedCustomer$Outbound
  | UnverifiedBusinessCustomer$Outbound
  | VerifiedPersonalCustomer$Outbound
  | VerifiedSolePropCustomer$Outbound
  | VerifiedBusinessCustomer$Outbound;

/** @internal */
export const Customer$outboundSchema: z.ZodType<
  Customer$Outbound,
  z.ZodTypeDef,
  Customer
> = z.union([
  UnverifiedCustomer$outboundSchema,
  UnverifiedBusinessCustomer$outboundSchema,
  VerifiedPersonalCustomer$outboundSchema,
  VerifiedSolePropCustomer$outboundSchema,
  VerifiedBusinessCustomer$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Customer$ {
  /** @deprecated use `Customer$inboundSchema` instead. */
  export const inboundSchema = Customer$inboundSchema;
  /** @deprecated use `Customer$outboundSchema` instead. */
  export const outboundSchema = Customer$outboundSchema;
  /** @deprecated use `Customer$Outbound` instead. */
  export type Outbound = Customer$Outbound;
}

export function customerToJSON(customer: Customer): string {
  return JSON.stringify(Customer$outboundSchema.parse(customer));
}

export function customerFromJSON(
  jsonString: string,
): SafeParseResult<Customer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Customer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Customer' from JSON`,
  );
}
