/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { labelsLedgerEntriesCreate } from "../funcs/labelsLedgerEntriesCreate.js";
import { labelsLedgerEntriesGet } from "../funcs/labelsLedgerEntriesGet.js";
import { labelsLedgerEntriesList } from "../funcs/labelsLedgerEntriesList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class LedgerEntries extends ClientSDK {
  /**
   * List label ledger entries
   *
   * @remarks
   * Returns all ledger entries for a specific Label, sorted by creation date (newest first). Supports pagination with limit and offset parameters. Each ledger entry includes its amount, currency, and creation timestamp.
   */
  async list(
    request: operations.ListLabelLedgerEntriesRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntries> {
    return unwrapAsync(labelsLedgerEntriesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label ledger entry
   *
   * @remarks
   * Create a new ledger entry to track fund adjustments on a Label by specifying a positive or negative amount value. Returns the location of the created ledger entry in the response header. Label amounts cannot go negative, so validation errors occur if the entry would result in a negative Label balance.
   */
  async create(
    request: operations.CreateLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLabelLedgerEntryResponse | undefined> {
    return unwrapAsync(labelsLedgerEntriesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a label ledger entry
   *
   * @remarks
   * Returns detailed information for a specific ledger entry on a Label, including its amount, currency, and creation timestamp.
   */
  async get(
    request: operations.GetLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntry> {
    return unwrapAsync(labelsLedgerEntriesGet(
      this,
      request,
      options,
    ));
  }
}
