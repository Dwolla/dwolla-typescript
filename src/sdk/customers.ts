/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersCreateCustomer } from "../funcs/customersCreateCustomer.js";
import { customersGetCustomer } from "../funcs/customersGetCustomer.js";
import { customersListAndSearchCustomers } from "../funcs/customersListAndSearchCustomers.js";
import { customersListBusinessClassifications } from "../funcs/customersListBusinessClassifications.js";
import { customersRetrieveBusinessClassification } from "../funcs/customersRetrieveBusinessClassification.js";
import { customersUpdate } from "../funcs/customersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Customers extends ClientSDK {
  /**
   * List and search customers
   *
   * @remarks
   * List and search customers allowing you to filter by email and status, as well as search on key fields such as firstName, lastName, and businessName.
   */
  async listAndSearchCustomers(
    request: operations.ListAndSearchCustomersRequest,
    options?: RequestOptions,
  ): Promise<models.Customers> {
    return unwrapAsync(customersListAndSearchCustomers(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a customer
   *
   * @remarks
   * Create an unverified customer, verified customer, or receive-only user.
   */
  async createCustomer(
    request: operations.CreateCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerResponse | undefined> {
    return unwrapAsync(customersCreateCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   *
   * @remarks
   * Retrieve details for a single customer
   */
  async getCustomer(
    request: operations.GetCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.Customer> {
    return unwrapAsync(customersGetCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   *
   * @remarks
   * Update Customer information, upgrade an unverified Customer to a verified Customer, suspend a Customer, deactivate a Customer, reactivate a Customer, and update a verified Customer's information to retry verification.
   */
  async update(
    request: operations.UpdateRequest,
    options?: RequestOptions,
  ): Promise<models.Customer> {
    return unwrapAsync(customersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List business classification
   *
   * @remarks
   * Retrieve an _embedded list of business classifications that contains an _embedded list of industry classifications.
   */
  async listBusinessClassifications(
    options?: RequestOptions,
  ): Promise<operations.ListBusinessClassificationsResponse> {
    return unwrapAsync(customersListBusinessClassifications(
      this,
      options,
    ));
  }

  /**
   * Retrieve a business classification
   *
   * @remarks
   * Retrieve a business classification
   */
  async retrieveBusinessClassification(
    request: operations.RetrieveBusinessClassificationRequest,
    options?: RequestOptions,
  ): Promise<models.BusinessClassification> {
    return unwrapAsync(customersRetrieveBusinessClassification(
      this,
      request,
      options,
    ));
  }
}
