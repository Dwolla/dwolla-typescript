/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersCreateReceiveOnly } from "../funcs/customersCreateReceiveOnly.js";
import { customersCreateUnverified } from "../funcs/customersCreateUnverified.js";
import { customersCreateVerifiedBusiness } from "../funcs/customersCreateVerifiedBusiness.js";
import { customersCreateVerifiedBusinessInternational } from "../funcs/customersCreateVerifiedBusinessInternational.js";
import { customersCreateVerifiedPersonal } from "../funcs/customersCreateVerifiedPersonal.js";
import { customersCreateVerifiedSoleProp } from "../funcs/customersCreateVerifiedSoleProp.js";
import { customersGet } from "../funcs/customersGet.js";
import { customersList } from "../funcs/customersList.js";
import { customersListAvailableConnections } from "../funcs/customersListAvailableConnections.js";
import { customersUpdate } from "../funcs/customersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { BeneficialOwnership } from "./beneficialownership.js";
import { CustomersBeneficialOwners } from "./customersbeneficialowners.js";
import { CustomersDocuments } from "./customersdocuments.js";
import { CustomersExchanges } from "./customersexchanges.js";
import { CustomersExchangeSessions } from "./customersexchangesessions.js";
import { CustomersFundingSources } from "./customersfundingsources.js";
import { CustomersKba } from "./customerskba.js";
import { CustomersLabels } from "./customerslabels.js";
import { CustomersMassPayments } from "./customersmasspayments.js";
import { CustomersTransfers } from "./customerstransfers.js";

export class Customers extends ClientSDK {
  private _beneficialOwners?: CustomersBeneficialOwners;
  get beneficialOwners(): CustomersBeneficialOwners {
    return (this._beneficialOwners ??= new CustomersBeneficialOwners(
      this._options,
    ));
  }

  private _beneficialOwnership?: BeneficialOwnership;
  get beneficialOwnership(): BeneficialOwnership {
    return (this._beneficialOwnership ??= new BeneficialOwnership(
      this._options,
    ));
  }

  private _documents?: CustomersDocuments;
  get documents(): CustomersDocuments {
    return (this._documents ??= new CustomersDocuments(this._options));
  }

  private _kba?: CustomersKba;
  get kba(): CustomersKba {
    return (this._kba ??= new CustomersKba(this._options));
  }

  private _fundingSources?: CustomersFundingSources;
  get fundingSources(): CustomersFundingSources {
    return (this._fundingSources ??= new CustomersFundingSources(
      this._options,
    ));
  }

  private _transfers?: CustomersTransfers;
  get transfers(): CustomersTransfers {
    return (this._transfers ??= new CustomersTransfers(this._options));
  }

  private _massPayments?: CustomersMassPayments;
  get massPayments(): CustomersMassPayments {
    return (this._massPayments ??= new CustomersMassPayments(this._options));
  }

  private _labels?: CustomersLabels;
  get labels(): CustomersLabels {
    return (this._labels ??= new CustomersLabels(this._options));
  }

  private _exchanges?: CustomersExchanges;
  get exchanges(): CustomersExchanges {
    return (this._exchanges ??= new CustomersExchanges(this._options));
  }

  private _exchangeSessions?: CustomersExchangeSessions;
  get exchangeSessions(): CustomersExchangeSessions {
    return (this._exchangeSessions ??= new CustomersExchangeSessions(
      this._options,
    ));
  }

  /**
   * List and search customers
   *
   * @remarks
   * Returns a paginated list of customers sorted by creation date. Supports fuzzy search across customer names, business names, and email addresses, plus exact filtering by email and verification status. Default limit is 25 customers per page, maximum 200.
   */
  async list(
    request: operations.ListAndSearchCustomersRequest,
    options?: RequestOptions,
  ): Promise<models.Customers> {
    return unwrapAsync(customersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   *
   * @remarks
   * Retrieve identifying information for a specific customer. The returned data varies by customer type - verified customers include contact details, address information, and verification status, while unverified customers and receive-only users contain basic contact information only.
   */
  async get(
    request: operations.GetCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCustomerResponse> {
    return unwrapAsync(customersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   *
   * @remarks
   * Update Customer information, upgrade an unverified Customer to a verified Customer, suspend a Customer, deactivate a Customer, reactivate a Customer, and update a verified Customer's information to retry verification.
   */
  async update(
    request: operations.UpdateRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateResponse> {
    return unwrapAsync(customersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List available exchange connections
   *
   * @remarks
   * Returns available exchange connections for a customer's bank accounts authorized through MX Connect. Each connection includes an account name and availableConnectionToken required to create exchanges and funding sources for transfers.
   */
  async listAvailableConnections(
    request: operations.ListAvailableExchangeConnectionsRequest,
    options?: RequestOptions,
  ): Promise<models.AvailableExchangeConnections> {
    return unwrapAsync(customersListAvailableConnections(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an unverified customer
   *
   * @remarks
   * Creates a new unverified customer with basic information. Unverified customers have limited transaction capabilities.
   */
  async createUnverified(
    request: models.CreateUnverifiedCustomer,
    options?: RequestOptions,
  ): Promise<operations.CreateUnverifiedCustomerResponse | undefined> {
    return unwrapAsync(customersCreateUnverified(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a receive-only user
   *
   * @remarks
   * Creates a new receive-only user who can only receive funds, not send them.
   */
  async createReceiveOnly(
    request: models.CreateReceiveOnlyUser,
    options?: RequestOptions,
  ): Promise<operations.CreateReceiveOnlyCustomerResponse | undefined> {
    return unwrapAsync(customersCreateReceiveOnly(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a verified personal customer
   *
   * @remarks
   * Creates a new verified personal customer with full transaction capabilities.
   */
  async createVerifiedPersonal(
    request: models.CreateVerifiedPersonalCustomer,
    options?: RequestOptions,
  ): Promise<operations.CreateVerifiedPersonalCustomerResponse | undefined> {
    return unwrapAsync(customersCreateVerifiedPersonal(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a verified sole proprietorship customer
   *
   * @remarks
   * Creates a new verified sole proprietorship business customer.
   */
  async createVerifiedSoleProp(
    request: models.CreateVerifiedSolePropCustomer,
    options?: RequestOptions,
  ): Promise<operations.CreateVerifiedSolePropCustomerResponse | undefined> {
    return unwrapAsync(customersCreateVerifiedSoleProp(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a verified business customer
   *
   * @remarks
   * Creates a new verified business customer with a US controller.
   */
  async createVerifiedBusiness(
    request: models.CreateVerifiedBusinessCustomerWithController,
    options?: RequestOptions,
  ): Promise<operations.CreateVerifiedBusinessCustomerResponse | undefined> {
    return unwrapAsync(customersCreateVerifiedBusiness(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a verified business customer with international controller
   *
   * @remarks
   * Creates a new verified business customer with an international (non-US) controller.
   */
  async createVerifiedBusinessInternational(
    request: models.CreateVerifiedBusinessCustomerWithInternationalController,
    options?: RequestOptions,
  ): Promise<
    operations.CreateVerifiedBusinessInternationalCustomerResponse | undefined
  > {
    return unwrapAsync(customersCreateVerifiedBusinessInternational(
      this,
      request,
      options,
    ));
  }
}
