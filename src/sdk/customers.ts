/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersCreate } from "../funcs/customersCreate.js";
import { customersGet } from "../funcs/customersGet.js";
import { customersList } from "../funcs/customersList.js";
import { customersListAvailableConnections } from "../funcs/customersListAvailableConnections.js";
import { customersUpdate } from "../funcs/customersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { CustomersBeneficialOwners } from "./customersbeneficialowners.js";
import { CustomersDocuments } from "./customersdocuments.js";
import { CustomersExchanges } from "./customersexchanges.js";
import { CustomersFundingSources } from "./customersfundingsources.js";

export class Customers extends ClientSDK {
  private _beneficialOwners?: CustomersBeneficialOwners;
  get beneficialOwners(): CustomersBeneficialOwners {
    return (this._beneficialOwners ??= new CustomersBeneficialOwners(
      this._options,
    ));
  }

  private _documents?: CustomersDocuments;
  get documents(): CustomersDocuments {
    return (this._documents ??= new CustomersDocuments(this._options));
  }

  private _fundingSources?: CustomersFundingSources;
  get fundingSources(): CustomersFundingSources {
    return (this._fundingSources ??= new CustomersFundingSources(
      this._options,
    ));
  }

  private _exchanges?: CustomersExchanges;
  get exchanges(): CustomersExchanges {
    return (this._exchanges ??= new CustomersExchanges(this._options));
  }

  /**
   * List and search customers
   *
   * @remarks
   * List and search customers allowing you to filter by email and status, as well as search on key fields such as firstName, lastName, and businessName.
   */
  async list(
    request: operations.ListAndSearchCustomersRequest,
    options?: RequestOptions,
  ): Promise<models.Customers> {
    return unwrapAsync(customersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a customer
   *
   * @remarks
   * Create an unverified customer, verified customer, or receive-only user.
   */
  async create(
    request: operations.CreateCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerResponse | undefined> {
    return unwrapAsync(customersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a customer
   *
   * @remarks
   * Retrieve details for a single customer
   */
  async get(
    request: operations.GetCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.Customer> {
    return unwrapAsync(customersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a customer
   *
   * @remarks
   * Update Customer information, upgrade an unverified Customer to a verified Customer, suspend a Customer, deactivate a Customer, reactivate a Customer, and update a verified Customer's information to retry verification.
   */
  async update(
    request: operations.UpdateRequest,
    options?: RequestOptions,
  ): Promise<models.Customer> {
    return unwrapAsync(customersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * List available exchange connections
   *
   * @remarks
   * Retrieve a list of a customer's external bank accounts that have been authorized through MX Connect.
   * Each account is represented as an "available exchange connection" with details like the account name and associated availableConnectionToken.
   * This information is essential for creating an exchange and corresponding funding source within Dwolla.
   */
  async listAvailableConnections(
    request: operations.ListAvailableExchangeConnectionsRequest,
    options?: RequestOptions,
  ): Promise<models.AvailableExchangeConnections> {
    return unwrapAsync(customersListAvailableConnections(
      this,
      request,
      options,
    ));
  }
}
