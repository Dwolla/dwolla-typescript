/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { kbaGetKbaQuestions } from "../funcs/kbaGetKbaQuestions.js";
import { kbaInitiateKbaForCustomer } from "../funcs/kbaInitiateKbaForCustomer.js";
import { kbaVerifyKbaQuestions } from "../funcs/kbaVerifyKbaQuestions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Kba extends ClientSDK {
  /**
   * Initiate a KBA session
   *
   * @remarks
   * Initiate a KBA session
   */
  async initiateKbaForCustomer(
    request: operations.InitiateKbaForCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateKbaForCustomerResponse | undefined> {
    return unwrapAsync(kbaInitiateKbaForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve KBA Questions
   *
   * @remarks
   * Retrieve KBA Questions
   */
  async getKbaQuestions(
    request: operations.GetKbaQuestionsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetKbaQuestionsResponse> {
    return unwrapAsync(kbaGetKbaQuestions(
      this,
      request,
      options,
    ));
  }

  /**
   * Verify KBA Questions
   *
   * @remarks
   * Verify KBA Questions
   */
  async verifyKbaQuestions(
    request: operations.VerifyKbaQuestionsRequest,
    options?: RequestOptions,
  ): Promise<operations.VerifyKbaQuestionsResponse> {
    return unwrapAsync(kbaVerifyKbaQuestions(
      this,
      request,
      options,
    ));
  }
}
