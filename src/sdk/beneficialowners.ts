/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { beneficialOwnersCertifyOwnership } from "../funcs/beneficialOwnersCertifyOwnership.js";
import { beneficialOwnersDelete } from "../funcs/beneficialOwnersDelete.js";
import { beneficialOwnersGet } from "../funcs/beneficialOwnersGet.js";
import { beneficialOwnersGetOwnershipStatus } from "../funcs/beneficialOwnersGetOwnershipStatus.js";
import { beneficialOwnersUpdate } from "../funcs/beneficialOwnersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { BeneficialOwnersDocuments } from "./beneficialownersdocuments.js";

export class BeneficialOwners extends ClientSDK {
  private _documents?: BeneficialOwnersDocuments;
  get documents(): BeneficialOwnersDocuments {
    return (this._documents ??= new BeneficialOwnersDocuments(this._options));
  }

  /**
   * Retrieve beneficial owner
   *
   * @remarks
   * Retrieve details for a single beneficial owner
   */
  async get(
    request: operations.RetrieveBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update beneficial owner
   *
   * @remarks
   * Update beneficial owner
   */
  async update(
    request: operations.UpdateBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete beneficial owner
   *
   * @remarks
   * Delete beneficial owner
   */
  async delete(
    request: operations.DeleteBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBeneficialOwnerResponse> {
    return unwrapAsync(beneficialOwnersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve beneficial ownership status
   *
   * @remarks
   * Retrieve beneficial ownership status
   */
  async getOwnershipStatus(
    request: operations.GetBeneficialOwnershipStatusForCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwnership> {
    return unwrapAsync(beneficialOwnersGetOwnershipStatus(
      this,
      request,
      options,
    ));
  }

  /**
   * Certify beneficial ownership status
   *
   * @remarks
   * certify beneficial ownership status
   */
  async certifyOwnership(
    request: operations.CertifyBeneficialOwnershipForCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwnership> {
    return unwrapAsync(beneficialOwnersCertifyOwnership(
      this,
      request,
      options,
    ));
  }
}
