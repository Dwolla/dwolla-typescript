/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { beneficialOwnersCertifyBeneficialOwnershipForCustomer } from "../funcs/beneficialOwnersCertifyBeneficialOwnershipForCustomer.js";
import { beneficialOwnersCreateBeneficialOwnerForCustomer } from "../funcs/beneficialOwnersCreateBeneficialOwnerForCustomer.js";
import { beneficialOwnersDeleteBeneficialOwner } from "../funcs/beneficialOwnersDeleteBeneficialOwner.js";
import { beneficialOwnersGetBeneficialOwnershipStatusForCustomer } from "../funcs/beneficialOwnersGetBeneficialOwnershipStatusForCustomer.js";
import { beneficialOwnersListBeneficialOwnersForCustomer } from "../funcs/beneficialOwnersListBeneficialOwnersForCustomer.js";
import { beneficialOwnersRetrieveBeneficialOwner } from "../funcs/beneficialOwnersRetrieveBeneficialOwner.js";
import { beneficialOwnersUpdateBeneficialOwner } from "../funcs/beneficialOwnersUpdateBeneficialOwner.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BeneficialOwners extends ClientSDK {
  /**
   * List beneficial owners
   *
   * @remarks
   * Retrieve a list of beneficial owners that belong to a Customer
   */
  async listBeneficialOwnersForCustomer(
    request: operations.ListBeneficialOwnersForCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwners> {
    return unwrapAsync(beneficialOwnersListBeneficialOwnersForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Create beneficial owner
   *
   * @remarks
   * Create beneficial owner which is a natural person who, directly or indirectly, owns 25% or more of the equity interests of the company.
   */
  async createBeneficialOwnerForCustomer(
    request: operations.CreateBeneficialOwnerForCustomerRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateBeneficialOwnerForCustomerResponse | undefined> {
    return unwrapAsync(beneficialOwnersCreateBeneficialOwnerForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve beneficial owner
   *
   * @remarks
   * Retrieve details for a single beneficial owner
   */
  async retrieveBeneficialOwner(
    request: operations.RetrieveBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersRetrieveBeneficialOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Update beneficial owner
   *
   * @remarks
   * Update beneficial owner
   */
  async updateBeneficialOwner(
    request: operations.UpdateBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersUpdateBeneficialOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete beneficial owner
   *
   * @remarks
   * Delete beneficial owner
   */
  async deleteBeneficialOwner(
    request: operations.DeleteBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBeneficialOwnerResponse> {
    return unwrapAsync(beneficialOwnersDeleteBeneficialOwner(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve beneficial ownership status
   *
   * @remarks
   * Retrieve beneficial ownership status
   */
  async getBeneficialOwnershipStatusForCustomer(
    request: operations.GetBeneficialOwnershipStatusForCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwnership> {
    return unwrapAsync(beneficialOwnersGetBeneficialOwnershipStatusForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Certify beneficial ownership status
   *
   * @remarks
   * certify beneficial ownership status
   */
  async certifyBeneficialOwnershipForCustomer(
    request: operations.CertifyBeneficialOwnershipForCustomerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwnership> {
    return unwrapAsync(beneficialOwnersCertifyBeneficialOwnershipForCustomer(
      this,
      request,
      options,
    ));
  }
}
