/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { beneficialOwnersDelete } from "../funcs/beneficialOwnersDelete.js";
import { beneficialOwnersGet } from "../funcs/beneficialOwnersGet.js";
import { beneficialOwnersUpdate } from "../funcs/beneficialOwnersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { BeneficialOwnersDocuments } from "./beneficialownersdocuments.js";

export class BeneficialOwners extends ClientSDK {
  private _documents?: BeneficialOwnersDocuments;
  get documents(): BeneficialOwnersDocuments {
    return (this._documents ??= new BeneficialOwnersDocuments(this._options));
  }

  /**
   * Retrieve beneficial owner
   *
   * @remarks
   * Returns detailed information for a specific beneficial owner, including personal information, address, and verification status. The verification status indicates the owner's identity verification progress and affects the business customer's transaction capabilities.
   */
  async get(
    request: operations.RetrieveBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update beneficial owner
   *
   * @remarks
   * Updates a beneficial owner's information to retry verification when their status is "incomplete". Only beneficial owners with incomplete verification status can be updated. Used to correct information that caused initial verification to fail.
   */
  async update(
    request: operations.UpdateBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<models.BeneficialOwner> {
    return unwrapAsync(beneficialOwnersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove beneficial owner
   *
   * @remarks
   * Permanently removes a beneficial owner from a business customer. This action is irreversible and the beneficial owner cannot be retrieved after removal. Removing a beneficial owner will change the customer's certification status to "recertify".
   */
  async delete(
    request: operations.DeleteBeneficialOwnerRequest,
    options?: RequestOptions,
  ): Promise<operations.DeleteBeneficialOwnerResponse> {
    return unwrapAsync(beneficialOwnersDelete(
      this,
      request,
      options,
    ));
  }
}
