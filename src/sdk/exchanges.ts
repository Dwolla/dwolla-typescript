/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { exchangesCreateAccountExchange } from "../funcs/exchangesCreateAccountExchange.js";
import { exchangesCreateCustomerExchange } from "../funcs/exchangesCreateCustomerExchange.js";
import { exchangesGetExchange } from "../funcs/exchangesGetExchange.js";
import { exchangesGetExchangePartner } from "../funcs/exchangesGetExchangePartner.js";
import { exchangesListAccountExchanges } from "../funcs/exchangesListAccountExchanges.js";
import { exchangesListCustomerExchanges } from "../funcs/exchangesListCustomerExchanges.js";
import { exchangesListExchangePartners } from "../funcs/exchangesListExchangePartners.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Exchanges extends ClientSDK {
  /**
   * List exchange partners
   *
   * @remarks
   * List exchange partners
   */
  async listExchangePartners(
    options?: RequestOptions,
  ): Promise<models.ExchangePartners> {
    return unwrapAsync(exchangesListExchangePartners(
      this,
      options,
    ));
  }

  /**
   * Retrieve exchange partner
   *
   * @remarks
   * Retrieve exchange partner
   */
  async getExchangePartner(
    request: operations.GetExchangePartnerRequest,
    options?: RequestOptions,
  ): Promise<models.ExchangePartner> {
    return unwrapAsync(exchangesGetExchangePartner(
      this,
      request,
      options,
    ));
  }

  /**
   * List exchanges for an account
   *
   * @remarks
   * List exchanges for an account
   */
  async listAccountExchanges(
    options?: RequestOptions,
  ): Promise<models.Exchanges> {
    return unwrapAsync(exchangesListAccountExchanges(
      this,
      options,
    ));
  }

  /**
   * Create an exchange for an account
   *
   * @remarks
   * Create an exchange for an account. The request body will vary based on the exchange partner.
   * For Finicity, the request body will include finicity-specific fields.
   * For MX Secure Exchange, the request body will include a token.
   * For Flinks Secure Exchange, the request body will include a token.
   * For Plaid Secure Exchange, the request body will include a token.
   */
  async createAccountExchange(
    request: operations.CreateAccountExchangeRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAccountExchangeResponse> {
    return unwrapAsync(exchangesCreateAccountExchange(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve exchange resource
   *
   * @remarks
   * Retrieve exchange resource
   */
  async getExchange(
    request: operations.GetExchangeRequest,
    options?: RequestOptions,
  ): Promise<models.Exchange> {
    return unwrapAsync(exchangesGetExchange(
      this,
      request,
      options,
    ));
  }

  /**
   * List exchanges for a customer
   *
   * @remarks
   * List exchanges for a customer
   */
  async listCustomerExchanges(
    request: operations.ListCustomerExchangesRequest,
    options?: RequestOptions,
  ): Promise<models.Exchanges> {
    return unwrapAsync(exchangesListCustomerExchanges(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an exchange for a customer
   *
   * @remarks
   * Create an exchange for a customer. The request body will vary based on the exchange partner.
   * For Finicity, the request body will include finicity-specific fields.
   * For MX Secure Exchange, the request body will include an MX token.
   * For MX Open Banking, the request body will include an available connection token.
   * For Flinks Secure Exchange, the request body will include a token.
   * For Plaid Secure Exchange, the request body will include a processor token.
   * For Plaid Open Banking, the request body will include a public token.
   */
  async createCustomerExchange(
    request: operations.CreateCustomerExchangeRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerExchangeResponse | undefined> {
    return unwrapAsync(exchangesCreateCustomerExchange(
      this,
      request,
      options,
    ));
  }
}
