/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { documentsCreateBeneficialOwnerDocument } from "../funcs/documentsCreateBeneficialOwnerDocument.js";
import { documentsCreateCustomerDocument } from "../funcs/documentsCreateCustomerDocument.js";
import { documentsGetDocument } from "../funcs/documentsGetDocument.js";
import { documentsListBeneficialOwnerDocuments } from "../funcs/documentsListBeneficialOwnerDocuments.js";
import { documentsListCustomerDocuments } from "../funcs/documentsListCustomerDocuments.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Documents extends ClientSDK {
  /**
   * List documents for customer
   *
   * @remarks
   * List documents for customer
   */
  async listCustomerDocuments(
    request: operations.ListCustomerDocumentsRequest,
    options?: RequestOptions,
  ): Promise<models.Documents> {
    return unwrapAsync(documentsListCustomerDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a document for customer
   *
   * @remarks
   * Create a document for customer
   */
  async createCustomerDocument(
    request: operations.CreateCustomerDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerDocumentResponse | undefined> {
    return unwrapAsync(documentsCreateCustomerDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * List document for beneficial owner
   *
   * @remarks
   * List document for beneficial owner
   */
  async listBeneficialOwnerDocuments(
    request: operations.ListBeneficialOwnerDocumentsRequest,
    options?: RequestOptions,
  ): Promise<models.Documents> {
    return unwrapAsync(documentsListBeneficialOwnerDocuments(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a document for beneficial owner
   *
   * @remarks
   * Create a document for beneficial owner
   */
  async createBeneficialOwnerDocument(
    request: operations.CreateBeneficialOwnerDocumentRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateBeneficialOwnerDocumentResponse | undefined> {
    return unwrapAsync(documentsCreateBeneficialOwnerDocument(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a document
   *
   * @remarks
   * Retrieve a document for a customer or beneficial owner
   */
  async getDocument(
    request: operations.GetDocumentRequest,
    options?: RequestOptions,
  ): Promise<models.Document> {
    return unwrapAsync(documentsGetDocument(
      this,
      request,
      options,
    ));
  }
}
