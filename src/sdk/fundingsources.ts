/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fundingSourcesCreateCustomerFundingSource } from "../funcs/fundingSourcesCreateCustomerFundingSource.js";
import { fundingSourcesCreateCustomerFundingSourceToken } from "../funcs/fundingSourcesCreateCustomerFundingSourceToken.js";
import { fundingSourcesCreateCustomerIavToken } from "../funcs/fundingSourcesCreateCustomerIavToken.js";
import { fundingSourcesGetFundingSource } from "../funcs/fundingSourcesGetFundingSource.js";
import { fundingSourcesGetFundingSourceBalance } from "../funcs/fundingSourcesGetFundingSourceBalance.js";
import { fundingSourcesGetMicroDeposits } from "../funcs/fundingSourcesGetMicroDeposits.js";
import { fundingSourcesGetVanAchRouting } from "../funcs/fundingSourcesGetVanAchRouting.js";
import { fundingSourcesInitiateOrVerifyMicroDeposits } from "../funcs/fundingSourcesInitiateOrVerifyMicroDeposits.js";
import { fundingSourcesListCustomerFundingSources } from "../funcs/fundingSourcesListCustomerFundingSources.js";
import { fundingSourcesUpdateOrRemoveFundingSource } from "../funcs/fundingSourcesUpdateOrRemoveFundingSource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FundingSources extends ClientSDK {
  /**
   * List customer funding sources
   *
   * @remarks
   * List customer funding sources
   */
  async listCustomerFundingSources(
    request: operations.ListCustomerFundingSourcesRequest,
    options?: RequestOptions,
  ): Promise<Array<models.FundingSources>> {
    return unwrapAsync(fundingSourcesListCustomerFundingSources(
      this,
      request,
      options,
    ));
  }

  /**
   * Create customer funding source
   *
   * @remarks
   * Create a new funding source for a customer.
   * There are multiple methods available:
   * - Basic bank funding source (with routing/account numbers)
   * - Using an exchange
   */
  async createCustomerFundingSource(
    request: operations.CreateCustomerFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerFundingSourceResponse | undefined> {
    return unwrapAsync(fundingSourcesCreateCustomerFundingSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a funding sources token for dwolla.js
   *
   * @remarks
   * Create a funding sources token for dwolla.js
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async createCustomerFundingSourceToken(
    request: operations.CreateCustomerFundingSourceTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerFundingSourceTokenResponse> {
    return unwrapAsync(fundingSourcesCreateCustomerFundingSourceToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an IAV token for dwolla.js
   *
   * @remarks
   * Create an IAV token for dwolla.js
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async createCustomerIavToken(
    request: operations.CreateCustomerIavTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerIavTokenResponse> {
    return unwrapAsync(fundingSourcesCreateCustomerIavToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a funding source
   *
   * @remarks
   * Retrieve a funding source
   */
  async getFundingSource(
    request: operations.GetFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<models.FundingSource> {
    return unwrapAsync(fundingSourcesGetFundingSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update or remove a funding source
   *
   * @remarks
   * Update or remove a funding source
   */
  async updateOrRemoveFundingSource(
    request: operations.UpdateOrRemoveFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateOrRemoveFundingSourceResponse> {
    return unwrapAsync(fundingSourcesUpdateOrRemoveFundingSource(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve micro-deposits details
   *
   * @remarks
   * Retrieve micro-deposits details
   */
  async getMicroDeposits(
    request: operations.GetMicroDepositsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMicroDepositsResponse> {
    return unwrapAsync(fundingSourcesGetMicroDeposits(
      this,
      request,
      options,
    ));
  }

  /**
   * Initiate or Verify micro-deposits
   *
   * @remarks
   * Initiate or Verify micro-deposits.
   * For initiating micro-deposits, no request body is required.
   * For verifying micro-deposits, a request body with the micro-deposit amounts is required.
   */
  async initiateOrVerifyMicroDeposits(
    request: operations.InitiateOrVerifyMicroDepositsRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateOrVerifyMicroDepositsResponse | undefined> {
    return unwrapAsync(fundingSourcesInitiateOrVerifyMicroDeposits(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve funding source balance
   *
   * @remarks
   * Retrieve funding source balance
   */
  async getFundingSourceBalance(
    request: operations.GetFundingSourceBalanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetFundingSourceBalanceResponse> {
    return unwrapAsync(fundingSourcesGetFundingSourceBalance(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve account and routing numbers for a VAN (Virtual Account Number)
   *
   * @remarks
   * Retrieve account and routing numbers for a VAN (Virtual Account Number)
   */
  async getVanAchRouting(
    request: operations.GetVanAchRoutingRequest,
    options?: RequestOptions,
  ): Promise<operations.GetVanAchRoutingResponse> {
    return unwrapAsync(fundingSourcesGetVanAchRouting(
      this,
      request,
      options,
    ));
  }
}
