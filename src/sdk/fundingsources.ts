/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { fundingSourcesCreateForCustomer } from "../funcs/fundingSourcesCreateForCustomer.js";
import { fundingSourcesGet } from "../funcs/fundingSourcesGet.js";
import { fundingSourcesGetBalance } from "../funcs/fundingSourcesGetBalance.js";
import { fundingSourcesGetMicroDeposits } from "../funcs/fundingSourcesGetMicroDeposits.js";
import { fundingSourcesGetVanRouting } from "../funcs/fundingSourcesGetVanRouting.js";
import { fundingSourcesInitiateOrVerifyMicroDeposits } from "../funcs/fundingSourcesInitiateOrVerifyMicroDeposits.js";
import { fundingSourcesUpdateOrRemove } from "../funcs/fundingSourcesUpdateOrRemove.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class FundingSources extends ClientSDK {
  /**
   * Create customer funding source
   *
   * @remarks
   * Create a new funding source for a customer.
   * There are multiple methods available:
   * - Basic bank funding source (with routing/account numbers)
   * - Using an exchange
   */
  async createForCustomer(
    request: operations.CreateCustomerFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerFundingSourceResponse | undefined> {
    return unwrapAsync(fundingSourcesCreateForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a funding source
   *
   * @remarks
   * Retrieve a funding source
   */
  async get(
    request: operations.GetFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<models.FundingSource> {
    return unwrapAsync(fundingSourcesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update or remove a funding source
   *
   * @remarks
   * Update or remove a funding source
   */
  async updateOrRemove(
    request: operations.UpdateOrRemoveFundingSourceRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateOrRemoveFundingSourceResponse> {
    return unwrapAsync(fundingSourcesUpdateOrRemove(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve micro-deposits details
   *
   * @remarks
   * Retrieve micro-deposits details
   */
  async getMicroDeposits(
    request: operations.GetMicroDepositsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetMicroDepositsResponse> {
    return unwrapAsync(fundingSourcesGetMicroDeposits(
      this,
      request,
      options,
    ));
  }

  /**
   * Initiate or Verify micro-deposits
   *
   * @remarks
   * This endpoint handles two different actions:
   * 1. Initiating micro-deposits: No request body is required
   * 2. Verifying micro-deposits: Request body with micro-deposit amounts is required
   *
   * The action is determined by the presence of a request body:
   * - If no request body is provided, the endpoint will initiate micro-deposits
   * - If a request body with micro-deposit amounts is provided, the endpoint will verify the micro-deposits
   */
  async initiateOrVerifyMicroDeposits(
    request: operations.InitiateOrVerifyMicroDepositsRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateOrVerifyMicroDepositsResponse | undefined> {
    return unwrapAsync(fundingSourcesInitiateOrVerifyMicroDeposits(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve funding source balance
   *
   * @remarks
   * Retrieve funding source balance
   */
  async getBalance(
    request: operations.GetFundingSourceBalanceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetFundingSourceBalanceResponse> {
    return unwrapAsync(fundingSourcesGetBalance(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve VAN account and routing numbers
   *
   * @remarks
   * Retrieve account and routing numbers for a VAN (Virtual Account Number)
   */
  async getVanRouting(
    request: operations.GetVanRoutingRequest,
    options?: RequestOptions,
  ): Promise<operations.GetVanRoutingResponse> {
    return unwrapAsync(fundingSourcesGetVanRouting(
      this,
      request,
      options,
    ));
  }
}
