/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transfersCancelTransfer } from "../funcs/transfersCancelTransfer.js";
import { transfersCreateOnDemandTransferAuthorization } from "../funcs/transfersCreateOnDemandTransferAuthorization.js";
import { transfersGetTransfer } from "../funcs/transfersGetTransfer.js";
import { transfersGetTransferFailureReason } from "../funcs/transfersGetTransferFailureReason.js";
import { transfersInitiateTransfer } from "../funcs/transfersInitiateTransfer.js";
import { transfersListCustomerTransfers } from "../funcs/transfersListCustomerTransfers.js";
import { transfersListTransferFees } from "../funcs/transfersListTransferFees.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transfers extends ClientSDK {
  /**
   * Initiate a transfer
   *
   * @remarks
   * Initiate a transfer
   */
  async initiateTransfer(
    request: operations.InitiateTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateTransferResponse | undefined> {
    return unwrapAsync(transfersInitiateTransfer(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transfer
   *
   * @remarks
   * Retrieve a transfer
   */
  async getTransfer(
    request: operations.GetTransferRequest,
    options?: RequestOptions,
  ): Promise<models.Transfer> {
    return unwrapAsync(transfersGetTransfer(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a transfer
   *
   * @remarks
   * Cancel a transfer
   */
  async cancelTransfer(
    request: operations.CancelTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelTransferResponse> {
    return unwrapAsync(transfersCancelTransfer(
      this,
      request,
      options,
    ));
  }

  /**
   * List and search transfers for a customer
   *
   * @remarks
   * List and search transfers for a customer
   */
  async listCustomerTransfers(
    request: operations.ListCustomerTransfersRequest,
    options?: RequestOptions,
  ): Promise<models.Transfers> {
    return unwrapAsync(transfersListCustomerTransfers(
      this,
      request,
      options,
    ));
  }

  /**
   * List fees for a transfer
   *
   * @remarks
   * List fees for a transfer
   */
  async listTransferFees(
    request: operations.ListTransferFeesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTransferFeesResponse> {
    return unwrapAsync(transfersListTransferFees(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transfer failure reason
   *
   * @remarks
   * Retrieve a transfer failure reason
   */
  async getTransferFailureReason(
    request: operations.GetTransferFailureReasonRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransferFailureReasonResponse> {
    return unwrapAsync(transfersGetTransferFailureReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an on-demand transfer authorization
   *
   * @remarks
   * Create an on-demand transfer authorization
   */
  async createOnDemandTransferAuthorization(
    options?: RequestOptions,
  ): Promise<models.OnDemandAuthorization> {
    return unwrapAsync(transfersCreateOnDemandTransferAuthorization(
      this,
      options,
    ));
  }
}
