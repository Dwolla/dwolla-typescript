/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transfersCancel } from "../funcs/transfersCancel.js";
import { transfersCreate } from "../funcs/transfersCreate.js";
import { transfersCreateOnDemandAuthorization } from "../funcs/transfersCreateOnDemandAuthorization.js";
import { transfersGet } from "../funcs/transfersGet.js";
import { transfersGetFailureReason } from "../funcs/transfersGetFailureReason.js";
import { transfersListFees } from "../funcs/transfersListFees.js";
import { transfersListForCustomer } from "../funcs/transfersListForCustomer.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transfers extends ClientSDK {
  /**
   * Initiate a transfer
   *
   * @remarks
   * Initiate a transfer
   */
  async create(
    request: operations.InitiateTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateTransferResponse | undefined> {
    return unwrapAsync(transfersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transfer
   *
   * @remarks
   * Retrieve a transfer
   */
  async get(
    request: operations.GetTransferRequest,
    options?: RequestOptions,
  ): Promise<models.Transfer> {
    return unwrapAsync(transfersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a transfer
   *
   * @remarks
   * Cancel a transfer
   */
  async cancel(
    request: operations.CancelTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelTransferResponse> {
    return unwrapAsync(transfersCancel(
      this,
      request,
      options,
    ));
  }

  /**
   * List and search transfers for a customer
   *
   * @remarks
   * List and search transfers for a customer
   */
  async listForCustomer(
    request: operations.ListCustomerTransfersRequest,
    options?: RequestOptions,
  ): Promise<models.Transfers> {
    return unwrapAsync(transfersListForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * List fees for a transfer
   *
   * @remarks
   * List fees for a transfer
   */
  async listFees(
    request: operations.ListTransferFeesRequest,
    options?: RequestOptions,
  ): Promise<operations.ListTransferFeesResponse> {
    return unwrapAsync(transfersListFees(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transfer failure reason
   *
   * @remarks
   * Retrieve a transfer failure reason
   */
  async getFailureReason(
    request: operations.GetTransferFailureReasonRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTransferFailureReasonResponse> {
    return unwrapAsync(transfersGetFailureReason(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an on-demand transfer authorization
   *
   * @remarks
   * Create an on-demand transfer authorization
   */
  async createOnDemandAuthorization(
    options?: RequestOptions,
  ): Promise<models.OnDemandAuthorization> {
    return unwrapAsync(transfersCreateOnDemandAuthorization(
      this,
      options,
    ));
  }
}
