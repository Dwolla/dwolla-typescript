/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transfersCancel } from "../funcs/transfersCancel.js";
import { transfersCreate } from "../funcs/transfersCreate.js";
import { transfersGet } from "../funcs/transfersGet.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { Failure } from "./failure.js";
import { Fees } from "./fees.js";

export class Transfers extends ClientSDK {
  private _fees?: Fees;
  get fees(): Fees {
    return (this._fees ??= new Fees(this._options));
  }

  private _failure?: Failure;
  get failure(): Failure {
    return (this._failure ??= new Failure(this._options));
  }

  /**
   * Initiate a transfer
   *
   * @remarks
   * Initiate a transfer between funding sources from a Dwolla Account or API Customer resource. Supports ACH, Instant Payments (RTP/FedNow), and wire transfers with optional expedited clearing, facilitator fees, metadata, and correlation IDs for enhanced traceability. Includes idempotency key support to prevent duplicate transfers and extensive customization options for addenda records and processing channels. Returns the location of the created transfer resource for tracking and management.
   */
  async create(
    request: operations.InitiateTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.InitiateTransferResponse | undefined> {
    return unwrapAsync(transfersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a transfer
   *
   * @remarks
   * Retrieve detailed information for a specific transfer by its unique identifier belonging to an Account or Customer. Returns transfer status, amount, creation date, clearing details, and links to source and destination funding sources for complete transaction tracking. Includes cancellation links when applicable and references to related funding transfers. Essential for monitoring transfer lifecycle and transaction reconciliation.
   */
  async get(
    request: operations.GetTransferRequest,
    options?: RequestOptions,
  ): Promise<models.Transfer> {
    return unwrapAsync(transfersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a transfer
   *
   * @remarks
   * Cancel a pending transfer by setting its status to cancelled. Only transfers in pending status can be cancelled before processing begins. Returns the updated transfer resource with cancelled status. Use this endpoint to stop a bank transfer from further processing.
   */
  async cancel(
    request: operations.CancelTransferRequest,
    options?: RequestOptions,
  ): Promise<operations.CancelTransferResponse> {
    return unwrapAsync(transfersCancel(
      this,
      request,
      options,
    ));
  }
}
