/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookSubscriptionsCreate } from "../funcs/webhookSubscriptionsCreate.js";
import { webhookSubscriptionsDelete } from "../funcs/webhookSubscriptionsDelete.js";
import { webhookSubscriptionsGet } from "../funcs/webhookSubscriptionsGet.js";
import { webhookSubscriptionsList } from "../funcs/webhookSubscriptionsList.js";
import { webhookSubscriptionsUpdate } from "../funcs/webhookSubscriptionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { WebhookSubscriptionsWebhooks } from "./webhooksubscriptionswebhooks.js";

export class WebhookSubscriptions extends ClientSDK {
  private _webhooks?: WebhookSubscriptionsWebhooks;
  get webhooks(): WebhookSubscriptionsWebhooks {
    return (this._webhooks ??= new WebhookSubscriptionsWebhooks(this._options));
  }

  /**
   * List webhook subscriptions
   *
   * @remarks
   * Retrieve all webhook subscriptions that belong to an application including their configuration details and status. Returns subscription details including webhook endpoints, status, creation dates, and links to associated webhooks with total count. Essential for webhook management and monitoring subscription health.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListWebhookSubscriptionsResponse> {
    return unwrapAsync(webhookSubscriptionsList(
      this,
      options,
    ));
  }

  /**
   * Create a webhook subscription
   *
   * @remarks
   * Create a webhook subscription to deliver webhook notifications to a specified URL endpoint for your application. Requires a destination URL where Dwolla will send notifications and a secret key for webhook validation and security. Returns the location of the created subscription resource. Essential for establishing real-time event notifications and automated integrations with Dwolla's payment processing events.
   */
  async create(
    request: operations.CreateWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateWebhookSubscriptionResponse | undefined> {
    return unwrapAsync(webhookSubscriptionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a webhook subscription
   *
   * @remarks
   * Retrieve detailed information for a specific webhook subscription by its unique identifier. Returns subscription configuration including URL endpoint, creation date, and links to associated webhooks for comprehensive subscription management. Essential for monitoring webhook subscription status and accessing webhook delivery history.
   */
  async get(
    request: operations.GetWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook subscription
   *
   * @remarks
   * Update a webhook subscription to pause or resume webhook delivery notifications. Allows toggling the paused status to temporarily stop webhook notifications without deleting the subscription. Returns the updated subscription resource with the new paused status. Use this endpoint to manage webhook delivery during maintenance or troubleshooting periods.
   */
  async update(
    request: operations.UpdateWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook subscription
   *
   * @remarks
   * Delete a webhook subscription to permanently remove webhook notifications for your application. This action stops all future webhook deliveries and cannot be undone. Returns the deleted subscription resource for confirmation. Use this endpoint when webhook notifications are no longer needed or when cleaning up unused subscriptions.
   */
  async delete(
    request: operations.DeleteRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsDelete(
      this,
      request,
      options,
    ));
  }
}
