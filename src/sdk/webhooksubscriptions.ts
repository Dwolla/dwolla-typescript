/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookSubscriptionsCreate } from "../funcs/webhookSubscriptionsCreate.js";
import { webhookSubscriptionsDelete } from "../funcs/webhookSubscriptionsDelete.js";
import { webhookSubscriptionsGet } from "../funcs/webhookSubscriptionsGet.js";
import { webhookSubscriptionsList } from "../funcs/webhookSubscriptionsList.js";
import { webhookSubscriptionsListWebhooks } from "../funcs/webhookSubscriptionsListWebhooks.js";
import { webhookSubscriptionsUpdate } from "../funcs/webhookSubscriptionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class WebhookSubscriptions extends ClientSDK {
  /**
   * List webhook subscriptions
   *
   * @remarks
   * List webhook subscriptions
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.ListWebhookSubscriptionsResponse> {
    return unwrapAsync(webhookSubscriptionsList(
      this,
      options,
    ));
  }

  /**
   * Create a webhook subscription
   *
   * @remarks
   * Create a webhook subscription
   */
  async create(
    request: operations.CreateWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateWebhookSubscriptionResponse | undefined> {
    return unwrapAsync(webhookSubscriptionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a webhook subscription
   *
   * @remarks
   * Retrieve a webhook subscription
   */
  async get(
    request: operations.GetWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook subscription
   *
   * @remarks
   * Update a webhook subscription
   */
  async update(
    request: operations.UpdateWebhookSubscriptionRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a webhook subscription
   *
   * @remarks
   * Delete a webhook subscription
   */
  async delete(
    request: operations.DeleteRequest,
    options?: RequestOptions,
  ): Promise<models.WebhookSubscription> {
    return unwrapAsync(webhookSubscriptionsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * List webhooks for a webhook subscription
   *
   * @remarks
   * List webhooks for a webhook subscription
   */
  async listWebhooks(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<operations.ListWebhooksResponse> {
    return unwrapAsync(webhookSubscriptionsListWebhooks(
      this,
      request,
      options,
    ));
  }
}
