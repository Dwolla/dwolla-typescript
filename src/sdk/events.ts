/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsGet } from "../funcs/eventsGet.js";
import { eventsList } from "../funcs/eventsList.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Events extends ClientSDK {
  /**
   * List events
   *
   * @remarks
   * Returns a paginated list of events representing state changes to resources in your Dwolla application. Events track actions on customers, transfers, funding sources, and other resources, sorted by creation date (newest first). Events are retained for 30 days and are essential for webhook notifications and system activity monitoring.
   */
  async list(
    request: operations.ListEventsRequest,
    options?: RequestOptions,
  ): Promise<models.Events> {
    return unwrapAsync(eventsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve event
   *
   * @remarks
   * Returns detailed information for a specific event representing a state change that occurred on a resource in your Dwolla application. Includes the event topic, timestamp, resource links, and correlation ID if applicable.
   */
  async get(
    request: operations.GetEventRequest,
    options?: RequestOptions,
  ): Promise<models.Event> {
    return unwrapAsync(eventsGet(
      this,
      request,
      options,
    ));
  }
}
