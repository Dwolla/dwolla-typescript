/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountCreateAccountFundingSource } from "../funcs/accountCreateAccountFundingSource.js";
import { accountGetAccount } from "../funcs/accountGetAccount.js";
import { accountListAccountFundingSources } from "../funcs/accountListAccountFundingSources.js";
import { accountListAccountMassPayments } from "../funcs/accountListAccountMassPayments.js";
import { accountListAndSearchAccountTransfers } from "../funcs/accountListAndSearchAccountTransfers.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Account extends ClientSDK {
  /**
   * Retrieve Account Details
   *
   * @remarks
   * Retrieve basic account information belonging to the authorized Dwolla account.
   */
  async getAccount(
    request: operations.GetAccountRequest,
    options?: RequestOptions,
  ): Promise<models.Account> {
    return unwrapAsync(accountGetAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a funding source for an account
   *
   * @remarks
   * Create a funding source for an account
   */
  async createAccountFundingSource(
    request: models.CreateFundingSourceForAccountRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateAccountFundingSourceResponse | undefined> {
    return unwrapAsync(accountCreateAccountFundingSource(
      this,
      request,
      options,
    ));
  }

  /**
   * List funding sources for an account
   *
   * @remarks
   * List funding source for an account
   */
  async listAccountFundingSources(
    request: operations.ListAccountFundingSourcesRequest,
    options?: RequestOptions,
  ): Promise<models.FundingSources> {
    return unwrapAsync(accountListAccountFundingSources(
      this,
      request,
      options,
    ));
  }

  /**
   * List and search transfers for an account
   *
   * @remarks
   * List and search transfers for an account
   */
  async listAndSearchAccountTransfers(
    request: operations.ListAndSearchAccountTransfersRequest,
    options?: RequestOptions,
  ): Promise<models.Transfers> {
    return unwrapAsync(accountListAndSearchAccountTransfers(
      this,
      request,
      options,
    ));
  }

  /**
   * List mass payments for an account
   *
   * @remarks
   * List mass payments for an account
   */
  async listAccountMassPayments(
    request: operations.ListAccountMassPaymentsRequest,
    options?: RequestOptions,
  ): Promise<models.MassPayments> {
    return unwrapAsync(accountListAccountMassPayments(
      this,
      request,
      options,
    ));
  }
}
