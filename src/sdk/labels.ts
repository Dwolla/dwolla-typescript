/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { labelsCreateForCustomer } from "../funcs/labelsCreateForCustomer.js";
import { labelsCreateLedgerEntry } from "../funcs/labelsCreateLedgerEntry.js";
import { labelsCreateReallocation } from "../funcs/labelsCreateReallocation.js";
import { labelsGet } from "../funcs/labelsGet.js";
import { labelsGetLedgerEntry } from "../funcs/labelsGetLedgerEntry.js";
import { labelsGetReallocation } from "../funcs/labelsGetReallocation.js";
import { labelsListForCustomer } from "../funcs/labelsListForCustomer.js";
import { labelsListLedgerEntries } from "../funcs/labelsListLedgerEntries.js";
import { labelsRemove } from "../funcs/labelsRemove.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Labels extends ClientSDK {
  /**
   * Retrieve a label
   *
   * @remarks
   * Retrieve a label
   */
  async get(
    request: operations.GetLabelRequest,
    options?: RequestOptions,
  ): Promise<models.Label> {
    return unwrapAsync(labelsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a label
   *
   * @remarks
   * Remove a label
   */
  async remove(
    request: operations.RemoveLabelRequest,
    options?: RequestOptions,
  ): Promise<models.Label> {
    return unwrapAsync(labelsRemove(
      this,
      request,
      options,
    ));
  }

  /**
   * List labels for a customer
   *
   * @remarks
   * List labels for a customer
   */
  async listForCustomer(
    request: operations.ListCustomerLabelsRequest,
    options?: RequestOptions,
  ): Promise<models.Labels> {
    return unwrapAsync(labelsListForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label for a customer
   *
   * @remarks
   * Create a label for a customer
   */
  async createForCustomer(
    request: operations.CreateCustomerLabelRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerLabelResponse | undefined> {
    return unwrapAsync(labelsCreateForCustomer(
      this,
      request,
      options,
    ));
  }

  /**
   * List label ledger entries
   *
   * @remarks
   * List label ledger entries
   */
  async listLedgerEntries(
    request: operations.ListLabelLedgerEntriesRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntries> {
    return unwrapAsync(labelsListLedgerEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label ledger entry
   *
   * @remarks
   * Create a new entry on a Label Ledger. The amount tied to a Label cannot go negative, therefore if the amount of the label ledger entry exceeds the current amount tied to a Label then a validation error will be returned.
   */
  async createLedgerEntry(
    request: operations.CreateLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLabelLedgerEntryResponse | undefined> {
    return unwrapAsync(labelsCreateLedgerEntry(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a label ledger entry
   *
   * @remarks
   * Retrieve a label ledger entry
   */
  async getLedgerEntry(
    request: operations.GetLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntry> {
    return unwrapAsync(labelsGetLedgerEntry(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label reallocation
   *
   * @remarks
   * Create a label reallocation
   */
  async createReallocation(
    request: operations.CreateLabelReallocationRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLabelReallocationResponse | undefined> {
    return unwrapAsync(labelsCreateReallocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a label reallocation
   *
   * @remarks
   * Retrieve a label reallocation
   */
  async getReallocation(
    request: operations.RetrieveLabelReallocationRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveLabelReallocationResponse> {
    return unwrapAsync(labelsGetReallocation(
      this,
      request,
      options,
    ));
  }
}
