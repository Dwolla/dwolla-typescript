/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { labelsCreateCustomerLabel } from "../funcs/labelsCreateCustomerLabel.js";
import { labelsCreateLabelLedgerEntry } from "../funcs/labelsCreateLabelLedgerEntry.js";
import { labelsCreateLabelReallocation } from "../funcs/labelsCreateLabelReallocation.js";
import { labelsGetLabel } from "../funcs/labelsGetLabel.js";
import { labelsGetLabelLedgerEntry } from "../funcs/labelsGetLabelLedgerEntry.js";
import { labelsListCustomerLabels } from "../funcs/labelsListCustomerLabels.js";
import { labelsListLabelLedgerEntries } from "../funcs/labelsListLabelLedgerEntries.js";
import { labelsRemoveLabel } from "../funcs/labelsRemoveLabel.js";
import { labelsRetrieveLabelLedgerEntry } from "../funcs/labelsRetrieveLabelLedgerEntry.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Labels extends ClientSDK {
  /**
   * Retrieve a label
   *
   * @remarks
   * Retrieve a label
   */
  async getLabel(
    request: operations.GetLabelRequest,
    options?: RequestOptions,
  ): Promise<models.Label> {
    return unwrapAsync(labelsGetLabel(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a label
   *
   * @remarks
   * Remove a label
   */
  async removeLabel(
    request: operations.RemoveLabelRequest,
    options?: RequestOptions,
  ): Promise<models.Label> {
    return unwrapAsync(labelsRemoveLabel(
      this,
      request,
      options,
    ));
  }

  /**
   * List labels for a customer
   *
   * @remarks
   * List labels for a customer
   */
  async listCustomerLabels(
    request: operations.ListCustomerLabelsRequest,
    options?: RequestOptions,
  ): Promise<models.Labels> {
    return unwrapAsync(labelsListCustomerLabels(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label for a customer
   *
   * @remarks
   * Create a label for a customer
   */
  async createCustomerLabel(
    request: operations.CreateCustomerLabelRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCustomerLabelResponse | undefined> {
    return unwrapAsync(labelsCreateCustomerLabel(
      this,
      request,
      options,
    ));
  }

  /**
   * List label ledger entries
   *
   * @remarks
   * List label ledger entries
   */
  async listLabelLedgerEntries(
    request: operations.ListLabelLedgerEntriesRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntries> {
    return unwrapAsync(labelsListLabelLedgerEntries(
      this,
      request,
      options,
    ));
  }

  /**
   * Create label ledger entries
   *
   * @remarks
   * Create label ledger entries
   */
  async createLabelLedgerEntry(
    request: operations.CreateLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLabelLedgerEntryResponse | undefined> {
    return unwrapAsync(labelsCreateLabelLedgerEntry(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a label ledger entry
   *
   * @remarks
   * Retrieve a label ledger entry
   */
  async getLabelLedgerEntry(
    request: operations.GetLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<models.LabelLedgerEntry> {
    return unwrapAsync(labelsGetLabelLedgerEntry(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a label reallocation
   *
   * @remarks
   * Create a label reallocation
   */
  async createLabelReallocation(
    request: operations.CreateLabelReallocationRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateLabelReallocationResponse | undefined> {
    return unwrapAsync(labelsCreateLabelReallocation(
      this,
      request,
      options,
    ));
  }

  /**
   * Retrieve a label reallocation
   *
   * @remarks
   * Retrieve a label reallocation
   */
  async retrieveLabelLedgerEntry(
    request: operations.RetrieveLabelLedgerEntryRequest,
    options?: RequestOptions,
  ): Promise<operations.RetrieveLabelLedgerEntryResponse> {
    return unwrapAsync(labelsRetrieveLabelLedgerEntry(
      this,
      request,
      options,
    ));
  }
}
